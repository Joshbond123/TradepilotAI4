{"file_contents":{"admin_sections.tsx":{"content":"              {/* Users Management Section */}\n              {activeSection === \"users\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"text-2xl font-bold text-white\">User Management</h2>\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-crypto-blue text-crypto-blue\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add User\n                    </Button>\n                  </div>\n                  \n                  <Card className=\"bg-crypto-card border-gray-700\">\n                    <CardContent className=\"p-6\">\n                      {usersLoading ? (\n                        <div className=\"text-center py-8\">Loading users...</div>\n                      ) : (\n                        <Table>\n                          <TableHeader>\n                            <TableRow className=\"border-gray-600\">\n                              <TableHead className=\"text-gray-300\">User</TableHead>\n                              <TableHead className=\"text-gray-300\">Email</TableHead>\n                              <TableHead className=\"text-gray-300\">Balance</TableHead>\n                              <TableHead className=\"text-gray-300\">Status</TableHead>\n                              <TableHead className=\"text-gray-300\">Actions</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {adminUsers?.map((adminUser: any) => (\n                              <TableRow key={adminUser.id} className=\"border-gray-600\">\n                                <TableCell className=\"text-white\">{adminUser.username}</TableCell>\n                                <TableCell className=\"text-gray-300\">{adminUser.email}</TableCell>\n                                <TableCell className=\"text-crypto-green\">${parseFloat(adminUser.balance).toLocaleString()}</TableCell>\n                                <TableCell>\n                                  <Badge className={adminUser.isActive ? \"bg-crypto-green\" : \"bg-red-600\"}>\n                                    {adminUser.isActive ? \"Active\" : \"Inactive\"}\n                                  </Badge>\n                                </TableCell>\n                                <TableCell>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"border-crypto-blue text-crypto-blue mr-2\">\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button size=\"sm\" variant=\"destructive\">\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {/* Plans Management Section */}\n              {activeSection === \"plans\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"text-2xl font-bold text-white\">Investment Plans Management</h2>\n                    <Button \n                      size=\"sm\" \n                      className=\"crypto-gradient\"\n                      onClick={() => setIsAddPlanDialogOpen(true)}\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Plan\n                    </Button>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                    {plans?.map((plan: any) => (\n                      <Card key={plan.id} className=\"bg-crypto-card border-gray-700\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <h3 className=\"text-lg font-semibold text-white\">{plan.name}</h3>\n                            <Badge className=\"bg-crypto-green\">Active</Badge>\n                          </div>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-400\">Daily Return</span>\n                              <span className=\"text-crypto-green font-bold\">{plan.profit_percentage}%</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-400\">Duration</span>\n                              <span className=\"text-white\">{plan.duration_days} days</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-400\">Min Investment</span>\n                              <span className=\"text-white\">${plan.min_deposit}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-400\">Max Investment</span>\n                              <span className=\"text-white\">${plan.max_deposit}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2 mt-4\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"flex-1 border-crypto-blue text-crypto-blue\">\n                              <Edit className=\"w-4 h-4 mr-2\" />\n                              Edit\n                            </Button>\n                            <Button size=\"sm\" variant=\"destructive\" className=\"flex-1\">\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Deposits Section */}\n              {activeSection === \"deposits\" && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold text-white\">Deposit Management</h2>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                    <Card className=\"bg-crypto-card border-gray-700\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-sm text-gray-400\">Today's Deposits</h3>\n                          <Wallet className=\"w-5 h-5 text-crypto-green\" />\n                        </div>\n                        <div className=\"text-2xl font-bold text-white\">$12,847</div>\n                        <div className=\"text-sm text-crypto-green\">+18% from yesterday</div>\n                      </CardContent>\n                    </Card>\n                    <Card className=\"bg-crypto-card border-gray-700\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-sm text-gray-400\">Pending Deposits</h3>\n                          <Clock className=\"w-5 h-5 text-yellow-500\" />\n                        </div>\n                        <div className=\"text-2xl font-bold text-white\">7</div>\n                        <div className=\"text-sm text-gray-400\">Awaiting confirmation</div>\n                      </CardContent>\n                    </Card>\n                    <Card className=\"bg-crypto-card border-gray-700\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-sm text-gray-400\">Total Volume</h3>\n                          <TrendingUp className=\"w-5 h-5 text-crypto-blue\" />\n                        </div>\n                        <div className=\"text-2xl font-bold text-white\">$847K</div>\n                        <div className=\"text-sm text-crypto-green\">This month</div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  <Card className=\"bg-crypto-card border-gray-700\">\n                    <CardContent className=\"p-6\">\n                      <h3 className=\"text-lg font-semibold text-white mb-4\">Recent Deposits</h3>\n                      <div className=\"space-y-3\">\n                        {deposits?.slice(0, 10).map((deposit: any) => (\n                          <div key={deposit.id} className=\"flex items-center justify-between p-3 bg-crypto-dark rounded-lg\">\n                            <div>\n                              <div className=\"text-white font-medium\">${parseFloat(deposit.usdValue).toLocaleString()}</div>\n                              <div className=\"text-sm text-gray-400\">{deposit.cryptocurrency} • {deposit.username}</div>\n                            </div>\n                            <div className=\"text-right\">\n                              <Badge className={deposit.status === \"confirmed\" ? \"bg-crypto-green\" : \"bg-yellow-600\"}>\n                                {deposit.status}\n                              </Badge>\n                              <div className=\"text-xs text-gray-500 mt-1\">\n                                {new Date(deposit.createdAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {/* Withdrawals Section */}\n              {activeSection === \"withdrawals\" && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold text-white\">Withdrawal Management</h2>\n                  \n                  <Card className=\"bg-crypto-card border-gray-700\">\n                    <CardContent className=\"p-6\">\n                      <h3 className=\"text-lg font-semibold text-white mb-4\">Pending Withdrawals</h3>\n                      {pendingWithdrawals && pendingWithdrawals.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          {pendingWithdrawals.map((withdrawal: any) => (\n                            <div key={withdrawal.id} className=\"p-4 bg-yellow-500 bg-opacity-10 border border-yellow-500 border-opacity-30 rounded-lg\">\n                              <div className=\"flex items-center justify-between\">\n                                <div>\n                                  <div className=\"text-lg font-semibold text-white\">${parseFloat(withdrawal.usdValue).toLocaleString()}</div>\n                                  <div className=\"text-sm text-gray-400\">{withdrawal.cryptocurrency} withdrawal</div>\n                                  <div className=\"text-xs text-gray-500 truncate max-w-xs\">To: {withdrawal.walletAddress}</div>\n                                </div>\n                                <div className=\"flex space-x-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"bg-crypto-green hover:bg-crypto-green/80\"\n                                    onClick={() => handleWithdrawalAction(withdrawal.id, \"approved\")}\n                                  >\n                                    <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                    Approve\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"destructive\"\n                                    onClick={() => handleWithdrawalAction(withdrawal.id, \"rejected\", \"Rejected by admin\")}\n                                  >\n                                    <XCircle className=\"w-4 h-4 mr-1\" />\n                                    Reject\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center text-gray-400 py-8\">\n                          <CreditCard className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                          <div>No pending withdrawals</div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {/* Referrals Section */}\n              {activeSection === \"referrals\" && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold text-white\">Referral System Control</h2>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                    <Card className=\"bg-crypto-card border-gray-700\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-sm text-gray-400\">Total Referrals</h3>\n                          <Gift className=\"w-5 h-5 text-crypto-green\" />\n                        </div>\n                        <div className=\"text-2xl font-bold text-white\">2,847</div>\n                        <div className=\"text-sm text-crypto-green\">+124 this week</div>\n                      </CardContent>\n                    </Card>\n                    <Card className=\"bg-crypto-card border-gray-700\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-sm text-gray-400\">Referral Earnings</h3>\n                          <DollarSign className=\"w-5 h-5 text-yellow-500\" />\n                        </div>\n                        <div className=\"text-2xl font-bold text-white\">$18,492</div>\n                        <div className=\"text-sm text-gray-400\">Total paid out</div>\n                      </CardContent>\n                    </Card>\n                    <Card className=\"bg-crypto-card border-gray-700\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-sm text-gray-400\">Conversion Rate</h3>\n                          <TrendingUp className=\"w-5 h-5 text-crypto-blue\" />\n                        </div>\n                        <div className=\"text-2xl font-bold text-white\">34.7%</div>\n                        <div className=\"text-sm text-crypto-green\">Above average</div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  <Card className=\"bg-crypto-card border-gray-700\">\n                    <CardContent className=\"p-6\">\n                      <h3 className=\"text-lg font-semibold text-white mb-4\">Referral Settings</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label className=\"text-gray-300\">Referral Commission (%)</Label>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"10\" \n                            className=\"bg-crypto-dark border-gray-600 text-white\" \n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-gray-300\">Minimum Referral Payout ($)</Label>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"25\" \n                            className=\"bg-crypto-dark border-gray-600 text-white\" \n                          />\n                        </div>\n                      </div>\n                      <Button className=\"crypto-gradient mt-4\">\n                        Update Settings\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}","size_bytes":16514},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# TradePilot - Crypto Arbitrage Trading Platform\n\n## Overview\nTradePilot is a full-stack cryptocurrency arbitrage trading platform enabling users to invest in automated trading plans, monitor real-time arbitrage opportunities, and manage crypto investments. Its purpose is to provide a comprehensive, user-friendly platform with a modern dark-themed UI, real-time market data, robust user authentication, investment management, and administrative controls. The project aims to capitalize on the growing interest in automated crypto trading and provide a reliable, efficient tool for users to engage in arbitrage strategies.\n\n## Recent Changes (August 20, 2025)\n- **Logo Management System**: Implemented comprehensive admin logo upload system replacing all fake \"T\" logos with dynamic BrandLogo components\n- **Admin Panel Cleanup**: Removed multiple fake admin files (admin.tsx, admin-clean.tsx, admin-new.tsx) and consolidated functionality into admin-new-working.tsx\n- **Brand Customization**: Added LogoManagement component to admin settings panel enabling custom logo uploads with fallback to default logo\n- **Dynamic Branding**: Updated login, register, and homepage pages to display uploaded admin logos automatically\n- **Enhanced UI Components**: Created reusable BrandLogo component with size variants and text display options\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n**Technology Stack**: React with TypeScript, built using Vite.\n**UI Framework**: Radix UI components with shadcn/ui for a consistent, accessible design system.\n**Styling**: Tailwind CSS with custom crypto-themed variables and dark mode support.\n**Routing**: Wouter for lightweight client-side routing.\n**State Management**: TanStack Query for server state management and caching.\n**Form Handling**: React Hook Form for efficient form validation and submission.\n**Design System**: Custom crypto-themed design featuring dark gradients, blue and green accent colors, and specialized components like CryptoCard and PlanCard.\n\n### Backend Architecture\n**Framework**: Express.js with TypeScript running on Node.js, providing RESTful API endpoints.\n**Authentication**: JWT-based authentication with bcrypt for password hashing. Middleware handles token validation and role-based access control (admin vs. regular users).\n**API Structure**: RESTful endpoints organized by domain (e.g., `/api/auth/*`, `/api/crypto/*`, `/api/plans/*`).\n\n### Data Storage Solutions\n**Database**: File-based JSON storage system for reliable data persistence in Replit environment.\n**Schema Design**: Comprehensive data model includes users, investment plans, user investments, transaction records, messaging, support tickets, audit logging, and system settings stored in structured JSON files.\n**Storage Implementation**: Custom FileStorage class providing type-safe operations with automatic file management and data integrity.\n**Data Files**: All data stored securely in local `database/` directory with separate files for users, plans, investments, deposits, withdrawals, messages, and settings.\n\n### Authentication and Authorization\n**User Authentication**: JWT tokens with 7-day expiration, stored in localStorage.\n**Authorization Levels**: Regular users access trading features, investments, and account management. Admin users have comprehensive access to user management (view profiles, adjust balances, block/unblock, edit/delete users), referral commission configuration, system settings, investment plan management, wallet configuration, audit logs, and security monitoring.\n**Security**: Password hashing with bcrypt, protected routes with middleware validation, and secure token-based session management.\n\n## External Dependencies\n\n### Cryptocurrency Data\n- **CoinGecko API**: Real-time cryptocurrency price feeds and market data.\n\n### UI and Development\n- **Radix UI**: Component library for accessible UI primitives.\n- **shadcn/ui**: Pre-styled component system built on Radix UI.\n- **Tailwind CSS**: Utility-first CSS framework.\n- **Replit**: Development environment integration.\n\n### Build and Deployment\n- **Vite**: Fast build tool and development server for React.\n- **esbuild**: JavaScript bundler for production server builds.\n- **TypeScript**: Type safety across the application stack.\n\n### Additional Services\n- **TanStack Query**: Advanced data fetching, caching, and synchronization.\n- **Wouter**: Lightweight routing solution.\n- **React Hook Form**: Efficient form handling with validation.","size_bytes":4552},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        'crypto-dark': \"var(--crypto-dark)\",\n        'crypto-card': \"var(--crypto-card)\",\n        'crypto-blue': \"var(--crypto-blue)\",\n        'crypto-green': \"var(--crypto-green)\",\n        'profit-green': \"var(--profit-green)\",\n        'loss-red': \"var(--loss-red)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      backgroundImage: {\n        'crypto-gradient': \"var(--crypto-gradient)\",\n        'dark-gradient': \"var(--dark-gradient)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        profitFlash: {\n          \"0%, 100%\": { backgroundColor: \"transparent\" },\n          \"50%\": { backgroundColor: \"hsl(160, 84%, 39%, 0.1)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"profit-flash\": \"profitFlash 1s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3058},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { InvestmentService } from \"./services/investment-service\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Start the daily investment return service\n    InvestmentService.startDailyReturnService();\n  });\n})();\n","size_bytes":2236},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport jwt from \"jsonwebtoken\";\nimport { randomUUID } from \"crypto\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { AuthService } from \"./services/auth-service\";\nimport { CryptoService } from \"./services/crypto-service\";\nimport { InvestmentService } from \"./services/investment-service\";\nimport { ChatService } from \"./services/chat-service\";\nimport { LocationService } from \"./services/location-service\";\nimport { AIChatService } from \"./services/ai-chat-service\";\nimport { CallMeBotService } from \"./services/callmebot-service\";\nimport { authenticateToken, requireAdmin, type AuthenticatedRequest } from \"./middleware/auth\";\nimport { \n  registerSchema, \n  loginSchema, \n  withdrawalSchema, \n  supportTicketSchema, \n  messageSchema, \n  planSchema,\n  depositSchema,\n  investmentSchema,\n  adminAccessSchema,\n  userUpdateSchema,\n  systemSettingsUpdateSchema,\n  verifyAccountSchema,\n  forgotPasswordSchema,\n  resetPasswordSchema,\n  resendVerificationSchema,\n  withdrawalApprovalSchema,\n  balanceAdjustmentSchema,\n  profileUpdateSchema,\n  passwordChangeSchema,\n  chatMessageSchema,\n  inboxMessageSchema,\n  aiChatMessageSchema,\n  aiPersonalityUpdateSchema,\n  apiKeyCreateSchema,\n  apiKeyUpdateSchema,\n  apiKeyDeleteSchema\n} from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport geoip from \"geoip-lite\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"tradepilot-secret-key\";\n\n// Configure multer for QR code uploads\nconst uploadDir = path.join(process.cwd(), \"uploads\", \"qr-codes\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\n// Configure multer for logo uploads\nconst logoUploadDir = path.join(process.cwd(), \"uploads\", \"logos\");\nif (!fs.existsSync(logoUploadDir)) {\n  fs.mkdirSync(logoUploadDir, { recursive: true });\n}\n\nconst storage_multer = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, uploadDir);\n  },\n  filename: function (req, file, cb) {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, `${req.body.cryptocurrency}-${uniqueSuffix}${path.extname(file.originalname)}`);\n  }\n});\n\nconst upload = multer({ \n  storage: storage_multer,\n  limits: {\n    fileSize: 5 * 1024 * 1024 // 5MB limit\n  },\n  fileFilter: function (req, file, cb) {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  }\n});\n\n// Logo upload configuration\nconst logoStorage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, logoUploadDir);\n  },\n  filename: function (req, file, cb) {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, `logo-${uniqueSuffix}${path.extname(file.originalname)}`);\n  }\n});\n\nconst logoUpload = multer({ \n  storage: logoStorage,\n  limits: {\n    fileSize: 5 * 1024 * 1024 // 5MB limit\n  },\n  fileFilter: function (req, file, cb) {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve static files from uploads directory\n  app.use(\"/uploads\", express.static(path.join(process.cwd(), \"uploads\")));\n  \n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      const result = await AuthService.register(userData);\n      \n      // Log registration activity - extract real client IP\n      const userIP = LocationService.extractRealClientIP(req);\n      const country = await LocationService.detectUserCountry(userIP);\n\n      await storage.createLoginLog({\n        username: userData.username,\n        action: 'register',\n        country: country,\n        ipAddress: userIP,\n        userAgent: req.headers['user-agent'] || 'Unknown'\n      });\n\n      // Send CallMeBot notification for new registration\n      await CallMeBotService.sendNewRegistrationNotification(userData.username, country);\n      \n      res.json(result);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const loginData = loginSchema.parse(req.body);\n      const result = await AuthService.login(loginData);\n      \n      // Detect user country and timezone after successful login\n      const userIP = LocationService.extractRealClientIP(req);\n      const country = await LocationService.detectUserCountry(userIP);\n      \n      // Map countries to common timezones based on country names\n      let timezone = 'America/New_York';\n      if (country !== 'Unknown') {\n        // Map countries to common timezones based on country names\n        const countryTimezones: { [key: string]: string } = {\n          'United States': 'America/New_York',\n          'Canada': 'America/Toronto', \n          'United Kingdom': 'Europe/London',\n          'Germany': 'Europe/Berlin',\n          'France': 'Europe/Paris',\n          'Japan': 'Asia/Tokyo',\n          'Australia': 'Australia/Sydney',\n          'India': 'Asia/Kolkata',\n          'Nigeria': 'Africa/Lagos',\n          'Kenya': 'Africa/Nairobi',\n          'South Africa': 'Africa/Johannesburg',\n          'Brazil': 'America/Sao_Paulo',\n          'Mexico': 'America/Mexico_City'\n        };\n        timezone = countryTimezones[country] || 'America/New_York';\n      }\n      \n      // Update user with country and timezone info\n      await storage.updateUser(result.user.id, { country, timezone });\n      // Add country and timezone to the response\n      (result.user as any).country = country;\n      (result.user as any).timezone = timezone;\n\n      // Log login activity\n      await storage.createLoginLog({\n        userId: result.user.id,\n        username: result.user.username,\n        action: 'login',\n        country: country,\n        timezone: timezone,\n        ipAddress: userIP,\n        userAgent: req.headers['user-agent'] || 'Unknown'\n      });\n\n      // Send CallMeBot notification for user login\n      await CallMeBotService.sendUserLoginNotification(result.user.username, country);\n      \n      res.json(result);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(401).json({ message: error instanceof Error ? error.message : \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Log website visit activity\n      const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];\n      let userIP = '';\n      if (typeof clientIP === 'string') {\n        userIP = clientIP.split(',')[0].trim();\n      } else if (Array.isArray(clientIP)) {\n        userIP = clientIP[0];\n      }\n\n      await storage.createLoginLog({\n        userId: user.id,\n        username: user.username,\n        action: 'visit',\n        country: (user as any).country || 'Unknown',\n        timezone: (user as any).timezone,\n        ipAddress: userIP,\n        userAgent: req.headers['user-agent'] || 'Unknown'\n      });\n      \n      // Remove password from response\n      const { password, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      res.status(404).json({ message: \"User not found\" });\n    }\n  });\n\n  // Country detection endpoint\n  app.get(\"/api/detect-country\", async (req, res) => {\n    try {\n      const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];\n      let userIP = '';\n      \n      if (typeof clientIP === 'string') {\n        userIP = clientIP.split(',')[0].trim();\n      } else if (Array.isArray(clientIP)) {\n        userIP = clientIP[0];\n      }\n      \n      // Handle localhost development\n      if (userIP === '::1' || userIP === '127.0.0.1' || userIP.includes('localhost')) {\n        return res.json({ country: 'US', city: 'Development' });\n      }\n      \n      const geo = geoip.lookup(userIP);\n      const country = geo?.country || 'Unknown';\n      const city = geo?.city || 'Unknown';\n      \n      res.json({ country, city, ip: userIP });\n    } catch (error) {\n      console.error('Country detection error:', error);\n      res.json({ country: 'Unknown', city: 'Unknown' });\n    }\n  });\n\n  // Profile update route\n  app.patch(\"/api/auth/profile\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const profileData = profileUpdateSchema.parse(req.body);\n      \n      // Check if username is already taken by another user\n      const existingUsername = await storage.getUserByUsername(profileData.username);\n      if (existingUsername && existingUsername.id !== req.user!.id) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Check if email is already taken by another user\n      const existingEmail = await storage.getUserByEmail(profileData.email);\n      if (existingEmail && existingEmail.id !== req.user!.id) {\n        return res.status(400).json({ message: \"Email already taken\" });\n      }\n\n      const updatedUser = await storage.updateUser(req.user!.id, {\n        username: profileData.username,\n        email: profileData.email,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove password from response\n      const { password, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Password change route\n  app.patch(\"/api/auth/password\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const passwordData = passwordChangeSchema.parse(req.body);\n      \n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const isValidPassword = await AuthService.verifyPassword(user.password, passwordData.currentPassword);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password and update\n      const hashedPassword = await AuthService.hashPassword(passwordData.newPassword);\n      await storage.updateUser(req.user!.id, { password: hashedPassword });\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Email verification routes\n  app.post(\"/api/auth/verify\", async (req, res) => {\n    try {\n      const verifyData = verifyAccountSchema.parse(req.body);\n      // Get the origin from the request to ensure email redirects to correct domain\n      const requestOrigin = `${req.protocol}://${req.get('host')}`;\n      const result = await AuthService.verifyAccount(verifyData, requestOrigin);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Verification failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/resend-verification\", async (req, res) => {\n    try {\n      const { email } = resendVerificationSchema.parse(req.body);\n      const result = await AuthService.resendVerificationCode(email);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to resend verification code\" });\n    }\n  });\n\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const forgotData = forgotPasswordSchema.parse(req.body);\n      const result = await AuthService.forgotPassword(forgotData);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to send reset code\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const resetData = resetPasswordSchema.parse(req.body);\n      const result = await AuthService.resetPassword(resetData);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Password reset failed\" });\n    }\n  });\n\n  // Admin access route (hidden)\n  app.post(\"/api/admin/access\", async (req, res) => {\n    try {\n      const { password } = adminAccessSchema.parse(req.body);\n      const adminPassword = process.env.ADMIN_PASSWORD || \"joshbond\";\n      \n      if (password === adminPassword) {\n        // Create a special admin token\n        const adminToken = jwt.sign(\n          { userId: 'admin', isAdmin: true }, \n          JWT_SECRET, \n          { expiresIn: '7d' }\n        );\n        \n        res.json({ \n          success: true, \n          message: \"Admin access granted\",\n          token: adminToken,\n          user: {\n            id: 'admin',\n            username: 'Administrator',\n            email: 'admin@tradepilot.com',\n            isAdmin: true\n          }\n        });\n      } else {\n        // Log failed attempt\n        console.log(`Failed admin access attempt at ${new Date().toISOString()}`);\n        res.status(403).json({ success: false, message: \"Access Denied\" });\n      }\n    } catch (error) {\n      res.status(400).json({ success: false, message: \"Invalid request\" });\n    }\n  });\n\n  // Public reCAPTCHA settings route\n  app.get(\"/api/auth/recaptcha-settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      const recaptchaSettings = settings?.recaptcha;\n      \n      res.json({\n        enabled: recaptchaSettings?.enabled || false,\n        siteKey: recaptchaSettings?.site_key || \"\",\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reCAPTCHA settings\" });\n    }\n  });\n\n  // Crypto routes\n  app.get(\"/api/crypto/prices\", async (req, res) => {\n    try {\n      const prices = await CryptoService.getCryptoPrices();\n      res.json(prices);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch crypto prices\" });\n    }\n  });\n\n  app.get(\"/api/crypto/arbitrage\", async (req, res) => {\n    try {\n      const opportunities = await CryptoService.getArbitrageOpportunities();\n      res.json(opportunities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch arbitrage opportunities\" });\n    }\n  });\n\n  // Investment plan routes\n  app.get(\"/api/plans\", async (req, res) => {\n    try {\n      const plans = await storage.getInvestmentPlans();\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch investment plans\" });\n    }\n  });\n\n  // Admin plan management\n  app.put(\"/api/admin/plans/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const planData = req.body;\n      \n      const plans = await storage.getInvestmentPlans();\n      const planIndex = plans.findIndex(p => p.id === id);\n      \n      if (planIndex === -1) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n      \n      plans[planIndex] = { ...plans[planIndex], ...planData };\n      await storage.updateInvestmentPlans(plans);\n      \n      res.json({ success: true, plan: plans[planIndex] });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update plan\" });\n    }\n  });\n\n  // Wallet management routes\n  app.get(\"/api/system/wallets\", async (req, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      \n      // Initialize wallets object if it doesn't exist\n      if (!settings.wallets) {\n        settings.wallets = {};\n      }\n      \n      // Initialize individual wallet objects if they don't exist\n      if (!settings.wallets.btc) {\n        settings.wallets.btc = { address: \"\", qr_code: \"\" };\n      }\n      if (!settings.wallets.eth) {\n        settings.wallets.eth = { address: \"\", qr_code: \"\" };\n      }\n      if (!settings.wallets.usdt) {\n        settings.wallets.usdt = { address: \"\", qr_code: \"\" };\n      }\n      \n      res.json({\n        BTC: {\n          address: settings.wallets.btc.address || \"\",\n          qrCode: settings.wallets.btc.qrCode || settings.wallets.btc.qr_code || \"\"\n        },\n        ETH: {\n          address: settings.wallets.eth.address || \"\",\n          qrCode: settings.wallets.eth.qrCode || settings.wallets.eth.qr_code || \"\"\n        },\n        USDT: {\n          address: settings.wallets.usdt.address || \"\",\n          qrCode: settings.wallets.usdt.qrCode || settings.wallets.usdt.qr_code || \"\"\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch wallets\" });\n    }\n  });\n\n  app.put(\"/api/admin/wallets\", async (req, res) => {\n    try {\n      const { cryptocurrency, address, qrCode } = req.body;\n      \n      const settings = await storage.getSystemSettings();\n      const crypto = cryptocurrency.toLowerCase() as 'btc' | 'eth' | 'usdt';\n      \n      if (settings.wallets[crypto]) {\n        settings.wallets[crypto].address = address;\n        if (qrCode) {\n          settings.wallets[crypto].qrCode = qrCode;\n          settings.wallets[crypto].qr_code = qrCode; // Support both field names\n        }\n        await storage.updateSystemSettings(settings);\n      }\n      \n      res.json({ \n        success: true, \n        message: `${cryptocurrency} wallet updated successfully`,\n        wallet: { cryptocurrency, address, qrCode }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update wallet\" });\n    }\n  });\n\n  app.post(\"/api/investments\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const investmentData = investmentSchema.parse(req.body);\n      \n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const plan = await storage.getInvestmentPlan(investmentData.planId);\n      if (!plan || !plan.active) {\n        return res.status(404).json({ message: \"Investment plan not found or inactive\" });\n      }\n\n      if (investmentData.amount < plan.min_deposit) {\n        return res.status(400).json({ message: `Minimum investment is $${plan.min_deposit}` });\n      }\n\n      if (investmentData.amount > plan.max_deposit) {\n        return res.status(400).json({ message: `Maximum investment is $${plan.max_deposit}` });\n      }\n\n      if (user.balance < investmentData.amount) {\n        return res.status(400).json({ message: \"Insufficient balance\" });\n      }\n\n      // Deduct investment amount from user's balance\n      const newBalance = user.balance - investmentData.amount;\n      await storage.updateUser(req.user!.id, { balance: newBalance });\n\n      // Calculate daily return: investment_amount * daily_profit_percentage / 100\n      const dailyReturn = (investmentData.amount * plan.profit_percentage / 100);\n\n      // Create complete investment record with all required fields\n      const fullInvestmentData = {\n        id: randomUUID(),\n        planId: investmentData.planId,\n        amount: investmentData.amount,\n        daily_return: dailyReturn,\n        total_earned: 0,\n        days_remaining: plan.duration_days,\n        is_active: true,\n        created_at: new Date().toISOString(),\n        plan_name: plan.name,\n        plan_profit_percentage: plan.profit_percentage,\n      };\n\n      const investment = await storage.createUserInvestment(fullInvestmentData, req.user!.id);\n      res.json(investment);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create investment\" });\n    }\n  });\n\n  // User investment routes\n  app.get(\"/api/investments\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const investments = await storage.getUserInvestments(req.user!.id);\n      \n      // Enrich investment data with plan details if missing\n      const enrichedInvestments = await Promise.all(\n        investments.map(async (investment: any) => {\n          if (!investment.plan_profit_percentage && investment.planId) {\n            const plan = await storage.getInvestmentPlan(investment.planId);\n            if (plan) {\n              investment.plan_profit_percentage = plan.profit_percentage;\n            }\n          }\n          return investment;\n        })\n      );\n      \n      res.json(enrichedInvestments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch investments\" });\n    }\n  });\n\n  // Manual daily returns processing (for testing and demo purposes)\n  app.post(\"/api/investments/process-returns\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      console.log(\"Manual daily returns processing triggered by admin\");\n      await InvestmentService.processDailyReturns(); // Use the main function instead\n      const result = await InvestmentService.processDailyReturnsNow();\n      res.json({\n        message: `Successfully processed ${result.processed} investments`,\n        processed: result.processed,\n        totalCredited: result.totalCredited\n      });\n    } catch (error) {\n      console.error(\"Error in manual returns processing:\", error);\n      res.status(500).json({ message: \"Failed to process daily returns\" });\n    }\n  });\n\n  // Test timezone-based profit distribution\n  app.post(\"/api/investments/test-timezone-profits\", requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      console.log(\"Manual timezone-based profit processing triggered by admin\");\n      await InvestmentService.processReturnsForLocalTime();\n      res.json({\n        message: \"Successfully tested timezone-based profit distribution - check console logs\"\n      });\n    } catch (error) {\n      console.error(\"Error in timezone-based returns processing:\", error);\n      res.status(500).json({ message: \"Failed to process timezone-based returns\" });\n    }\n  });\n\n  // Deposit routes\n  app.get(\"/api/deposits\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const deposits = await storage.getUserDeposits(req.user!.id);\n      res.json(deposits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deposits\" });\n    }\n  });\n\n  app.post(\"/api/deposits\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const depositData = depositSchema.parse(req.body);\n      const deposit = await storage.createDeposit(depositData, req.user!.id);\n      res.json(deposit);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create deposit\" });\n    }\n  });\n\n  app.get(\"/api/system/wallets\", async (req, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      \n      // Initialize wallets object if it doesn't exist\n      if (!settings.wallets) {\n        settings.wallets = {};\n      }\n      \n      // Initialize individual wallet objects if they don't exist\n      if (!settings.wallets.btc) {\n        settings.wallets.btc = { address: \"\", qr_code: \"\" };\n      }\n      if (!settings.wallets.eth) {\n        settings.wallets.eth = { address: \"\", qr_code: \"\" };\n      }\n      if (!settings.wallets.usdt) {\n        settings.wallets.usdt = { address: \"\", qr_code: \"\" };\n      }\n      \n      res.json({\n        BTC: {\n          address: settings.wallets.btc.address || \"\",\n          qrCode: settings.wallets.btc.qrCode || settings.wallets.btc.qr_code || \"\"\n        },\n        ETH: {\n          address: settings.wallets.eth.address || \"\",\n          qrCode: settings.wallets.eth.qrCode || settings.wallets.eth.qr_code || \"\"\n        },\n        USDT: {\n          address: settings.wallets.usdt.address || \"\",\n          qrCode: settings.wallets.usdt.qrCode || settings.wallets.usdt.qr_code || \"\"\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch wallet addresses\" });\n    }\n  });\n\n  // Withdrawal routes\n  app.get(\"/api/withdrawals\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const withdrawals = await storage.getUserWithdrawals(req.user!.id);\n      res.json(withdrawals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch withdrawals\" });\n    }\n  });\n\n  // Get all withdrawals (admin only)\n  app.get(\"/api/admin/withdrawals\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const withdrawals = await storage.getAllWithdrawals();\n      \n      // Add user information to each withdrawal\n      const withdrawalsWithUsers = await Promise.all(\n        withdrawals.map(async (withdrawal) => {\n          const user = await storage.getUser(withdrawal.userId);\n          return {\n            ...withdrawal,\n            user: user ? {\n              id: user.id,\n              username: user.username,\n              email: user.email,\n              country: user.country\n            } : null\n          };\n        })\n      );\n      \n      res.json(withdrawalsWithUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch withdrawals\" });\n    }\n  });\n\n  app.post(\"/api/withdrawals\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const withdrawalData = withdrawalSchema.parse(req.body);\n      \n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const settings = await storage.getSystemSettings();\n      const minWithdrawal = settings.depositSettings?.min_withdrawal || settings.withdrawal_limits?.min_withdrawal || 10;\n\n      if (withdrawalData.amount < minWithdrawal) {\n        return res.status(400).json({ message: `Minimum withdrawal is $${minWithdrawal}` });\n      }\n\n      if (user.balance < withdrawalData.amount) {\n        return res.status(400).json({ message: \"Insufficient balance\" });\n      }\n\n      // Note: Balance is NOT deducted here - only after admin approval\n      const withdrawal = await storage.createWithdrawal(withdrawalData, req.user!.id);\n      \n      // Send CallMeBot notification for withdrawal request\n      try {\n        const notificationSent = await CallMeBotService.sendWithdrawalRequestNotification(\n          user.username, \n          withdrawalData.amount, \n          withdrawalData.cryptocurrency, \n          withdrawalData.wallet_address\n        );\n        if (notificationSent) {\n          console.log(`CallMeBot notification sent successfully: withdrawal_request for ${user.username}`);\n        } else {\n          console.log(`CallMeBot notification failed or disabled: withdrawal_request for ${user.username}`);\n        }\n      } catch (error) {\n        console.error('Error sending withdrawal notification:', error);\n      }\n      \n      res.json(withdrawal);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create withdrawal request\" });\n    }\n  });\n\n  // Message routes\n  app.get(\"/api/messages\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messages = await storage.getUserMessages(req.user!.id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.patch(\"/api/messages/:id/read\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.markMessageAsRead(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark message as read\" });\n    }\n  });\n\n  app.patch(\"/api/messages/mark-all-read\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.markAllMessagesAsRead(req.user!.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all messages as read\" });\n    }\n  });\n\n  // Support ticket routes\n  app.get(\"/api/support-tickets\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tickets = await storage.getUserSupportTickets(req.user!.id);\n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.post(\"/api/support-tickets\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const ticketData = supportTicketSchema.parse(req.body);\n      const ticket = await storage.createSupportTicket(ticketData, req.user!.id);\n      \n      // Get user info for notification\n      const user = await storage.getUser(req.user!.id);\n      if (user) {\n        // Send CallMeBot notification for new support ticket\n        await CallMeBotService.sendSupportTicketNotification(\n          user.username, \n          ticketData.subject, \n          ticketData.priority || 'Medium'\n        );\n      }\n      \n      res.json(ticket);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  // Referral routes\n  app.get(\"/api/referrals\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const [earnings, referredUsers] = await Promise.all([\n        storage.getReferralEarnings(req.user!.id),\n        storage.getReferredUsers(req.user!.id),\n      ]);\n\n      const totalEarnings = earnings.reduce((sum, earning) => sum + earning.amount, 0);\n\n      const user = await storage.getUser(req.user!.id);\n\n      res.json({\n        referralCode: user?.referralCode,\n        earnings,\n        referredUsers: referredUsers.map(user => ({\n          id: user.id,\n          username: user.username,\n          createdAt: user.createdAt,\n        })),\n        totalEarnings,\n        totalReferrals: referredUsers.length,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch referral data\" });\n    }\n  });\n\n  // ADMIN ROUTES\n  \n  // Admin withdrawal management\n  app.get(\"/api/admin/withdrawals\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const withdrawals = await storage.getAllWithdrawals();\n      res.json(withdrawals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch withdrawals\" });\n    }\n  });\n\n  app.patch(\"/api/admin/withdrawals/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const approvalData = withdrawalApprovalSchema.parse(req.body);\n      \n      const withdrawal = await storage.approveWithdrawal(id, approvalData.admin_notes);\n      res.json(withdrawal);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to process withdrawal\" });\n    }\n  });\n\n  // Admin balance adjustment\n  app.post(\"/api/admin/balance-adjust\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const adjustmentData = balanceAdjustmentSchema.parse(req.body);\n      const result = await storage.adjustUserBalance(adjustmentData.userId, adjustmentData.amount, adjustmentData.type);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to adjust balance\" });\n    }\n  });\n  \n  // Admin Dashboard Stats\n  app.get(\"/api/admin/stats\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const [allUsers, allDeposits, allWithdrawals, allInvestments] = await Promise.all([\n        storage.getAllUsers(),\n        storage.getAllDeposits(),\n        storage.getAllWithdrawals(),\n        storage.getAllInvestments(),\n      ]);\n      \n      const totalUsers = allUsers.length;\n      const totalDeposits = allDeposits.length;\n      const totalWithdrawals = allWithdrawals.length;\n      const activeInvestments = allInvestments.filter((inv: any) => inv.is_active).length;\n\n      res.json({\n        totalUsers,\n        totalDeposits,\n        totalWithdrawals,\n        activeInvestments,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  // Admin withdrawal management routes\n  app.post(\"/api/admin/withdrawals/:id/approve\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { status, admin_notes } = req.body;\n      \n      if (![\"approved\", \"rejected\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status. Must be 'approved' or 'rejected'\" });\n      }\n      \n      let withdrawal;\n      if (status === 'approved') {\n        withdrawal = await storage.approveWithdrawal(id, admin_notes);\n      } else {\n        withdrawal = await storage.updateWithdrawal(id, { status, admin_notes });\n      }\n      \n      if (!withdrawal) {\n        return res.status(404).json({ message: \"Withdrawal not found\" });\n      }\n      \n      res.json({ success: true, withdrawal });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to process withdrawal approval\" });\n    }\n  });\n\n  // Admin balance adjustment routes\n  app.post(\"/api/admin/users/:id/balance\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { amount, type, notes } = req.body;\n      \n      if (![\"add\", \"subtract\"].includes(type)) {\n        return res.status(400).json({ message: \"Invalid type. Must be 'add' or 'subtract'\" });\n      }\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Amount must be a positive number\" });\n      }\n      \n      const user = await storage.adjustUserBalance(id, amount, type === 'add' ? 'credit' : 'debit');\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // If adding balance, create a deposit record\n      if (type === 'add') {\n        const deposit = {\n          id: `admin_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          amount: amount,\n          status: 'approved',\n          type: 'admin_credit',\n          notes: notes || 'Admin balance adjustment',\n          created_at: new Date().toISOString(),\n          approved_at: new Date().toISOString(),\n          admin_id: req.user.userId\n        };\n        await storage.createDeposit(deposit, id);\n        \n        // Check if user was referred and handle referral bonus\n        if (user.referredBy) {\n          const referrer = await storage.getUserByReferralCode(user.referredBy);\n          if (referrer) {\n            const referralBonus = amount * 0.10; // 10% bonus\n            await storage.adjustUserBalance(referrer.id, referralBonus, 'credit');\n            \n            // Create deposit record for referral bonus\n            const bonusDeposit = {\n              id: `referral_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n              amount: referralBonus,\n              status: 'approved',\n              type: 'referral_bonus',\n              notes: `10% referral bonus from ${user.username}'s deposit of $${amount}`,\n              created_at: new Date().toISOString(),\n              approved_at: new Date().toISOString(),\n              admin_id: req.user.userId\n            };\n            await storage.createDeposit(bonusDeposit, referrer.id);\n          }\n        }\n      }\n      \n      res.json({ success: true, user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to adjust user balance\" });\n    }\n  });\n\n  // Admin Login Logs\n  app.get(\"/api/admin/login-logs\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const logs = await storage.getLoginLogs();\n      // Return only the 10 most recent activities with full country names\n      const recentLogs = logs.slice(-10).reverse().map((log: any) => ({\n        ...log,\n        country: LocationService.getCountryName(log.country || 'Unknown')\n      }));\n      res.json(recentLogs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch login logs\" });\n    }\n  });\n\n  app.get(\"/api/admin/login-logs/:userId\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const logs = await storage.getLoginLogsByUserId(req.params.userId);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user login logs\" });\n    }\n  });\n\n  // Admin User Management\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        balance: user.balance,\n        isActive: user.isActive,\n        isAdmin: user.isAdmin,\n        referralCode: user.referralCode,\n        referredBy: user.referredBy,\n        createdAt: user.createdAt,\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Get user investments for admin\n  app.get(\"/api/admin/investments\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { userId } = req.query;\n      if (userId) {\n        const investments = await storage.getUserInvestments(userId as string);\n        res.json(investments);\n      } else {\n        const allInvestments = await storage.getAllInvestments();\n        res.json(allInvestments);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch investments\" });\n    }\n  });\n\n  // Get referral data for specific user (admin)\n  app.get(\"/api/admin/referrals\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { userId } = req.query;\n      if (userId) {\n        const referredUsers = await storage.getReferredUsers(userId as string);\n        const earnings = await storage.getReferralEarnings(userId as string);\n        const totalEarnings = earnings.reduce((sum, e) => sum + e.amount, 0);\n        \n        res.json({\n          totalReferrals: referredUsers.length,\n          totalEarnings,\n          referredUsers: referredUsers.map(user => ({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            createdAt: user.createdAt,\n            balance: user.balance,\n          })),\n          earnings\n        });\n      } else {\n        const allUsers = await storage.getAllUsers();\n        const referralData = allUsers.filter(user => user.referredBy).map(user => ({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          referredBy: user.referredBy,\n          createdAt: user.createdAt,\n          balance: user.balance,\n        }));\n        res.json(referralData);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch referral data\" });\n    }\n  });\n\n  // Logo management routes\n  app.get(\"/api/admin/logo-settings\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      const logoSettings = settings.logo || {};\n      res.json(logoSettings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch logo settings\" });\n    }\n  });\n\n  app.post(\"/api/admin/upload-logo\", authenticateToken, requireAdmin, logoUpload.single('logo'), async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No logo file provided\" });\n      }\n\n      const logoUrl = `/uploads/logos/${req.file.filename}`;\n      const logoName = req.file.originalname;\n\n      // Update system settings with new logo\n      const settings = await storage.getSystemSettings();\n      settings.logo = {\n        logoUrl,\n        logoName,\n        uploadedAt: new Date().toISOString()\n      };\n\n      await storage.updateSystemSettings(settings);\n\n      res.json({\n        message: \"Logo uploaded successfully\",\n        logoUrl,\n        logoName,\n        uploadedAt: settings.logo.uploadedAt\n      });\n    } catch (error) {\n      console.error(\"Logo upload error:\", error);\n      res.status(500).json({ message: \"Failed to upload logo\" });\n    }\n  });\n\n  app.delete(\"/api/admin/delete-logo\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      \n      if (settings.logo?.logoUrl) {\n        // Delete the physical file\n        const logoPath = path.join(process.cwd(), settings.logo.logoUrl);\n        try {\n          if (fs.existsSync(logoPath)) {\n            fs.unlinkSync(logoPath);\n          }\n        } catch (fileError) {\n          console.warn(\"Could not delete logo file:\", fileError);\n        }\n\n        // Remove logo from settings\n        delete settings.logo;\n        await storage.updateSystemSettings(settings);\n      }\n\n      res.json({ message: \"Logo deleted successfully\" });\n    } catch (error) {\n      console.error(\"Logo delete error:\", error);\n      res.status(500).json({ message: \"Failed to delete logo\" });\n    }\n  });\n\n  // Public logo endpoint\n  app.get(\"/api/logo\", async (req, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      const logoSettings = settings.logo || {};\n      res.json(logoSettings);\n    } catch (error) {\n      res.json({}); // Return empty if no logo settings\n    }\n  });\n\n  // Balance adjustment endpoint\n  app.patch(\"/api/admin/users/:id/balance\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { amount, type } = req.body;\n      const userId = req.params.id;\n      \n      const currentUser = await storage.getUser(userId);\n      if (!currentUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const currentBalance = parseFloat(currentUser.balance.toString());\n      let newBalance;\n      \n      if (type === \"credit\") {\n        newBalance = currentBalance + parseFloat(amount);\n      } else if (type === \"debit\") {\n        newBalance = Math.max(0, currentBalance - parseFloat(amount)); // Don't allow negative balances\n      } else {\n        return res.status(400).json({ message: \"Invalid adjustment type\" });\n      }\n      \n      const updatedUser = await storage.updateUserBalance(userId, newBalance);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to adjust balance\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { balance, isActive } = req.body;\n      const updates: any = {};\n      \n      if (balance !== undefined) updates.balance = parseFloat(balance);\n      if (isActive !== undefined) updates.isActive = isActive;\n      \n      const updatedUser = await storage.updateUser(req.params.id, updates);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.deleteUser(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Admin Plan Management\n  app.get(\"/api/admin/plans\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get all plans including inactive ones for admin\n      const { promises: fs } = await import(\"fs\");\n      const path = await import(\"path\");\n      const filePath = path.join(process.cwd(), \"database\", \"plans.json\");\n      const data = await fs.readFile(filePath, \"utf-8\");\n      const plans = JSON.parse(data);\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n\n  app.post(\"/api/admin/plans\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const planData = planSchema.parse(req.body);\n      const plan = await storage.createInvestmentPlan(planData);\n      res.json(plan);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create plan\" });\n    }\n  });\n\n  app.patch(\"/api/admin/plans/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const updates = req.body;\n      const plan = await storage.updateInvestmentPlan(req.params.id, updates);\n      \n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      res.json(plan);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update plan\" });\n    }\n  });\n\n  app.delete(\"/api/admin/plans/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.deleteInvestmentPlan(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete plan\" });\n    }\n  });\n\n  // Get deposit settings\n  app.get(\"/api/admin/deposit-settings\", async (req, res) => {\n    try {\n      const { promises: fs } = await import(\"fs\");\n      const path = await import(\"path\");\n      const filePath = path.join(process.cwd(), \"database\", \"settings.json\");\n      const data = await fs.readFile(filePath, \"utf-8\");\n      const settings = JSON.parse(data);\n      res.json(settings.depositSettings || {});\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deposit settings\" });\n    }\n  });\n\n  // Update deposit settings  \n  app.patch(\"/api/admin/deposit-settings\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { promises: fs } = await import(\"fs\");\n      const path = await import(\"path\");\n      const filePath = path.join(process.cwd(), \"database\", \"settings.json\");\n      const data = await fs.readFile(filePath, \"utf-8\");\n      const settings = JSON.parse(data);\n      \n      settings.depositSettings = {\n        ...settings.depositSettings,\n        ...req.body\n      };\n      \n      await fs.writeFile(filePath, JSON.stringify(settings, null, 2));\n      res.json(settings.depositSettings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update deposit settings\" });\n    }\n  });\n\n  // Admin Deposit Management\n  app.get(\"/api/admin/deposits\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const deposits = await storage.getAllDeposits();\n      res.json(deposits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deposits\" });\n    }\n  });\n\n  app.patch(\"/api/admin/deposits/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { status, confirmations } = req.body;\n      const updates: any = {};\n      \n      if (status) updates.status = status;\n      if (confirmations !== undefined) updates.confirmations = confirmations;\n      \n      const deposit = await storage.updateDeposit(req.params.id, updates);\n      \n      if (!deposit) {\n        return res.status(404).json({ message: \"Deposit not found\" });\n      }\n\n      res.json(deposit);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update deposit\" });\n    }\n  });\n\n  // Admin Withdrawal Management\n  app.get(\"/api/admin/withdrawals\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const withdrawals = await storage.getAllWithdrawals();\n      res.json(withdrawals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch withdrawals\" });\n    }\n  });\n\n  app.patch(\"/api/admin/withdrawals/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { status, admin_notes } = req.body;\n      const updates: any = {};\n      \n      if (status) updates.status = status;\n      if (admin_notes !== undefined) updates.admin_notes = admin_notes;\n      \n      const withdrawal = await storage.updateWithdrawal(req.params.id, updates);\n      \n      if (!withdrawal) {\n        return res.status(404).json({ message: \"Withdrawal not found\" });\n      }\n\n      // If rejected, credit back to user\n      if (status === 'rejected') {\n        const user = await storage.getUser(withdrawal.userId);\n        if (user) {\n          await storage.updateUser(user.id, { \n            balance: user.balance + withdrawal.usd_value + withdrawal.network_fee \n          });\n        }\n      }\n\n      res.json(withdrawal);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update withdrawal\" });\n    }\n  });\n\n  // Admin Message Management\n  app.get(\"/api/admin/messages\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messages = await storage.getAllMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/admin/messages\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messageData = messageSchema.parse(req.body);\n      const message = await storage.createMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create message\" });\n    }\n  });\n\n  app.delete(\"/api/admin/messages/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.deleteMessage(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Message not found\" });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete message\" });\n    }\n  });\n\n  // Admin Support Ticket Management\n  app.get(\"/api/admin/support-tickets\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tickets = await storage.getAllSupportTickets();\n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.patch(\"/api/admin/support-tickets/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { admin_reply, status, priority } = req.body;\n      const updates: any = {};\n      \n      if (admin_reply !== undefined) updates.admin_reply = admin_reply;\n      if (status) updates.status = status;\n      if (priority) updates.priority = priority;\n      updates.updated_at = new Date().toISOString();\n      \n      const ticket = await storage.updateSupportTicket(req.params.id, updates);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Support ticket not found\" });\n      }\n\n      // If admin replied, send notification to user's inbox\n      if (admin_reply && admin_reply.trim()) {\n        await storage.addInboxMessage({\n          id: randomUUID(),\n          userId: ticket.userId,\n          title: `Support Reply: ${ticket.subject}`,\n          content: `Your support ticket has been replied to by our admin team:\\n\\n${admin_reply}`,\n          type: \"support_reply\" as const,\n          ticket_id: ticket.id,\n          is_read: false,\n          created_at: new Date().toISOString()\n        });\n      }\n\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update support ticket\" });\n    }\n  });\n\n  // Delete support ticket (admin only)\n  app.delete(\"/api/admin/support-tickets/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.deleteSupportTicket(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Support ticket not found\" });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete support ticket\" });\n    }\n  });\n\n  // Admin System Settings\n  app.get(\"/api/admin/settings\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch system settings\" });\n    }\n  });\n\n  app.patch(\"/api/admin/settings\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const updates = req.body;\n      const oldSettings = await storage.getSystemSettings();\n      const mergedSettings = await storage.updateSystemSettings(updates);\n      \n      // Log settings change\n      await storage.logAction({\n        action: \"settings_updated\",\n        userId: req.user!.id,\n        details: `System settings updated by ${req.user!.username}`,\n        oldValue: oldSettings,\n        newValue: updates,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json(mergedSettings);\n    } catch (error) {\n      console.error(\"Settings update error:\", error);\n      res.status(500).json({ message: \"Failed to update system settings\" });\n    }\n  });\n\n  // Get audit logs\n  app.get(\"/api/admin/logs\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const logs = await storage.getAuditLogs();\n      res.json(logs.slice(-50)); // Return last 50 logs\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Admin Analytics\n  app.get(\"/api/admin/analytics/deposits\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const deposits = await storage.getAllDeposits();\n      \n      const analytics = {\n        total: deposits.length,\n        confirmed: deposits.filter(d => d.status === \"confirmed\").length,\n        pending: deposits.filter(d => d.status === \"pending\").length,\n        failed: deposits.filter(d => d.status === \"failed\").length,\n        totalValue: deposits\n          .filter(d => d.status === \"confirmed\")\n          .reduce((sum, d) => sum + d.usd_value, 0),\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deposit analytics\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/withdrawals\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const withdrawals = await storage.getAllWithdrawals();\n      \n      const analytics = {\n        total: withdrawals.length,\n        pending: withdrawals.filter(w => w.status === \"pending\").length,\n        approved: withdrawals.filter(w => w.status === \"approved\").length,\n        completed: withdrawals.filter(w => w.status === \"completed\").length,\n        rejected: withdrawals.filter(w => w.status === \"rejected\").length,\n        totalValue: withdrawals\n          .filter(w => w.status === \"completed\")\n          .reduce((sum, w) => sum + w.usd_value, 0),\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch withdrawal analytics\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/investments\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const investments = await storage.getAllInvestments();\n      \n      const analytics = {\n        total: investments.length,\n        active: investments.filter(i => i.is_active).length,\n        totalValue: investments.reduce((sum, i) => sum + i.amount, 0),\n        totalEarned: investments.reduce((sum, i) => sum + i.total_earned, 0),\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch investment analytics\" });\n    }\n  });\n\n  // Admin Referrals\n  app.get(\"/api/admin/referrals\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const referrals = users.filter(user => user.referredBy).map(user => ({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        referredBy: user.referredBy,\n        createdAt: user.createdAt,\n        balance: user.balance,\n      }));\n      res.json(referrals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch referrals\" });\n    }\n  });\n\n  // Admin Security Logs\n  app.get(\"/api/admin/security-logs\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const logs = [\n        {\n          id: \"1\",\n          event: \"Login\",\n          user: \"admin@tradepilot.com\",\n          ip: \"192.168.1.1\",\n          timestamp: new Date().toISOString(),\n          severity: \"info\",\n        },\n        {\n          id: \"2\", \n          event: \"Failed Admin Access\",\n          user: \"unknown\",\n          ip: \"192.168.1.100\",\n          timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(),\n          severity: \"warning\",\n        },\n      ];\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch security logs\" });\n    }\n  });\n\n  // Admin Analytics Combined\n  app.get(\"/api/admin/analytics\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const [users, deposits, withdrawals, investments] = await Promise.all([\n        storage.getAllUsers(),\n        storage.getAllDeposits(),\n        storage.getAllWithdrawals(),\n        storage.getAllInvestments(),\n      ]);\n\n      const analytics = {\n        users: {\n          total: users.length,\n          active: users.filter(u => u.isActive).length,\n          admins: users.filter(u => u.isAdmin).length,\n        },\n        deposits: {\n          total: deposits.length,\n          confirmed: deposits.filter(d => d.status === \"confirmed\").length,\n          totalValue: deposits.filter(d => d.status === \"confirmed\").reduce((sum, d) => sum + d.usd_value, 0),\n        },\n        withdrawals: {\n          total: withdrawals.length,\n          pending: withdrawals.filter(w => w.status === \"pending\").length,\n          totalValue: withdrawals.filter(w => w.status === \"completed\").reduce((sum, w) => sum + w.usd_value, 0),\n        },\n        investments: {\n          total: investments.length,\n          active: investments.filter(i => i.is_active).length,\n          totalValue: investments.reduce((sum, i) => sum + i.amount, 0),\n        },\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Chat and Communication routes\n  // Get chat messages\n  app.get(\"/api/chat/messages\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!ChatService.isChatActive()) {\n        return res.json({ \n          messages: [], \n          status: ChatService.getChatStatus(),\n          isActive: false \n        });\n      }\n      \n      const messages = await ChatService.getChatMessages(50);\n      res.json({\n        messages,\n        status: ChatService.getChatStatus(),\n        isActive: true,\n        typingStatus: ChatService.getTypingStatus()\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  // Send chat message\n  app.post(\"/api/chat/messages\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!ChatService.isChatActive()) {\n        return res.status(400).json({ message: \"Chat is currently closed\" });\n      }\n\n      const { message } = chatMessageSchema.parse(req.body);\n      const user = await storage.getUser(req.user!.id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const chatMessage = await ChatService.addMessage(user.id, user.username, message);\n      res.json(chatMessage);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Get chat status and online count\n  app.get(\"/api/chat/status\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      res.json({\n        status: ChatService.getChatStatus(),\n        isActive: ChatService.isChatActive(),\n        onlineCount: ChatService.getOnlineCount(),\n        typingStatus: ChatService.getTypingStatus()\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get chat status\" });\n    }\n  });\n\n  // Inbox routes\n  // Get user's inbox messages\n  app.get(\"/api/inbox/messages\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messages = await storage.getInboxMessages(req.user!.id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inbox messages\" });\n    }\n  });\n\n  // Mark inbox message as read\n  app.patch(\"/api/inbox/messages/:id/read\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.markInboxMessageAsRead(req.params.id, req.user!.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Message not found or access denied\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark message as read\" });\n    }\n  });\n\n  // Mark all inbox messages as read\n  app.patch(\"/api/inbox/messages/mark-all-read\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.markAllInboxMessagesAsRead(req.user!.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all messages as read\" });\n    }\n  });\n\n  // Delete inbox message\n  app.delete(\"/api/inbox/messages/:id\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const success = await storage.deleteInboxMessage(req.params.id, req.user!.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Message not found or access denied\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete message\" });\n    }\n  });\n\n  // Get unread message count\n  app.get(\"/api/inbox/unread-count\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messages = await storage.getInboxMessages(req.user!.id);\n      const count = messages.filter(msg => !msg.is_read).length;\n      res.json({ count });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get unread count\" });\n    }\n  });\n\n  // Support ticket creation (for contact support feature)\n  app.post(\"/api/support/tickets\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const ticketData = supportTicketSchema.parse(req.body);\n      const ticket = await storage.createSupportTicket(ticketData, req.user!.id);\n      \n      // Get user info for notification\n      const user = await storage.getUser(req.user!.id);\n      if (user) {\n        // Send CallMeBot notification for new support ticket\n        await CallMeBotService.sendSupportTicketNotification(\n          user.username, \n          ticketData.subject, \n          ticketData.priority || 'Medium'\n        );\n      }\n      \n      // Add notification to user's inbox\n      await ChatService.addSupportReply(\n        req.user!.id,\n        ticket.id,\n        ticket.subject,\n        `Thank you for contacting our support team! We've received your message about \"${ticket.subject}\" and our team will review it shortly. \n\nWe typically respond within 24 hours during business days. You'll receive the reply right here in your inbox.\n\nBest regards,\nTradePilot Support Team 🚀`\n      );\n      \n      res.json(ticket);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  // AI Chat Routes\n  app.get(\"/api/ai-chat/messages\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messages = await AIChatService.getConversation(req.user!.id);\n      res.json({ messages });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch AI chat messages\" });\n    }\n  });\n\n  app.post(\"/api/ai-chat/send\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { message } = aiChatMessageSchema.parse(req.body);\n      const messages = await AIChatService.sendMessage(req.user!.id, message);\n      res.json({ messages });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to send AI chat message\" });\n    }\n  });\n\n  app.post(\"/api/ai-chat/initial-greeting\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messages = await AIChatService.sendInitialGreeting(req.user!.id);\n      res.json({ messages });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send initial greeting\" });\n    }\n  });\n\n  app.post(\"/api/ai-chat/clear\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await AIChatService.clearConversation(req.user!.id);\n      res.json({ success: true, message: \"Chat conversation cleared\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to clear chat conversation\" });\n    }\n  });\n\n  // Admin AI Chat Management\n  app.get(\"/api/admin/ai-chat/conversations\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const conversations = await AIChatService.getAllConversations();\n      res.json({ conversations });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch AI chat conversations\" });\n    }\n  });\n\n  app.put(\"/api/admin/ai-chat/personality\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { personality } = aiPersonalityUpdateSchema.parse(req.body);\n      await AIChatService.updatePersonality(personality);\n      res.json({ success: true });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update AI personality\" });\n    }\n  });\n\n  // API Key Management Routes (admin only)\n  app.get(\"/api/admin/ai-chat/api-keys\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const keys = await AIChatService.getAPIKeys();\n      res.json(keys);\n    } catch (error) {\n      console.error('Error getting API keys:', error);\n      res.status(500).json({ message: \"Failed to get API keys\" });\n    }\n  });\n\n  app.post(\"/api/admin/ai-chat/api-keys\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const keyData = apiKeyCreateSchema.parse(req.body);\n      await AIChatService.addAPIKey(keyData.name, keyData.key, keyData.type);\n      res.json({ message: \"API key added successfully\" });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error('Error adding API key:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to add API key\" });\n    }\n  });\n\n  app.put(\"/api/admin/ai-chat/api-keys/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const keyUpdate = apiKeyUpdateSchema.parse({ ...req.body, id: req.params.id });\n      const { type } = req.query;\n      \n      if (!type || (type !== 'reply' && type !== 'summary')) {\n        return res.status(400).json({ message: \"Invalid or missing key type parameter\" });\n      }\n      \n      await AIChatService.updateAPIKey(keyUpdate.id, type as 'reply' | 'summary', {\n        name: keyUpdate.name,\n        status: keyUpdate.status\n      });\n      \n      res.json({ message: \"API key updated successfully\" });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error('Error updating API key:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to update API key\" });\n    }\n  });\n\n  app.delete(\"/api/admin/ai-chat/api-keys/:id\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { type } = req.query;\n      \n      if (!type || (type !== 'reply' && type !== 'summary')) {\n        return res.status(400).json({ message: \"Invalid or missing key type parameter\" });\n      }\n      \n      await AIChatService.deleteAPIKey(req.params.id, type as 'reply' | 'summary');\n      res.json({ message: \"API key deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting API key:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to delete API key\" });\n    }\n  });\n\n  // QR Code Upload Routes\n  app.post(\"/api/admin/upload-qr-code\", authenticateToken, requireAdmin, upload.single('qrCode'), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { cryptocurrency } = req.body;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No QR code file uploaded\" });\n      }\n\n      if (!cryptocurrency) {\n        return res.status(400).json({ message: \"Cryptocurrency parameter is required\" });\n      }\n\n      // Get current settings\n      const settings = await storage.getSystemSettings();\n      const crypto = cryptocurrency.toLowerCase() as 'btc' | 'eth' | 'usdt';\n      \n      // Construct the QR code URL path\n      const qrCodePath = `/uploads/qr-codes/${req.file.filename}`;\n      \n      // Initialize wallets object if it doesn't exist\n      if (!settings.wallets) {\n        settings.wallets = {};\n      }\n      \n      // Update wallet settings with QR code\n      if (!settings.wallets[crypto]) {\n        settings.wallets[crypto] = { address: \"\", qr_code: qrCodePath };\n      } else {\n        settings.wallets[crypto].qr_code = qrCodePath;\n        settings.wallets[crypto].qrCode = qrCodePath; // Support both field names for compatibility\n      }\n      \n      await storage.updateSystemSettings(settings);\n      \n      res.json({ \n        success: true, \n        message: `QR code uploaded successfully for ${cryptocurrency}`,\n        qrCodePath \n      });\n    } catch (error) {\n      console.error('QR code upload error:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to upload QR code\" });\n    }\n  });\n\n  app.post(\"/api/admin/remove-qr-code\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { cryptocurrency } = req.body;\n      \n      if (!cryptocurrency) {\n        return res.status(400).json({ message: \"Cryptocurrency parameter is required\" });\n      }\n\n      // Get current settings\n      const settings = await storage.getSystemSettings();\n      const crypto = cryptocurrency.toLowerCase() as 'btc' | 'eth' | 'usdt';\n      \n      // Initialize wallets object if it doesn't exist\n      if (!settings.wallets) {\n        settings.wallets = {};\n      }\n      \n      // Remove QR code from wallet settings\n      if (settings.wallets[crypto]) {\n        // Try to delete the actual file\n        if (settings.wallets[crypto].qr_code) {\n          try {\n            const { promises: fs } = await import(\"fs\");\n            const path = await import(\"path\");\n            const filePath = path.join(process.cwd(), settings.wallets[crypto].qr_code);\n            await fs.unlink(filePath);\n          } catch (fileError) {\n            console.warn('Could not delete QR code file:', fileError);\n          }\n        }\n        \n        settings.wallets[crypto].qr_code = \"\";\n        settings.wallets[crypto].qrCode = \"\"; // Support both field names\n      }\n      \n      await storage.updateSystemSettings(settings);\n      \n      res.json({ \n        success: true, \n        message: `QR code removed successfully for ${cryptocurrency}` \n      });\n    } catch (error) {\n      console.error('QR code removal error:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to remove QR code\" });\n    }\n  });\n\n  app.post(\"/api/admin/update-wallet-address\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { cryptocurrency, address } = req.body;\n      \n      if (!cryptocurrency || address === undefined) {\n        return res.status(400).json({ message: \"Cryptocurrency and address parameters are required\" });\n      }\n\n      // Get current settings\n      const settings = await storage.getSystemSettings();\n      const crypto = cryptocurrency.toLowerCase() as 'btc' | 'eth' | 'usdt';\n      \n      // Initialize wallets object if it doesn't exist\n      if (!settings.wallets) {\n        settings.wallets = {};\n      }\n      \n      // Update wallet address\n      if (!settings.wallets[crypto]) {\n        settings.wallets[crypto] = { address, qr_code: \"\" };\n      } else {\n        settings.wallets[crypto].address = address;\n      }\n      \n      await storage.updateSystemSettings(settings);\n      \n      res.json({ \n        success: true, \n        message: `Wallet address updated successfully for ${cryptocurrency}`,\n        address\n      });\n    } catch (error) {\n      console.error('Wallet address update error:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to update wallet address\" });\n    }\n  });\n\n  // CallMeBot notification settings routes\n  app.get(\"/api/admin/callmebot-settings\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const settings = await CallMeBotService.getSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error('CallMeBot settings fetch error:', error);\n      res.status(500).json({ message: \"Failed to fetch CallMeBot settings\" });\n    }\n  });\n\n  app.patch(\"/api/admin/callmebot-settings\", authenticateToken, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const settings = req.body;\n      await CallMeBotService.updateSettings(settings);\n      res.json({ success: true, message: \"CallMeBot settings updated successfully\" });\n    } catch (error) {\n      console.error('CallMeBot settings update error:', error);\n      res.status(500).json({ message: \"Failed to update CallMeBot settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":77689},"server/storage.ts":{"content":"import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { randomUUID } from \"crypto\";\n\n// File-based storage paths\nconst DATA_DIR = path.join(process.cwd(), \"database\");\nconst USERS_FILE = path.join(DATA_DIR, \"users.json\");\nconst PENDING_USERS_FILE = path.join(DATA_DIR, \"pending-users.json\");\nconst PLANS_FILE = path.join(DATA_DIR, \"plans.json\");\nconst INVESTMENTS_FILE = path.join(DATA_DIR, \"investments.json\");\nconst SETTINGS_FILE = path.join(DATA_DIR, \"settings.json\");\nconst DEPOSITS_FILE = path.join(DATA_DIR, \"deposits.json\");\nconst WITHDRAWALS_FILE = path.join(DATA_DIR, \"withdrawals.json\");\nconst MESSAGES_FILE = path.join(DATA_DIR, \"messages.json\");\nconst SUPPORT_TICKETS_FILE = path.join(DATA_DIR, \"support-tickets.json\");\nconst AI_CHAT_CONVERSATIONS_FILE = path.join(DATA_DIR, \"ai-chat-conversations.json\");\nconst INBOX_MESSAGES_FILE = path.join(DATA_DIR, \"inbox-messages.json\");\nconst LOGS_FILE = path.join(DATA_DIR, \"logs.json\");\nconst LOGIN_LOGS_FILE = path.join(DATA_DIR, \"login-logs.json\");\n\n// Ensure data directory exists\nif (!fs.existsSync(DATA_DIR)) {\n  fs.mkdirSync(DATA_DIR, { recursive: true });\n}\n\n// Initialize data files with default content\nfunction initializeDataFiles() {\n  // Initialize users file\n  if (!fs.existsSync(USERS_FILE)) {\n    fs.writeFileSync(USERS_FILE, JSON.stringify([], null, 2));\n  }\n\n  // Initialize pending users file\n  if (!fs.existsSync(PENDING_USERS_FILE)) {\n    fs.writeFileSync(PENDING_USERS_FILE, JSON.stringify([], null, 2));\n  }\n\n  // Initialize investment plans with AI Trading Plans\n  if (!fs.existsSync(PLANS_FILE)) {\n    const defaultPlans = [\n      {\n        id: \"1\",\n        name: \"Starter AI Bot\",\n        description: \"Perfect for beginners looking to start automated crypto trading with AI assistance.\",\n        profit_percentage: 12.5,\n        duration_days: 30,\n        min_deposit: 50,\n        max_deposit: 1000,\n        features: [\n          \"Basic AI Trading Algorithms\",\n          \"24/7 Market Monitoring\", \n          \"Risk Management Tools\",\n          \"Daily Performance Reports\",\n          \"Email Notifications\"\n        ],\n        active: true,\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"2\", \n        name: \"Advanced AI Pro\",\n        description: \"Advanced AI trading strategies with higher returns and sophisticated market analysis.\",\n        profit_percentage: 18.7,\n        duration_days: 60,\n        min_deposit: 500,\n        max_deposit: 10000,\n        features: [\n          \"Advanced Neural Networks\",\n          \"Multi-Exchange Arbitrage\", \n          \"Sentiment Analysis Integration\",\n          \"Custom Trading Strategies\",\n          \"Priority Support\",\n          \"Real-time Portfolio Analytics\"\n        ],\n        active: true,\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"3\",\n        name: \"Elite AI Master\", \n        description: \"Our most sophisticated AI trading system for serious investors seeking maximum returns.\",\n        profit_percentage: 24.3,\n        duration_days: 90,\n        min_deposit: 2000,\n        max_deposit: 50000,\n        features: [\n          \"Deep Learning Algorithms\",\n          \"Cross-Market Analysis\",\n          \"Institutional-Grade Security\", \n          \"Dedicated Account Manager\",\n          \"API Access for Custom Integration\",\n          \"Advanced Risk Hedging\",\n          \"Quarterly Strategy Reviews\"\n        ],\n        active: true,\n        created_at: new Date().toISOString()\n      }\n    ];\n    fs.writeFileSync(PLANS_FILE, JSON.stringify(defaultPlans, null, 2));\n  }\n\n  // Initialize other files\n  if (!fs.existsSync(INVESTMENTS_FILE)) {\n    fs.writeFileSync(INVESTMENTS_FILE, JSON.stringify([], null, 2));\n  }\n\n  if (!fs.existsSync(LOGIN_LOGS_FILE)) {\n    fs.writeFileSync(LOGIN_LOGS_FILE, JSON.stringify([], null, 2));\n  }\n  \n  if (!fs.existsSync(DEPOSITS_FILE)) {\n    fs.writeFileSync(DEPOSITS_FILE, JSON.stringify([], null, 2));\n  }\n  \n  if (!fs.existsSync(WITHDRAWALS_FILE)) {\n    fs.writeFileSync(WITHDRAWALS_FILE, JSON.stringify([], null, 2));\n  }\n  \n  if (!fs.existsSync(MESSAGES_FILE)) {\n    fs.writeFileSync(MESSAGES_FILE, JSON.stringify([], null, 2));\n  }\n  \n  if (!fs.existsSync(SUPPORT_TICKETS_FILE)) {\n    fs.writeFileSync(SUPPORT_TICKETS_FILE, JSON.stringify([], null, 2));\n  }\n  \n  if (!fs.existsSync(INBOX_MESSAGES_FILE)) {\n    fs.writeFileSync(INBOX_MESSAGES_FILE, JSON.stringify([], null, 2));\n  }\n  \n  if (!fs.existsSync(LOGS_FILE)) {\n    fs.writeFileSync(LOGS_FILE, JSON.stringify([], null, 2));\n  }\n\n  // Initialize settings file\n  if (!fs.existsSync(SETTINGS_FILE)) {\n    const defaultSettings = {\n      wallets: {\n        btc: {\n          address: \"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\",\n          qrCode: \"\",\n          active: true\n        },\n        eth: {\n          address: \"0x742d35Cc6677C4C8B3e29Ddb7E2Bd3b8B8b4D8b6\",\n          qrCode: \"\",\n          active: true\n        },\n        usdt: {\n          address: \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\",\n          qrCode: \"\",\n          active: true\n        }\n      },\n      withdrawal_limits: {\n        min_withdrawal: 10,\n        max_daily_withdrawal: 10000,\n        processing_time_hours: 24\n      },\n      system: {\n        maintenance_mode: false,\n        global_profit_multiplier: 1.0,\n        referral_bonus_percentage: 5,\n        arbitrage_refresh_rate: 30\n      },\n      ai_chat: {\n        enabled: true,\n        personality: \"Professional crypto trading assistant\"\n      },\n      recaptcha: {\n        enabled: false,\n        site_key: \"\",\n        secret_key: \"\"\n      },\n      depositSettings: {\n        BTC: {\n          minDeposit: \"0.001\",\n          confirmations: 3\n        },\n        ETH: {\n          minDeposit: \"0.01\", \n          confirmations: 12\n        },\n        USDT: {\n          minDeposit: \"10\",\n          confirmations: 6\n        }\n      },\n      welcome_message: {\n        title: \"🎉 Welcome to Your Investment Success Journey!\",\n        content: `Congratulations on taking the first step toward financial freedom! We're thrilled to welcome you to TradePilot, where advanced technology meets profitable investing.\n\n**Your Journey Begins Now:**\n• Advanced AI technology analyzing thousands of market opportunities daily\n• Consistent profit generation through automated arbitrage strategies\n• Real-time portfolio tracking and performance analytics\n• Bank-level security protecting your investments 24/7\n• Instant access to your earnings with flexible withdrawal options\n• Professional support team dedicated to your success\n\n**Start Earning Today:**\n1. Explore our proven investment plans designed for maximum returns\n2. Choose your preferred investment amount and duration\n3. Watch your portfolio grow with our automated profit generation\n4. Withdraw your earnings anytime with complete flexibility\n\nYou've made a smart decision joining thousands of successful investors who trust TradePilot for their financial growth. Your investment dashboard is ready, and our AI systems are already identifying profitable opportunities for you.\n\n**Ready to transform your financial future?**\nYour personalized dashboard awaits with exclusive investment opportunities.\n\nTo your success,\nThe TradePilot Team 🚀`\n      },\n      email_welcome: {\n        subject: \"🚀 Welcome to TradePilot - Your AI Investment Dashboard is Ready!\",\n        title: \"Welcome to Your Success Story\",\n        subtitle: \"Your AI-powered investment journey starts now\",\n        benefits: [\n          {\n            \"title\": \"AI-Powered Returns\",\n            \"description\": \"Advanced algorithms execute profitable trades automatically, maximizing your investment potential\"\n          },\n          {\n            \"title\": \"Daily Profit Generation\",\n            \"description\": \"Watch your balance grow with consistent returns generated by our sophisticated trading systems\"\n          },\n          {\n            \"title\": \"Real-Time Intelligence\",\n            \"description\": \"Access live market analytics and performance tracking to monitor your investment growth\"\n          },\n          {\n            \"title\": \"Secure & Transparent\",\n            \"description\": \"Bank-grade security ensures your investments are protected with complete transparency\"\n          },\n          {\n            \"title\": \"Instant Withdrawals\",\n            \"description\": \"Access your profits anytime with flexible withdrawal options and instant processing\"\n          }\n        ],\n        steps: [\n          \"Access your personalized investment dashboard\",\n          \"Explore our high-performance investment plans\",\n          \"Make your first investment and activate AI trading\",\n          \"Monitor your daily profits and withdraw anytime\"\n        ],\n        cta_text: \"🎯 Access Your Investment Dashboard\",\n        footer_message: \"Welcome to the future of intelligent investing. Your success is our mission.\"\n      },\n      callmebot: {\n        enabled: false,\n        admin_whatsapp_number: \"\",\n        api_key: \"\",\n        notifications: {\n          new_registration: true,\n          user_login: false,\n          support_ticket: true,\n          withdrawal_request: true,\n          system_activity: true\n        }\n      }\n    };\n    fs.writeFileSync(SETTINGS_FILE, JSON.stringify(defaultSettings, null, 2));\n  }\n}\n\n// Interface for storage operations\nexport interface IStorage {\n  getUser(id: string): Promise<any>;\n  getUserByUsername(username: string): Promise<any>;\n  getUserByEmail(email: string): Promise<any>;\n  createUser(userData: any): Promise<any>;\n  updateUser(id: string, updates: any): Promise<any>;\n  deleteUser(id: string): Promise<boolean>;\n  getAllUsers(): Promise<any[]>;\n  \n  getInvestmentPlans(): Promise<any[]>;\n  getInvestmentPlan(id: string): Promise<any>;\n  createInvestmentPlan(plan: any): Promise<any>;\n  updateInvestmentPlan(id: string, updates: any): Promise<any>;\n  deleteInvestmentPlan(id: string): Promise<boolean>;\n  updateInvestmentPlans(plans: any[]): Promise<void>;\n  \n  getUserInvestments(userId: string): Promise<any[]>;\n  getAllInvestments(): Promise<any[]>;\n  createUserInvestment(investment: any, userId: string): Promise<any>;\n  updateUserInvestment(id: string, updates: any): Promise<any>;\n  \n  getSystemSettings(): Promise<any>;\n  updateSystemSettings(settings: any): Promise<void>;\n  \n  getDeposits(userId?: string): Promise<any[]>;\n  getUserDeposits(userId: string): Promise<any[]>;\n  getAllDeposits(): Promise<any[]>;\n  createDeposit(deposit: any, userId: string): Promise<any>;\n  updateDeposit(id: string, updates: any): Promise<any>;\n  \n  getWithdrawals(userId?: string): Promise<any[]>;\n  getUserWithdrawals(userId: string): Promise<any[]>;\n  getAllWithdrawals(): Promise<any[]>;\n  createWithdrawal(withdrawal: any, userId: string): Promise<any>;\n  updateWithdrawal(id: string, updates: any): Promise<any>;\n  approveWithdrawal(id: string, adminNotes?: string): Promise<any>;\n  \n  getMessages(userId?: string): Promise<any[]>;\n  getUserMessages(userId: string): Promise<any[]>;\n  getAllMessages(): Promise<any[]>;\n  createMessage(message: any): Promise<any>;\n  markMessageAsRead(id: string): Promise<void>;\n  markAllMessagesAsRead(userId: string): Promise<void>;\n  deleteMessage(id: string): Promise<boolean>;\n  \n  getSupportTickets(userId?: string): Promise<any[]>;\n  getUserSupportTickets(userId: string): Promise<any[]>;\n  getAllSupportTickets(): Promise<any[]>;\n  createSupportTicket(ticket: any, userId: string): Promise<any>;\n  updateSupportTicket(id: string, updates: any): Promise<any>;\n  deleteSupportTicket(id: string): Promise<boolean>;\n  \n  // Inbox messages\n  getInboxMessages(userId: string): Promise<any[]>;\n  addInboxMessage(message: any): Promise<any>;\n  markInboxMessageAsRead(id: string, userId: string): Promise<boolean>;\n  markAllInboxMessagesAsRead(userId: string): Promise<void>;\n  deleteInboxMessage(id: string, userId: string): Promise<boolean>;\n  \n  // Pending user methods\n  getPendingUserByEmail(email: string): Promise<any>;\n  createPendingUser(userData: any): Promise<any>;\n  updatePendingUserCode(email: string, verificationCode: string): Promise<any>;\n  verifyPendingUser(email: string, verificationCode: string): Promise<any>;\n  getUserByReferralCode(referralCode: string): Promise<any>;\n  createLoginLog(log: any): Promise<any>;\n  \n  // Referral methods\n  getReferralEarnings(userId: string): Promise<any[]>;\n  getReferredUsers(userId: string): Promise<any[]>;\n  \n  // Admin utilities\n  adjustUserBalance(userId: string, amount: number, type: string): Promise<any>;\n  updateUserBalance(userId: string, newBalance: number): Promise<any>;\n  \n  // Audit logs\n  logAction(action: any): Promise<void>;\n  getAuditLogs(): Promise<any[]>;\n}\n\nexport class FileStorage implements IStorage {\n  constructor() {\n    initializeDataFiles();\n  }\n\n  private readFile<T>(filePath: string): T[] {\n    try {\n      const data = fs.readFileSync(filePath, \"utf-8\");\n      return JSON.parse(data) as T[];\n    } catch (error) {\n      console.error(`Error reading ${filePath}:`, error);\n      return [];\n    }\n  }\n\n  private writeFile<T>(filePath: string, data: T[]): void {\n    try {\n      fs.writeFileSync(filePath, JSON.stringify(data, null, 2));\n    } catch (error) {\n      console.error(`Error writing ${filePath}:`, error);\n      throw error;\n    }\n  }\n\n  async getUser(id: string): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    return users.find((user: any) => user.id === id);\n  }\n\n  async getUserByUsername(username: string): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    return users.find((user: any) => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    return users.find((user: any) => user.email === email);\n  }\n\n  async createUser(userData: any): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    users.push(userData);\n    this.writeFile(USERS_FILE, users);\n    return userData;\n  }\n\n  async updateUser(id: string, updates: any): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    const userIndex = users.findIndex((user: any) => user.id === id);\n    if (userIndex === -1) return undefined;\n    \n    const user = users[userIndex] as any;\n    users[userIndex] = { ...user, ...updates };\n    this.writeFile(USERS_FILE, users);\n    return users[userIndex];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const users = this.readFile(USERS_FILE);\n    const user = users.find((u: any) => u.id === id);\n    \n    if (!user) {\n      return false; // User not found\n    }\n    \n    try {\n      // 1. Remove user from main users file\n      const filteredUsers = users.filter((user: any) => user.id !== id);\n      this.writeFile(USERS_FILE, filteredUsers);\n      \n      // 2. Remove all user investments\n      const investments = this.readFile(INVESTMENTS_FILE);\n      const filteredInvestments = investments.filter((inv: any) => inv.user_id !== id);\n      this.writeFile(INVESTMENTS_FILE, filteredInvestments);\n      \n      // 3. Remove all user deposits\n      const deposits = this.readFile(DEPOSITS_FILE);\n      const filteredDeposits = deposits.filter((dep: any) => dep.userId !== id);\n      this.writeFile(DEPOSITS_FILE, filteredDeposits);\n      \n      // 4. Remove all user withdrawals\n      const withdrawals = this.readFile(WITHDRAWALS_FILE);\n      const filteredWithdrawals = withdrawals.filter((wit: any) => wit.userId !== id);\n      this.writeFile(WITHDRAWALS_FILE, filteredWithdrawals);\n      \n      // 5. Remove all user messages\n      const messages = this.readFile(MESSAGES_FILE);\n      const filteredMessages = messages.filter((msg: any) => msg.userId !== id);\n      this.writeFile(MESSAGES_FILE, filteredMessages);\n      \n      // 6. Remove all user support tickets\n      const tickets = this.readFile(SUPPORT_TICKETS_FILE);\n      const filteredTickets = tickets.filter((ticket: any) => ticket.userId !== id);\n      this.writeFile(SUPPORT_TICKETS_FILE, filteredTickets);\n      \n      // 7. Remove all user inbox messages\n      const inboxMessages = this.readFile(INBOX_MESSAGES_FILE);\n      const filteredInboxMessages = inboxMessages.filter((msg: any) => msg.userId !== id);\n      this.writeFile(INBOX_MESSAGES_FILE, filteredInboxMessages);\n      \n      // 8. Remove user from pending users (if exists)\n      const pendingUsers = this.readFile(PENDING_USERS_FILE);\n      const filteredPendingUsers = pendingUsers.filter((pending: any) => \n        pending.email !== (user as any).email && pending.username !== (user as any).username\n      );\n      this.writeFile(PENDING_USERS_FILE, filteredPendingUsers);\n      \n      // 9. Remove user login logs\n      const loginLogs = this.readFile(LOGIN_LOGS_FILE);\n      const filteredLoginLogs = loginLogs.filter((log: any) => log.userId !== id);\n      this.writeFile(LOGIN_LOGS_FILE, filteredLoginLogs);\n      \n      console.log(`User ${(user as any).username} (${(user as any).email}) and all associated data permanently deleted`);\n      return true;\n      \n    } catch (error) {\n      console.error('Error during comprehensive user deletion:', error);\n      return false;\n    }\n  }\n\n  async getAllUsers(): Promise<any[]> {\n    return this.readFile(USERS_FILE);\n  }\n\n  async getInvestmentPlans(): Promise<any[]> {\n    return this.readFile(PLANS_FILE);\n  }\n\n  async getInvestmentPlan(id: string): Promise<any> {\n    const plans = this.readFile(PLANS_FILE);\n    return plans.find((plan: any) => plan.id === id);\n  }\n\n  async createInvestmentPlan(plan: any): Promise<any> {\n    const plans = this.readFile(PLANS_FILE);\n    plans.push(plan);\n    this.writeFile(PLANS_FILE, plans);\n    return plan;\n  }\n\n  async updateInvestmentPlan(id: string, updates: any): Promise<any> {\n    const plans = this.readFile(PLANS_FILE);\n    const planIndex = plans.findIndex((plan: any) => plan.id === id);\n    if (planIndex === -1) return undefined;\n    \n    const plan = plans[planIndex] as any;\n    plans[planIndex] = { ...plan, ...updates };\n    this.writeFile(PLANS_FILE, plans);\n    return plans[planIndex];\n  }\n\n  async deleteInvestmentPlan(id: string): Promise<boolean> {\n    const plans = this.readFile(PLANS_FILE);\n    const filteredPlans = plans.filter((plan: any) => plan.id !== id);\n    \n    if (filteredPlans.length < plans.length) {\n      this.writeFile(PLANS_FILE, filteredPlans);\n      return true;\n    }\n    return false;\n  }\n\n  async updateInvestmentPlans(plans: any[]): Promise<void> {\n    this.writeFile(PLANS_FILE, plans);\n  }\n\n  async getUserInvestments(userId: string): Promise<any[]> {\n    const investments = this.readFile(INVESTMENTS_FILE);\n    return investments.filter((investment: any) => investment.userId === userId);\n  }\n\n  async getAllInvestments(): Promise<any[]> {\n    return this.readFile(INVESTMENTS_FILE);\n  }\n\n  async createUserInvestment(investment: any, userId: string): Promise<any> {\n    const investments = this.readFile(INVESTMENTS_FILE);\n    const fullInvestment = { ...investment, userId };\n    investments.push(fullInvestment);\n    this.writeFile(INVESTMENTS_FILE, investments);\n    return fullInvestment;\n  }\n\n  async updateUserInvestment(id: string, updates: any): Promise<any> {\n    const investments = this.readFile(INVESTMENTS_FILE);\n    const investmentIndex = investments.findIndex((investment: any) => investment.id === id);\n    if (investmentIndex === -1) return undefined;\n    \n    const currentInvestment = investments[investmentIndex] as any;\n    investments[investmentIndex] = { ...currentInvestment, ...updates };\n    this.writeFile(INVESTMENTS_FILE, investments);\n    return investments[investmentIndex];\n  }\n\n  async getSystemSettings(): Promise<any> {\n    try {\n      const data = fs.readFileSync(SETTINGS_FILE, \"utf-8\");\n      return JSON.parse(data);\n    } catch (error) {\n      console.error(\"Error reading settings:\", error);\n      return {};\n    }\n  }\n\n  async updateSystemSettings(updates: any): Promise<any> {\n    try {\n      // Get existing settings\n      const existingSettings = await this.getSystemSettings();\n      \n      // Deep merge the updates with existing settings\n      const mergedSettings = this.deepMerge(existingSettings, updates);\n      \n      // Write the merged settings back to the file with atomic operation\n      const tempFile = SETTINGS_FILE + '.tmp';\n      fs.writeFileSync(tempFile, JSON.stringify(mergedSettings, null, 2));\n      fs.renameSync(tempFile, SETTINGS_FILE);\n      \n      console.log('Settings successfully updated and persisted');\n      return mergedSettings;\n    } catch (error) {\n      console.error(\"Error updating settings:\", error);\n      throw error;\n    }\n  }\n\n  // Helper function to deep merge objects\n  private deepMerge(target: any, source: any): any {\n    if (source === null || source === undefined) return target;\n    if (target === null || target === undefined) return source;\n    \n    const result = { ...target };\n    \n    Object.keys(source).forEach(key => {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = this.deepMerge(target[key] || {}, source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    \n    return result;\n  }\n\n  async getDeposits(userId?: string): Promise<any[]> {\n    const deposits = this.readFile(DEPOSITS_FILE);\n    return userId ? deposits.filter((deposit: any) => deposit.userId === userId) : deposits;\n  }\n\n  async getUserDeposits(userId: string): Promise<any[]> {\n    const deposits = this.readFile(DEPOSITS_FILE);\n    return deposits.filter((deposit: any) => deposit.userId === userId);\n  }\n\n  async getAllDeposits(): Promise<any[]> {\n    return this.readFile(DEPOSITS_FILE);\n  }\n\n  async createDeposit(deposit: any, userId: string): Promise<any> {\n    const deposits = this.readFile(DEPOSITS_FILE);\n    const fullDeposit = { ...deposit, userId };\n    deposits.push(fullDeposit);\n    this.writeFile(DEPOSITS_FILE, deposits);\n    return fullDeposit;\n  }\n\n  async updateDeposit(id: string, updates: any): Promise<any> {\n    const deposits = this.readFile(DEPOSITS_FILE);\n    const depositIndex = deposits.findIndex((deposit: any) => deposit.id === id);\n    if (depositIndex === -1) return undefined;\n    \n    const deposit = deposits[depositIndex] as any;\n    deposits[depositIndex] = { ...deposit, ...updates };\n    this.writeFile(DEPOSITS_FILE, deposits);\n    return deposits[depositIndex];\n  }\n\n  async getWithdrawals(userId?: string): Promise<any[]> {\n    const withdrawals = this.readFile(WITHDRAWALS_FILE);\n    return userId ? withdrawals.filter((withdrawal: any) => withdrawal.userId === userId) : withdrawals;\n  }\n\n  async getUserWithdrawals(userId: string): Promise<any[]> {\n    const withdrawals = this.readFile(WITHDRAWALS_FILE);\n    return withdrawals.filter((withdrawal: any) => withdrawal.userId === userId);\n  }\n\n  async getAllWithdrawals(): Promise<any[]> {\n    return this.readFile(WITHDRAWALS_FILE);\n  }\n\n  async createWithdrawal(withdrawal: any, userId: string): Promise<any> {\n    const withdrawals = this.readFile(WITHDRAWALS_FILE);\n    const fullWithdrawal = { \n      ...withdrawal, \n      userId,\n      id: withdrawal.id || `withdrawal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      status: withdrawal.status || 'pending',\n      created_at: withdrawal.created_at || new Date().toISOString(),\n      usd_value: withdrawal.usd_value || withdrawal.amount // Ensure usd_value is set for consistency\n    };\n    withdrawals.push(fullWithdrawal);\n    this.writeFile(WITHDRAWALS_FILE, withdrawals);\n    return fullWithdrawal;\n  }\n\n  async updateWithdrawal(id: string, updates: any): Promise<any> {\n    const withdrawals = this.readFile(WITHDRAWALS_FILE);\n    const withdrawalIndex = withdrawals.findIndex((withdrawal: any) => withdrawal.id === id);\n    if (withdrawalIndex === -1) return undefined;\n    \n    const currentWithdrawal = withdrawals[withdrawalIndex] as any;\n    withdrawals[withdrawalIndex] = { ...currentWithdrawal, ...updates };\n    this.writeFile(WITHDRAWALS_FILE, withdrawals);\n    return withdrawals[withdrawalIndex];\n  }\n\n  async approveWithdrawal(id: string, adminNotes?: string): Promise<any> {\n    const withdrawals = this.readFile(WITHDRAWALS_FILE);\n    const withdrawalIndex = withdrawals.findIndex((withdrawal: any) => withdrawal.id === id);\n    if (withdrawalIndex === -1) return undefined;\n    \n    const updates = {\n      status: 'approved',\n      admin_notes: adminNotes || '',\n      approved_at: new Date().toISOString()\n    };\n    \n    const currentWithdrawal2 = withdrawals[withdrawalIndex] as any;\n    withdrawals[withdrawalIndex] = { ...currentWithdrawal2, ...updates };\n    this.writeFile(WITHDRAWALS_FILE, withdrawals);\n    return withdrawals[withdrawalIndex];\n  }\n\n  async getMessages(userId?: string): Promise<any[]> {\n    const messages = this.readFile(MESSAGES_FILE);\n    return userId ? messages.filter((message: any) => message.userId === userId || !message.userId) : messages;\n  }\n\n  async getUserMessages(userId: string): Promise<any[]> {\n    const messages = this.readFile(MESSAGES_FILE);\n    return messages.filter((message: any) => message.userId === userId || !message.userId);\n  }\n\n  async getAllMessages(): Promise<any[]> {\n    return this.readFile(MESSAGES_FILE);\n  }\n\n  async createMessage(message: any): Promise<any> {\n    const messages = this.readFile(MESSAGES_FILE);\n    messages.push(message);\n    this.writeFile(MESSAGES_FILE, messages);\n    return message;\n  }\n\n  async markMessageAsRead(id: string): Promise<void> {\n    const messages = this.readFile(MESSAGES_FILE);\n    const messageIndex = messages.findIndex((message: any) => message.id === id);\n    if (messageIndex !== -1) {\n      const messageToUpdate = messages[messageIndex] as any;\n      messageToUpdate.is_read = true;\n      messages[messageIndex] = messageToUpdate;\n      this.writeFile(MESSAGES_FILE, messages);\n    }\n  }\n\n  async markAllMessagesAsRead(userId: string): Promise<void> {\n    const messages = this.readFile(MESSAGES_FILE);\n    let updated = false;\n    messages.forEach((message: any) => {\n      if (message && message.userId === userId && !message.is_read) {\n        message.is_read = true;\n        updated = true;\n      }\n    });\n    if (updated) {\n      this.writeFile(MESSAGES_FILE, messages);\n    }\n  }\n\n  async deleteMessage(id: string): Promise<boolean> {\n    const messages = this.readFile(MESSAGES_FILE);\n    const initialLength = messages.length;\n    const filteredMessages = messages.filter((message: any) => message.id !== id);\n    \n    if (filteredMessages.length < initialLength) {\n      this.writeFile(MESSAGES_FILE, filteredMessages);\n      return true;\n    }\n    return false;\n  }\n\n  async getSupportTickets(userId?: string): Promise<any[]> {\n    const tickets = this.readFile(SUPPORT_TICKETS_FILE);\n    return userId ? tickets.filter((ticket: any) => ticket.userId === userId) : tickets;\n  }\n\n  async getUserSupportTickets(userId: string): Promise<any[]> {\n    const tickets = this.readFile(SUPPORT_TICKETS_FILE);\n    return tickets.filter((ticket: any) => ticket.userId === userId);\n  }\n\n  async getAllSupportTickets(): Promise<any[]> {\n    return this.readFile(SUPPORT_TICKETS_FILE);\n  }\n\n  async createSupportTicket(ticket: any, userId: string): Promise<any> {\n    const tickets = this.readFile(SUPPORT_TICKETS_FILE);\n    const fullTicket = { \n      ...ticket, \n      id: randomUUID(),\n      userId,\n      status: \"open\",\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    tickets.push(fullTicket);\n    this.writeFile(SUPPORT_TICKETS_FILE, tickets);\n    return fullTicket;\n  }\n\n  async updateSupportTicket(id: string, updates: any): Promise<any> {\n    const tickets = this.readFile(SUPPORT_TICKETS_FILE);\n    const ticketIndex = tickets.findIndex((ticket: any) => ticket.id === id);\n    if (ticketIndex === -1) return undefined;\n    \n    const ticket = tickets[ticketIndex] as any;\n    tickets[ticketIndex] = { ...ticket, ...updates };\n    this.writeFile(SUPPORT_TICKETS_FILE, tickets);\n    return tickets[ticketIndex];\n  }\n\n  async deleteSupportTicket(id: string): Promise<boolean> {\n    const tickets = this.readFile(SUPPORT_TICKETS_FILE);\n    const initialLength = tickets.length;\n    const filteredTickets = tickets.filter((ticket: any) => ticket.id !== id);\n    \n    if (filteredTickets.length < initialLength) {\n      this.writeFile(SUPPORT_TICKETS_FILE, filteredTickets);\n      return true;\n    }\n    return false;\n  }\n\n  // AI Chat Conversation methods\n  async getAIChatConversations(): Promise<any[]> {\n    return this.readFile(AI_CHAT_CONVERSATIONS_FILE);\n  }\n\n  async saveAIChatConversations(conversations: any[]): Promise<void> {\n    this.writeFile(AI_CHAT_CONVERSATIONS_FILE, conversations);\n  }\n\n  // Inbox message methods\n  async getInboxMessages(userId: string): Promise<any[]> {\n    const messages = this.readFile(INBOX_MESSAGES_FILE);\n    return messages.filter((message: any) => message.userId === userId);\n  }\n\n  async addInboxMessage(message: any): Promise<any> {\n    const messages = this.readFile(INBOX_MESSAGES_FILE);\n    messages.push(message);\n    this.writeFile(INBOX_MESSAGES_FILE, messages);\n    return message;\n  }\n\n  async markInboxMessageAsRead(id: string, userId: string): Promise<boolean> {\n    const messages = this.readFile(INBOX_MESSAGES_FILE);\n    const messageIndex = messages.findIndex((message: any) => message.id === id && message.userId === userId);\n    if (messageIndex !== -1) {\n      const message = messages[messageIndex] as any;\n      message.is_read = true;\n      messages[messageIndex] = message;\n      this.writeFile(INBOX_MESSAGES_FILE, messages);\n      return true;\n    }\n    return false;\n  }\n\n  async markAllInboxMessagesAsRead(userId: string): Promise<void> {\n    const messages = this.readFile(INBOX_MESSAGES_FILE);\n    let updated = false;\n    messages.forEach((message: any, index: number) => {\n      if (message && message.userId === userId && !message.is_read) {\n        message.is_read = true;\n        messages[index] = message;\n        updated = true;\n      }\n    });\n    if (updated) {\n      this.writeFile(INBOX_MESSAGES_FILE, messages);\n    }\n  }\n\n  async deleteInboxMessage(id: string, userId: string): Promise<boolean> {\n    const messages = this.readFile(INBOX_MESSAGES_FILE);\n    const initialLength = messages.length;\n    const filteredMessages = messages.filter((message: any) => !(message.id === id && message.userId === userId));\n    \n    if (filteredMessages.length < initialLength) {\n      this.writeFile(INBOX_MESSAGES_FILE, filteredMessages);\n      return true;\n    }\n    return false;\n  }\n\n  // Pending user methods\n  async getPendingUserByEmail(email: string): Promise<any> {\n    const pendingUsers = this.readFile(PENDING_USERS_FILE);\n    return pendingUsers.find((user: any) => user.email === email);\n  }\n\n  async createPendingUser(userData: any): Promise<any> {\n    const pendingUsers = this.readFile(PENDING_USERS_FILE);\n    \n    // Create pending user with ID (password should already be hashed by auth service)\n    const pendingUser = {\n      id: randomUUID(),\n      username: userData.username,\n      email: userData.email,\n      password: userData.password, // Already hashed by auth service\n      referralCode: userData.referralCode || null,\n      createdAt: new Date().toISOString()\n    };\n    \n    // Remove any existing pending user with same email\n    const filteredUsers = pendingUsers.filter((user: any) => user.email !== userData.email);\n    filteredUsers.push(pendingUser);\n    this.writeFile(PENDING_USERS_FILE, filteredUsers);\n    return pendingUser;\n  }\n\n  async updatePendingUserCode(email: string, verificationCode: string): Promise<any> {\n    const pendingUsers = this.readFile(PENDING_USERS_FILE);\n    const userIndex = pendingUsers.findIndex((user: any) => user.email === email);\n    if (userIndex === -1) return null;\n    \n    const userToUpdate = pendingUsers[userIndex] as any;\n    userToUpdate.verificationCode = verificationCode;\n    userToUpdate.verificationCodeExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(); // 24 hours\n    pendingUsers[userIndex] = userToUpdate;\n    this.writeFile(PENDING_USERS_FILE, pendingUsers);\n    return pendingUsers[userIndex];\n  }\n\n  async verifyPendingUser(email: string, verificationCode: string): Promise<any> {\n    const pendingUsers = this.readFile(PENDING_USERS_FILE);\n    const userIndex = pendingUsers.findIndex((user: any) => \n      user.email === email && user.verificationCode === verificationCode\n    );\n    \n    if (userIndex === -1) return null;\n    \n    const pendingUser = pendingUsers[userIndex] as any;\n    \n    // Check if verification code is expired\n    if (new Date() > new Date(pendingUser.verificationCodeExpires)) {\n      return null;\n    }\n    \n    // Move user to verified users\n    const users = this.readFile(USERS_FILE);\n    const verifiedUser = {\n      id: pendingUser.id,\n      username: pendingUser.username,\n      email: pendingUser.email,\n      password: pendingUser.password,\n      balance: 0,\n      referralCode: this.generateReferralCode(),\n      referredBy: pendingUser.referralCode || null,\n      isAdmin: false,\n      isActive: true,\n      isVerified: true,\n      createdAt: pendingUser.createdAt\n    };\n    \n    users.push(verifiedUser);\n    this.writeFile(USERS_FILE, users);\n    \n    // Remove from pending users\n    const updatedPendingUsers = pendingUsers.filter((user: any) => user.email !== email);\n    this.writeFile(PENDING_USERS_FILE, updatedPendingUsers);\n    \n    return verifiedUser;\n  }\n\n  async getUserByReferralCode(referralCode: string): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    return users.find((user: any) => user.referralCode === referralCode);\n  }\n\n  // Removed duplicate createLoginLog function - using the one below with proper typing\n\n  private generateReferralCode(): string {\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  // Referral methods\n  async getReferralEarnings(userId: string): Promise<any[]> {\n    // For now, return empty array as we'll implement earnings tracking later\n    return [];\n  }\n\n  async getReferredUsers(userId: string): Promise<any[]> {\n    const users = this.readFile(USERS_FILE);\n    const user = users.find((u: any) => u.id === userId) as any;\n    if (!user || !user.referralCode) return [];\n    \n    return users.filter((u: any) => u && u.referredBy === user.referralCode);\n  }\n\n  // Admin utility methods\n  async adjustUserBalance(userId: string, amount: number, type: string): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    const userIndex = users.findIndex((user: any) => user.id === userId);\n    if (userIndex === -1) return undefined;\n    \n    const user = users[userIndex] as any;\n    const currentBalance = user.balance || 0;\n    let newBalance: number;\n    \n    if (type === 'credit') {\n      newBalance = currentBalance + amount;\n    } else {\n      newBalance = Math.max(0, currentBalance - amount);\n    }\n    \n    user.balance = newBalance;\n    users[userIndex] = user;\n    this.writeFile(USERS_FILE, users);\n    return users[userIndex];\n  }\n\n  async updateUserBalance(userId: string, newBalance: number): Promise<any> {\n    const users = this.readFile(USERS_FILE);\n    const userIndex = users.findIndex((user: any) => user.id === userId);\n    if (userIndex === -1) return undefined;\n    \n    const user = users[userIndex] as any;\n    user.balance = newBalance;\n    users[userIndex] = user;\n    this.writeFile(USERS_FILE, users);\n    return users[userIndex];\n  }\n\n  // Audit log methods\n  async logAction(action: any): Promise<void> {\n    const logs = this.readFile(LOGS_FILE);\n    logs.push(action);\n    this.writeFile(LOGS_FILE, logs);\n  }\n\n  async getAuditLogs(): Promise<any[]> {\n    return this.readFile(LOGS_FILE);\n  }\n\n  // Login logs methods\n  async createLoginLog(logData: {\n    userId?: string;\n    username?: string;\n    action: 'login' | 'register' | 'visit';\n    country?: string;\n    timezone?: string;\n    ipAddress?: string;\n    userAgent?: string;\n  }): Promise<any> {\n    const logs = this.readFile(LOGIN_LOGS_FILE);\n    const newLog = {\n      id: randomUUID(),\n      ...logData,\n      timestamp: new Date().toISOString()\n    };\n    logs.push(newLog);\n    this.writeFile(LOGIN_LOGS_FILE, logs);\n    return newLog;\n  }\n\n  async getLoginLogs(): Promise<any[]> {\n    const logs = this.readFile(LOGIN_LOGS_FILE);\n    return logs.sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }\n\n  async getLoginLogsByUserId(userId: string): Promise<any[]> {\n    const logs = this.readFile(LOGIN_LOGS_FILE);\n    return logs.filter((log: any) => log.userId === userId)\n      .sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }\n}\n\nexport const storage = new FileStorage();","size_bytes":36900},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Core Types for file-based storage\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  password: string;\n  balance: number;\n  referralCode: string;\n  referredBy?: string;\n  referralEarnings?: number;\n  referralCount?: number;\n  isAdmin: boolean;\n  isActive: boolean;\n  isVerified: boolean;\n  resetCode?: string;\n  resetCodeExpires?: string;\n  country?: string;\n  timezone?: string;\n  createdAt: string;\n}\n\nexport interface PendingUser {\n  id: string;\n  username: string;\n  email: string;\n  password: string;\n  referralCode?: string;\n  verificationCode: string;\n  verificationCodeExpires: string;\n  createdAt: string;\n}\n\nexport interface InvestmentPlan {\n  id: string;\n  name: string;\n  description: string;\n  profit_percentage: number;\n  duration_days: number;\n  min_deposit: number;\n  max_deposit: number;\n  features: string[];\n  active: boolean;\n  created_at: string;\n}\n\nexport interface UserInvestment {\n  id: string;\n  userId: string;\n  planId: string;\n  amount: number;\n  daily_return: number;\n  total_earned: number;\n  days_remaining: number;\n  is_active: boolean;\n  created_at: string;\n  plan_name: string;\n}\n\nexport interface Deposit {\n  id: string;\n  userId: string;\n  cryptocurrency: string;\n  amount: number;\n  usd_value: number;\n  wallet_address: string;\n  tx_hash?: string;\n  confirmations: number;\n  required_confirmations: number;\n  status: \"pending\" | \"confirmed\" | \"failed\";\n  isAdminDeposit?: boolean;\n  admin_notes?: string;\n  created_at: string;\n}\n\nexport interface Withdrawal {\n  id: string;\n  userId: string;\n  cryptocurrency: string;\n  amount: number;\n  usd_value: number;\n  wallet_address: string;\n  network_fee: number;\n  status: \"pending\" | \"approved\" | \"rejected\" | \"completed\";\n  admin_notes?: string;\n  created_at: string;\n  processed_at?: string;\n}\n\nexport interface Message {\n  id: string;\n  userId?: string; // null for system-wide messages\n  title: string;\n  content: string;\n  type: \"info\" | \"success\" | \"warning\" | \"error\";\n  is_read: boolean;\n  created_at: string;\n}\n\nexport interface SupportTicket {\n  id: string;\n  userId: string;\n  subject: string;\n  message: string;\n  status: \"open\" | \"replied\" | \"closed\";\n  admin_reply?: string;\n  priority: \"low\" | \"medium\" | \"high\";\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ReferralEarning {\n  id: string;\n  userId: string;\n  referred_user_id: string;\n  amount: number;\n  type: \"deposit\" | \"investment\";\n  created_at: string;\n}\n\n// AI Chat related types  \nexport interface AIChatMessage {\n  id: string;\n  userId: string;\n  message: string;\n  isAI: boolean;\n  created_at: string;\n}\n\nexport interface AIChatConversation {\n  userId: string;\n  messages: AIChatMessage[];\n  last_activity: string;\n}\n\n// Chat and Support related types (legacy - will be removed)\nexport interface ChatMessage {\n  id: string;\n  userId: string;\n  username: string;\n  message: string;\n  isAI: boolean;\n  created_at: string;\n}\n\nexport interface ChatUser {\n  id: string;\n  username: string;\n  isOnline: boolean;\n  isTyping: boolean;\n  lastActivity: string;\n}\n\nexport interface InboxMessage {\n  id: string;\n  userId: string;\n  title: string;\n  content: string;\n  type: \"welcome\" | \"support_reply\" | \"system\" | \"notification\";\n  is_read: boolean;\n  ticket_id?: string;\n  created_at: string;\n}\n\nexport interface ArbitrageOpportunity {\n  id: string;\n  coin_symbol: string;\n  coin_name: string;\n  buy_exchange: string;\n  sell_exchange: string;\n  buy_price: number;\n  sell_price: number;\n  profit_percentage: number;\n  volume_24h: number;\n  last_updated: string;\n}\n\n// System Settings interface\nexport interface SystemSettings {\n  wallets: {\n    btc: {\n      address: string;\n      qr_code?: string;\n      qrCode?: string;\n      active: boolean;\n    };\n    eth: {\n      address: string;\n      qr_code?: string;\n      qrCode?: string;\n      active: boolean;\n    };\n    usdt: {\n      address: string;\n      qr_code?: string;\n      qrCode?: string;\n      active: boolean;\n    };\n  };\n  withdrawal_limits: {\n    min_withdrawal: number;\n    max_daily_withdrawal: number;\n    processing_time_hours: number;\n  };\n  system: {\n    maintenance_mode: boolean;\n    global_profit_multiplier: number;\n    referral_bonus_percentage: number;\n    arbitrage_refresh_rate: number;\n  };\n  ai_chat: {\n    enabled: boolean;\n    personality: string;\n    api_keys: {\n      reply_keys: {\n        id: string;\n        name: string;\n        key: string;\n        status: 'active' | 'inactive' | 'failed';\n        usage_count: number;\n        last_used: string | null;\n        created_at: string;\n      }[];\n      summary_keys: {\n        id: string;\n        name: string;\n        key: string;\n        status: 'active' | 'inactive' | 'failed';\n        usage_count: number;\n        last_used: string | null;\n        created_at: string;\n      }[];\n      current_reply_index: number;\n      current_summary_index: number;\n    };\n  };\n  recaptcha: {\n    enabled: boolean;\n    site_key: string;\n    secret_key: string;\n  };\n  depositSettings: {\n    BTC: {\n      minDeposit: string;\n      confirmations: number;\n    };\n    ETH: {\n      minDeposit: string;\n      confirmations: number;\n    };\n    USDT: {\n      minDeposit: string;\n      confirmations: number;\n    };\n  };\n}\n\n// Validation Schemas\nexport const registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(20),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  referralCode: z.string().optional(),\n  country: z.string().optional(),\n  recaptchaToken: z.string().optional(),\n});\n\nexport const verifyAccountSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  verificationCode: z.string().length(5, \"Verification code must be 5 digits\"),\n});\n\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n});\n\nexport const resetPasswordSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  resetCode: z.string().length(5, \"Reset code must be 5 digits\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const resendVerificationSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n  recaptchaToken: z.string().optional(),\n});\n\nexport const depositSchema = z.object({\n  cryptocurrency: z.enum([\"BTC\", \"ETH\", \"USDT\"]),\n  amount: z.number().min(0.0001, \"Amount must be greater than 0\"),\n  tx_hash: z.string().optional(),\n});\n\nexport const withdrawalSchema = z.object({\n  cryptocurrency: z.string(),\n  amount: z.string().optional(),\n  usdValue: z.string(),\n  walletAddress: z.string().min(10, \"Invalid wallet address\"),\n  networkFee: z.string().optional(),\n}).transform((data) => ({\n  cryptocurrency: data.cryptocurrency,\n  amount: parseFloat(data.usdValue),\n  wallet_address: data.walletAddress,\n  network_fee: parseFloat(data.networkFee || \"0\"),\n}));\n\n// Admin withdrawal approval schema\nexport const withdrawalApprovalSchema = z.object({\n  status: z.enum([\"approved\", \"rejected\"]),\n  admin_notes: z.string().optional(),\n});\n\n// Admin balance adjustment schema\nexport const balanceAdjustmentSchema = z.object({\n  userId: z.string(),\n  amount: z.number(),\n  type: z.enum([\"add\", \"subtract\"]),\n  notes: z.string().optional(),\n});\n\n// Profile update schemas\nexport const profileUpdateSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(20),\n  email: z.string().email(\"Invalid email address\"),\n});\n\nexport const passwordChangeSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n});\n\nexport const investmentSchema = z.object({\n  planId: z.string().min(1, \"Plan selection is required\"),\n  amount: z.number().min(50, \"Minimum investment is $50\"),\n});\n\nexport const messageSchema = z.object({\n  userId: z.string().optional(),\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  type: z.enum([\"info\", \"success\", \"warning\", \"error\"]).optional(),\n});\n\nexport const supportTicketSchema = z.object({\n  subject: z.string().min(5, \"Subject must be at least 5 characters\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n  priority: z.enum([\"low\", \"medium\", \"high\"]).optional().default(\"medium\"),\n});\n\nexport const planSchema = z.object({\n  name: z.string().min(1, \"Plan name is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  profit_percentage: z.number().min(0.1).max(50),\n  duration_days: z.number().min(1).max(365),\n  min_deposit: z.number().min(1),\n  max_deposit: z.number().min(1),\n  features: z.array(z.string()),\n});\n\n// Insert Types\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type DepositData = z.infer<typeof depositSchema>;\nexport type WithdrawalData = z.infer<typeof withdrawalSchema>;\nexport type InvestmentData = z.infer<typeof investmentSchema>;\nexport type MessageData = z.infer<typeof messageSchema>;\nexport type SupportTicketData = z.infer<typeof supportTicketSchema>;\nexport type PlanData = z.infer<typeof planSchema>;\n\n// Admin access schema\nexport const adminAccessSchema = z.object({\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Admin user management schemas\nexport const userUpdateSchema = z.object({\n  balance: z.number().optional(),\n  isActive: z.boolean().optional(),\n  isAdmin: z.boolean().optional(),\n});\n\nexport const systemSettingsUpdateSchema = z.object({\n  system: z.object({\n    maintenance_mode: z.boolean().optional(),\n    global_profit_multiplier: z.number().optional(),\n    referral_bonus_percentage: z.number().min(0).max(100).optional(),\n    arbitrage_refresh_rate: z.number().optional(),\n  }).optional(),\n  ai_chat: z.object({\n    enabled: z.boolean().optional(),\n    personality: z.string().optional(),\n  }).optional(),\n  withdrawal_limits: z.object({\n    min_withdrawal: z.number().min(1).optional(),\n    max_daily_withdrawal: z.number().optional(),\n    processing_time_hours: z.number().optional(),\n  }).optional(),\n});\n\n// AI Chat schemas\nexport const aiChatMessageSchema = z.object({\n  message: z.string().min(1, \"Message cannot be empty\").max(500, \"Message too long\"),\n});\n\nexport const aiPersonalityUpdateSchema = z.object({\n  personality: z.string().min(10, \"Personality description must be at least 10 characters\"),\n});\n\n// API Key Management schemas\nexport const apiKeyCreateSchema = z.object({\n  name: z.string().min(1, \"API key name is required\").max(50, \"Name too long\"),\n  key: z.string().min(10, \"Invalid API key format\"),\n  type: z.enum([\"reply\", \"summary\"]),\n});\n\nexport const apiKeyUpdateSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"API key name is required\").max(50, \"Name too long\").optional(),\n  status: z.enum([\"active\", \"inactive\"]).optional(),\n});\n\nexport const apiKeyDeleteSchema = z.object({\n  id: z.string(),\n  type: z.enum([\"reply\", \"summary\"]),\n});\n\n// Chat and Inbox schemas\nexport const chatMessageSchema = z.object({\n  message: z.string().min(1, \"Message cannot be empty\").max(500, \"Message too long\"),\n});\n\nexport const inboxMessageSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  type: z.enum([\"welcome\", \"support_reply\", \"system\", \"notification\"]),\n  ticket_id: z.string().optional(),\n});\n\n// AI Chat types\nexport type AIChatMessageData = z.infer<typeof aiChatMessageSchema>;\nexport type AIPersonalityUpdateData = z.infer<typeof aiPersonalityUpdateSchema>;\n\n// API Key Management types\nexport type APIKeyCreateData = z.infer<typeof apiKeyCreateSchema>;\nexport type APIKeyUpdateData = z.infer<typeof apiKeyUpdateSchema>;\nexport type APIKeyDeleteData = z.infer<typeof apiKeyDeleteSchema>;\n\n// Chat and Inbox types\nexport type ChatMessageData = z.infer<typeof chatMessageSchema>;\nexport type InboxMessageData = z.infer<typeof inboxMessageSchema>;\n\nexport type AdminAccessData = z.infer<typeof adminAccessSchema>;\nexport type UserUpdateData = z.infer<typeof userUpdateSchema>;\nexport type SystemSettingsUpdateData = z.infer<typeof systemSettingsUpdateSchema>;\nexport type VerifyAccountData = z.infer<typeof verifyAccountSchema>;\nexport type ForgotPasswordData = z.infer<typeof forgotPasswordSchema>;\nexport type ResetPasswordData = z.infer<typeof resetPasswordSchema>;\nexport type ResendVerificationData = z.infer<typeof resendVerificationSchema>;\nexport type WithdrawalApprovalData = z.infer<typeof withdrawalApprovalSchema>;\nexport type BalanceAdjustmentData = z.infer<typeof balanceAdjustmentSchema>;","size_bytes":12859},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport ScrollToTop from \"@/components/scroll-to-top\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ArbitrageFeed from \"@/pages/arbitrage-feed\";\nimport InvestmentPlans from \"@/pages/investment-plans\";\nimport Deposit from \"@/pages/deposit\";\nimport Withdraw from \"@/pages/withdraw\";\nimport Messages from \"@/pages/messages\";\nimport Referrals from \"@/pages/referrals\";\nimport Settings from \"@/pages/settings\";\nimport Support from \"@/pages/support\";\nimport { ChatPage } from \"@/pages/chat\";\nimport { InboxPage } from \"@/pages/inbox\";\nimport { EditProfilePage } from \"@/pages/edit-profile\";\nimport { ChangePasswordPage } from \"@/pages/change-password\";\nimport { AIChatPage } from \"@/pages/ai-chat\";\nimport { ContactPage } from \"@/pages/contact\";\nimport Admin from \"@/pages/admin-new-working\";\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\nimport VerifyAccount from \"@/pages/auth/verify-account\";\nimport ForgotPassword from \"@/pages/auth/forgot-password\";\nimport ResetPassword from \"@/pages/auth/reset-password\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <>\n      <ScrollToTop />\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/auth/login\" component={Login} />\n        <Route path=\"/auth/register\" component={Register} />\n        <Route path=\"/auth/verify\" component={VerifyAccount} />\n        <Route path=\"/auth/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/auth/reset-password\" component={ResetPassword} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/arbitrage\" component={ArbitrageFeed} />\n        <Route path=\"/plans\" component={InvestmentPlans} />\n        <Route path=\"/deposit\" component={Deposit} />\n        <Route path=\"/withdraw\" component={Withdraw} />\n        <Route path=\"/messages\" component={Messages} />\n        <Route path=\"/referrals\" component={Referrals} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/support\" component={Support} />\n        <Route path=\"/chat\" component={ChatPage} />\n        <Route path=\"/ai-chat\" component={AIChatPage} />\n        <Route path=\"/contact\" component={ContactPage} />\n        <Route path=\"/inbox\" component={InboxPage} />\n        <Route path=\"/edit-profile\" component={EditProfilePage} />\n        <Route path=\"/change-password\" component={ChangePasswordPage} />\n        <Route path=\"/admin\" component={Admin} />\n        <Route path=\"/admin-new-working\" component={Admin} />\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <div className=\"dark min-h-screen bg-crypto-dark\">\n            <Toaster />\n            <Router />\n          </div>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3404},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 11%, 15%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(210, 11%, 15%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(210, 11%, 15%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(210, 40%, 10%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(210, 40%, 10%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(210, 40%, 10%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --radius: 0.5rem;\n  \n  /* Crypto specific colors */\n  --crypto-dark: hsl(220, 55%, 8%);\n  --crypto-card: hsl(220, 33%, 15%);\n  --crypto-blue: hsl(217, 91%, 60%);\n  --crypto-green: hsl(160, 84%, 39%);\n  --profit-green: hsl(160, 87%, 40%);\n  --loss-red: hsl(0, 84%, 60%);\n  \n  /* Gradients */\n  --crypto-gradient: linear-gradient(135deg, hsl(217, 91%, 60%) 0%, hsl(160, 84%, 39%) 100%);\n  --dark-gradient: linear-gradient(135deg, hsl(220, 55%, 8%) 0%, hsl(220, 33%, 15%) 100%);\n  --hero-gradient: radial-gradient(ellipse at top, hsl(217, 91%, 60%, 0.3) 0%, transparent 50%), \n                   radial-gradient(ellipse at bottom, hsl(160, 84%, 39%, 0.2) 0%, transparent 50%),\n                   linear-gradient(135deg, hsl(220, 55%, 8%) 0%, hsl(220, 33%, 12%) 100%);\n  \n  /* Fonts */\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(220, 55%, 8%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(220, 33%, 15%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(220, 55%, 8%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(220, 33%, 15%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(220, 33%, 15%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(220, 33%, 15%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n  \n  /* Custom utility classes */\n  .crypto-gradient {\n    background: var(--crypto-gradient);\n  }\n  \n  .dark-gradient {\n    background: var(--dark-gradient);\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .profit-flash {\n    animation: profitFlash 1s ease-in-out;\n  }\n  \n  /* 3D Background Animation */\n  .hero-3d-bg {\n    background: var(--hero-gradient);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .hero-3d-bg::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      conic-gradient(from 0deg at 50% 50%, transparent 0deg, hsl(217, 91%, 60%, 0.1) 90deg, transparent 180deg),\n      conic-gradient(from 180deg at 50% 50%, transparent 0deg, hsl(160, 84%, 39%, 0.1) 90deg, transparent 180deg);\n    animation: rotate3d 20s linear infinite;\n  }\n  \n  .floating-3d {\n    animation: none; /* Removed floating animation */\n    transform-style: preserve-3d;\n  }\n  \n  .floating-3d-alt {\n    animation: none; /* Removed floating animation */\n    transform-style: preserve-3d;\n  }\n  \n  /* Text Animations */\n  .fade-up {\n    animation: fadeUp 1s ease-out forwards;\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  \n  .slide-left {\n    animation: slideLeft 1s ease-out forwards;\n    opacity: 0;\n    transform: translateX(50px);\n  }\n  \n  .slide-right {\n    animation: slideRight 1s ease-out forwards;\n    opacity: 0;\n    transform: translateX(-50px);\n  }\n  \n  .glow-pulse {\n    animation: glowPulse 2s ease-in-out infinite;\n  }\n  \n  .scale-entrance {\n    animation: scaleEntrance 1.2s ease-out forwards;\n    opacity: 0;\n    transform: scale(0.8);\n  }\n  \n  .shimmer {\n    background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.1) 50%, transparent 100%);\n    background-size: 200% 100%;\n    animation: shimmer 3s ease-in-out infinite;\n  }\n  \n  /* Form animations */\n  .form-entrance {\n    animation: formEntrance 0.8s ease-out forwards;\n    opacity: 0;\n    transform: translateY(20px) scale(0.95);\n  }\n  \n  .card-float {\n    animation: none; /* Removed floating animation */\n  }\n  \n  .input-focus-glow:focus {\n    box-shadow: 0 0 0 2px hsl(217, 91%, 60%, 0.3), 0 0 20px hsl(217, 91%, 60%, 0.1);\n  }\n  \n  .button-hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n  }\n  \n  .page-transition {\n    animation: pageTransition 0.6s ease-out forwards;\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  \n  /* Staggered animations */\n  .fade-up-delay-1 { animation-delay: 0.2s; }\n  .fade-up-delay-2 { animation-delay: 0.4s; }\n  .fade-up-delay-3 { animation-delay: 0.6s; }\n  .fade-up-delay-4 { animation-delay: 0.8s; }\n  .fade-up-delay-5 { animation-delay: 1s; }\n  \n  @keyframes rotate3d {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  \n  @keyframes float3d {\n    0%, 100% { \n      transform: translateY(0px) rotateX(0deg) rotateY(0deg); \n    }\n    33% { \n      transform: translateY(-10px) rotateX(5deg) rotateY(5deg); \n    }\n    66% { \n      transform: translateY(5px) rotateX(-3deg) rotateY(-3deg); \n    }\n  }\n  \n  @keyframes float3dAlt {\n    0%, 100% { \n      transform: translateY(0px) rotateX(0deg) rotateY(0deg); \n    }\n    50% { \n      transform: translateY(-15px) rotateX(-5deg) rotateY(8deg); \n    }\n  }\n  \n  @keyframes fadeUp {\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes slideLeft {\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n  \n  @keyframes slideRight {\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n  \n  @keyframes scaleEntrance {\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  \n  @keyframes glowPulse {\n    0%, 100% {\n      box-shadow: 0 0 20px hsl(217, 91%, 60%, 0.5);\n      transform: scale(1);\n    }\n    50% {\n      box-shadow: 0 0 30px hsl(217, 91%, 60%, 0.8), 0 0 40px hsl(160, 84%, 39%, 0.3);\n      transform: scale(1.05);\n    }\n  }\n  \n  @keyframes shimmer {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n  \n  @keyframes formEntrance {\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n  \n  @keyframes cardFloat {\n    0%, 100% { \n      transform: translateY(0) rotateY(0deg); \n    }\n    50% { \n      transform: translateY(-5px) rotateY(1deg); \n    }\n  }\n  \n  @keyframes pageTransition {\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes profitFlash {\n    0%, 100% { \n      background-color: transparent; \n    } \n    50% { \n      background-color: hsl(160, 84%, 39%, 0.1); \n    }\n  }\n  \n  /* Crypto specific background colors */\n  .bg-crypto-dark {\n    background-color: var(--crypto-dark);\n  }\n  \n  .bg-crypto-card {\n    background-color: var(--crypto-card);\n  }\n  \n  .bg-crypto-blue {\n    background-color: var(--crypto-blue);\n  }\n  \n  .bg-crypto-green {\n    background-color: var(--crypto-green);\n  }\n  \n  .text-crypto-blue {\n    color: var(--crypto-blue);\n  }\n  \n  .text-crypto-green {\n    color: var(--crypto-green);\n  }\n  \n  .text-profit-green {\n    color: var(--profit-green);\n  }\n  \n  .text-loss-red {\n    color: var(--loss-red);\n  }\n  \n  .border-crypto-blue {\n    border-color: var(--crypto-blue);\n  }\n  \n  .border-crypto-green {\n    border-color: var(--crypto-green);\n  }\n}\n","size_bytes":7933},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage\";\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    username: string;\n    isAdmin: boolean;\n  };\n}\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"tradepilot-secret-key\";\n\nexport const authenticateToken = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: string; isAdmin?: boolean };\n    \n    // Handle special admin token\n    if (decoded.userId === 'admin' && decoded.isAdmin) {\n      req.user = {\n        id: 'admin',\n        email: 'admin@tradepilot.com',\n        username: 'Administrator',\n        isAdmin: true,\n      };\n      return next();\n    }\n    \n    // Handle regular user tokens\n    const user = await storage.getUser(decoded.userId);\n    \n    if (!user || !user.isActive) {\n      return res.status(401).json({ message: \"Invalid or inactive user\" });\n    }\n\n    req.user = {\n      id: user.id,\n      email: user.email,\n      username: user.username,\n      isAdmin: user.isAdmin || false,\n    };\n\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: \"Invalid token\" });\n  }\n};\n\nexport const requireAdmin = (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.user?.isAdmin) {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n};\n","size_bytes":1718},"server/services/ai-chat-service.ts":{"content":"import { storage } from \"../storage\";\nimport type { AIChatMessage, AIChatConversation } from \"@shared/schema\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\n\nexport class AIChatService {\n  private static readonly CEREBRAS_API_URL = 'https://api.cerebras.ai/v1/chat/completions';\n  \n  private static async getActiveAPIKey(type: 'reply' | 'summary'): Promise<string | null> {\n    try {\n      const settings = await storage.getSystemSettings();\n      if (!settings.ai_chat?.api_keys) return null;\n      \n      const keys = type === 'reply' ? settings.ai_chat.api_keys.reply_keys : settings.ai_chat.api_keys.summary_keys;\n      \n      // Filter active keys\n      const activeKeys = keys.filter((k: any) => k.status === 'active');\n      if (activeKeys.length === 0) return null;\n      \n      // Random key selection for better distribution\n      const randomIndex = Math.floor(Math.random() * activeKeys.length);\n      const selectedKey = activeKeys[randomIndex];\n      \n      console.log(`[${type.toUpperCase()}] Using API key: ${selectedKey.name} (${selectedKey.key.substring(0, 8)}...)`);\n      return selectedKey?.key || null;\n    } catch (error) {\n      console.error('Error getting active API key:', error);\n      return null;\n    }\n  }\n  \n  private static async rotateAPIKey(type: 'reply' | 'summary'): Promise<void> {\n    try {\n      const settings = await storage.getSystemSettings();\n      if (!settings.ai_chat?.api_keys) return;\n      \n      const keys = type === 'reply' ? settings.ai_chat.api_keys.reply_keys : settings.ai_chat.api_keys.summary_keys;\n      const activeKeys = keys.filter(k => k.status === 'active');\n      \n      if (activeKeys.length <= 1) {\n        console.log(`[${type.toUpperCase()}] No rotation needed - only ${activeKeys.length} active key(s)`);\n        return;\n      }\n      \n      console.log(`[${type.toUpperCase()}] Rotating through ${activeKeys.length} active keys randomly`);\n      \n      // Random rotation ensures even distribution across all keys\n      // The next call to getActiveAPIKey will randomly select from available keys\n      // This approach ensures better load balancing than sequential rotation\n    } catch (error) {\n      console.error('Error rotating API key:', error);\n    }\n  }\n  \n  private static async updateKeyUsage(keyValue: string, type: 'reply' | 'summary'): Promise<void> {\n    try {\n      const settings = await storage.getSystemSettings();\n      if (!settings.ai_chat?.api_keys) return;\n      \n      const keys = type === 'reply' ? settings.ai_chat.api_keys.reply_keys : settings.ai_chat.api_keys.summary_keys;\n      const keyIndex = keys.findIndex((k: any) => k.key === keyValue);\n      \n      if (keyIndex !== -1) {\n        keys[keyIndex].usage_count += 1;\n        keys[keyIndex].last_used = new Date().toISOString();\n        await storage.updateSystemSettings(settings);\n      }\n    } catch (error) {\n      console.error('Error updating key usage:', error);\n    }\n  }\n  \n  private static async summarizeConversation(messages: AIChatMessage[]): Promise<string> {\n    try {\n      const apiKey = await this.getActiveAPIKey('summary');\n      if (!apiKey) return '';\n      \n      // Get recent messages for context (last 10)\n      const recentMessages = messages.slice(-10);\n      const conversationText = recentMessages\n        .map(msg => `${msg.isAI ? 'AI' : 'User'}: ${msg.message}`)\n        .join('\\n');\n      \n      const response = await axios.post(\n        this.CEREBRAS_API_URL,\n        {\n          model: 'llama3.1-8b',\n          messages: [\n            {\n              role: 'system',\n              content: 'Summarize this conversation in 2-3 sentences, focusing on the main topics and user interests.'\n            },\n            {\n              role: 'user',\n              content: conversationText\n            }\n          ],\n          max_tokens: 150,\n          temperature: 0.3\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          timeout: 10000\n        }\n      );\n      \n      await this.updateKeyUsage(apiKey, 'summary');\n      return response.data.choices[0]?.message?.content || '';\n    } catch (error) {\n      console.error('Error summarizing conversation:', error);\n      await this.rotateAPIKey('summary');\n      return '';\n    }\n  }\n  \n  private static async generateAIResponse(userMessage: string, userName: string, conversationSummary: string): Promise<string> {\n    try {\n      const apiKey = await this.getActiveAPIKey('reply');\n      if (!apiKey) {\n        // Use a simple fallback that doesn't override admin personality\n        return `Hello ${userName}! I'm having some technical difficulties. Please try again in a moment.`;\n      }\n      \n      const settings = await storage.getSystemSettings();\n      const personality = settings.ai_chat?.personality || 'You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities.';\n      \n      const systemPrompt = `${personality}\n\nUser's name: ${userName}\n${conversationSummary ? `Previous conversation context: ${conversationSummary}` : ''}\n\nIMPORTANT FORMATTING RULES:\n- Use clear, structured responses with proper formatting\n- Use bullet points (•) for lists and key information\n- Use line breaks to separate different sections\n- Use numbered lists (1., 2., 3.) for step-by-step instructions\n- Keep paragraphs concise and well-spaced\n- Use professional, friendly tone like ChatGPT\n- Start with a brief greeting or acknowledgment when appropriate\n- End with a helpful closing or question when relevant`;\n\n      const response = await axios.post(\n        this.CEREBRAS_API_URL,\n        {\n          model: 'llama3.1-8b',\n          messages: [\n            {\n              role: 'system',\n              content: systemPrompt\n            },\n            {\n              role: 'user',\n              content: userMessage\n            }\n          ],\n          max_tokens: 400,\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          timeout: 15000\n        }\n      );\n      \n      await this.updateKeyUsage(apiKey, 'reply');\n      const aiResponse = response.data.choices[0]?.message?.content;\n      if (!aiResponse || aiResponse.trim() === '') {\n        return `Hello ${userName}! I'm having trouble generating a response right now. Please try again in a moment.`;\n      }\n      return aiResponse.trim();\n    } catch (error) {\n      console.error('Error generating AI response:', error);\n      // Rotate to next key on failure\n      await this.rotateAPIKey('reply');\n      \n      // Provide more specific error message based on error type\n      if ((error as any).code === 'ENOTFOUND' || (error as any).code === 'ETIMEDOUT') {\n        return `Hello ${userName}! I'm having trouble connecting right now. Please try again in a few moments.`;\n      }\n      \n      if ((error as any).response?.status === 401) {\n        return `Hello ${userName}! There's an issue with API access. Please contact support.`;\n      }\n      \n      if ((error as any).response?.status === 429) {\n        return `Hello ${userName}! I'm getting a lot of requests right now. Please wait a moment and try again.`;\n      }\n      \n      return `Hello ${userName}! I'm having some technical difficulties. Please try again in a moment.`;\n    }\n  }\n  \n  private static async generatePersonalizedGreeting(userName: string): Promise<string> {\n    try {\n      // Get settings for AI personality\n      const settings = await storage.getSystemSettings();\n      const personality = settings.ai_chat?.personality || 'You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities.';\n      \n      // Always generate greeting using AI personality - no template needed\n      const apiKey = await this.getActiveAPIKey('reply');\n      if (!apiKey) {\n        // Simple fallback that doesn't override admin personality  \n        return `Hello ${userName}! How can I help you today?`;\n      }\n\n      const systemPrompt = `${personality}\n\nGenerate a welcoming first message for a user named ${userName} who just opened the chat.\n\nIMPORTANT FORMATTING RULES:\n- Use clear, structured responses with proper formatting\n- Use bullet points (•) for lists and key information\n- Use line breaks to separate different sections\n- Keep paragraphs concise and well-spaced\n- Use professional, friendly tone like ChatGPT`;\n\n      const response = await axios.post(\n        this.CEREBRAS_API_URL,\n        {\n          model: 'llama3.1-8b',\n          messages: [\n            {\n              role: 'system',\n              content: systemPrompt\n            },\n            {\n              role: 'user',\n              content: 'Generate the greeting message now.'\n            }\n          ],\n          max_tokens: 150,\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          timeout: 10000\n        }\n      );\n\n      await this.updateKeyUsage(apiKey, 'reply');\n      const aiGreeting = response.data.choices[0]?.message?.content?.trim();\n      \n      return aiGreeting || `Hello ${userName}! How can I help you today?`;\n      \n    } catch (error) {\n      console.error('Error generating personalized greeting:', error);\n      return `Hello ${userName}! How can I help you today?`;\n    }\n  }\n\n  static async getConversation(userId: string): Promise<AIChatMessage[]> {\n    try {\n      const conversations = await storage.getAIChatConversations();\n      let userConversation = conversations.find((conv: any) => conv.userId === userId);\n      \n      if (!userConversation) {\n        // Create empty conversation - greeting will be triggered separately\n        userConversation = {\n          userId,\n          messages: [],\n          last_activity: new Date().toISOString(),\n        };\n        \n        conversations.push(userConversation);\n        await storage.saveAIChatConversations(conversations);\n      }\n      \n      return userConversation.messages;\n    } catch (error) {\n      console.error('Error getting AI chat conversation:', error);\n      return [];\n    }\n  }\n\n  static async sendInitialGreeting(userId: string): Promise<AIChatMessage[]> {\n    try {\n      const conversations = await storage.getAIChatConversations();\n      let userConversation = conversations.find((conv: any) => conv.userId === userId);\n      \n      if (!userConversation) {\n        // Create new conversation first\n        await this.getConversation(userId);\n        return this.sendInitialGreeting(userId);\n      }\n\n      // Only send greeting if conversation is empty\n      if (userConversation.messages.length > 0) {\n        return userConversation.messages;\n      }\n      \n      const user = await storage.getUser(userId);\n      const userName = user?.username || 'Friend';\n      \n      const greetingMessage = await this.generatePersonalizedGreeting(userName);\n      \n      const greeting: AIChatMessage = {\n        id: uuidv4(),\n        userId,\n        message: greetingMessage,\n        isAI: true,\n        created_at: new Date().toISOString(),\n      };\n      \n      userConversation.messages.push(greeting);\n      userConversation.last_activity = new Date().toISOString();\n      await storage.saveAIChatConversations(conversations);\n      \n      return userConversation.messages;\n    } catch (error) {\n      console.error('Error sending initial greeting:', error);\n      throw new Error('Failed to send initial greeting');\n    }\n  }\n\n  static async sendMessage(userId: string, message: string): Promise<AIChatMessage[]> {\n    try {\n      const conversations = await storage.getAIChatConversations();\n      let userConversation = conversations.find((conv: any) => conv.userId === userId);\n      \n      if (!userConversation) {\n        // Create new conversation if it doesn't exist\n        await this.getConversation(userId);\n        return this.sendMessage(userId, message);\n      }\n      \n      // Add user message\n      const userMessage: AIChatMessage = {\n        id: uuidv4(),\n        userId,\n        message,\n        isAI: false,\n        created_at: new Date().toISOString(),\n      };\n      \n      userConversation.messages.push(userMessage);\n      userConversation.last_activity = new Date().toISOString();\n      await storage.saveAIChatConversations(conversations);\n      \n      // Generate conversation summary for context\n      const conversationSummary = await this.summarizeConversation(userConversation.messages);\n      \n      // Get user info for personalization\n      const user = await storage.getUser(userId);\n      const userName = user?.username || 'Friend';\n      \n      // Generate AI response using Cerebras API\n      const aiResponseText = await this.generateAIResponse(message, userName, conversationSummary);\n      \n      // Add AI response immediately (no delay for better UX)\n      const aiMessage: AIChatMessage = {\n        id: uuidv4(),\n        userId,\n        message: aiResponseText,\n        isAI: true,\n        created_at: new Date().toISOString(),\n      };\n      \n      userConversation.messages.push(aiMessage);\n      userConversation.last_activity = new Date().toISOString();\n      await storage.saveAIChatConversations(conversations);\n      \n      return userConversation.messages;\n    } catch (error) {\n      console.error('Error sending AI chat message:', error);\n      throw new Error('Failed to send message');\n    }\n  }\n\n  static async getAllConversations(): Promise<AIChatConversation[]> {\n    try {\n      return await storage.getAIChatConversations();\n    } catch (error) {\n      console.error('Error getting all conversations:', error);\n      return [];\n    }\n  }\n\n  static async clearConversation(userId: string): Promise<void> {\n    try {\n      const conversations = await storage.getAIChatConversations();\n      const updatedConversations = conversations.filter(conv => conv.userId !== userId);\n      await storage.saveAIChatConversations(updatedConversations);\n    } catch (error) {\n      console.error('Error clearing conversation:', error);\n      throw new Error('Failed to clear conversation');\n    }\n  }\n\n  static async updatePersonality(personality: string): Promise<void> {\n    try {\n      // Get current settings to preserve existing ai_chat properties\n      const currentSettings = await storage.getSystemSettings();\n      const updates = {\n        ai_chat: {\n          enabled: true,\n          personality,\n          api_keys: currentSettings.ai_chat?.api_keys || {\n            reply_keys: [],\n            summary_keys: [],\n            current_reply_index: 0,\n            current_summary_index: 0,\n          }\n        }\n      };\n      await storage.updateSystemSettings(updates);\n    } catch (error) {\n      console.error('Error updating AI personality:', error);\n      throw new Error('Failed to update AI personality');\n    }\n  }\n\n  // API Key Management Methods\n  static async addAPIKey(name: string, key: string, type: 'reply' | 'summary'): Promise<void> {\n    try {\n      const settings = await storage.getSystemSettings();\n      if (!settings.ai_chat) {\n        await this.updatePersonality('You are a helpful TradePilot AI assistant.');\n      }\n      \n      if (!settings.ai_chat.api_keys) {\n        settings.ai_chat.api_keys = {\n          reply_keys: [],\n          summary_keys: [],\n          current_reply_index: 0,\n          current_summary_index: 0,\n        };\n      }\n      \n      const newKey = {\n        id: uuidv4(),\n        name,\n        key,\n        status: 'active' as const,\n        usage_count: 0,\n        last_used: null,\n        created_at: new Date().toISOString(),\n      };\n      \n      if (type === 'reply') {\n        settings.ai_chat.api_keys.reply_keys.push(newKey);\n      } else {\n        settings.ai_chat.api_keys.summary_keys.push(newKey);\n      }\n      \n      await storage.updateSystemSettings(settings);\n    } catch (error) {\n      console.error('Error adding API key:', error);\n      throw new Error('Failed to add API key');\n    }\n  }\n\n  static async updateAPIKey(id: string, type: 'reply' | 'summary', updates: { name?: string; status?: 'active' | 'inactive' }): Promise<void> {\n    try {\n      const settings = await storage.getSystemSettings();\n      if (!settings.ai_chat?.api_keys) {\n        throw new Error('No API keys configured');\n      }\n      \n      const keys = type === 'reply' ? settings.ai_chat.api_keys.reply_keys : settings.ai_chat.api_keys.summary_keys;\n      const keyIndex = keys.findIndex(k => k.id === id);\n      \n      if (keyIndex === -1) {\n        throw new Error('API key not found');\n      }\n      \n      if (updates.name) {\n        keys[keyIndex].name = updates.name;\n      }\n      if (updates.status) {\n        keys[keyIndex].status = updates.status;\n      }\n      \n      await storage.updateSystemSettings(settings);\n    } catch (error) {\n      console.error('Error updating API key:', error);\n      throw new Error('Failed to update API key');\n    }\n  }\n\n  static async deleteAPIKey(id: string, type: 'reply' | 'summary'): Promise<void> {\n    try {\n      const settings = await storage.getSystemSettings();\n      if (!settings.ai_chat?.api_keys) {\n        throw new Error('No API keys configured');\n      }\n      \n      if (type === 'reply') {\n        settings.ai_chat.api_keys.reply_keys = settings.ai_chat.api_keys.reply_keys.filter(k => k.id !== id);\n      } else {\n        settings.ai_chat.api_keys.summary_keys = settings.ai_chat.api_keys.summary_keys.filter(k => k.id !== id);\n      }\n      \n      await storage.updateSystemSettings(settings);\n    } catch (error) {\n      console.error('Error deleting API key:', error);\n      throw new Error('Failed to delete API key');\n    }\n  }\n\n  static async getAPIKeys(): Promise<{ reply_keys: any[]; summary_keys: any[] }> {\n    try {\n      const settings = await storage.getSystemSettings();\n      if (!settings.ai_chat?.api_keys) {\n        return { reply_keys: [], summary_keys: [] };\n      }\n      \n      // Return keys without exposing the actual key values\n      const reply_keys = settings.ai_chat.api_keys.reply_keys.map(k => ({\n        ...k,\n        key: `${k.key.substring(0, 8)}...${k.key.substring(k.key.length - 4)}`\n      }));\n      \n      const summary_keys = settings.ai_chat.api_keys.summary_keys.map(k => ({\n        ...k,\n        key: `${k.key.substring(0, 8)}...${k.key.substring(k.key.length - 4)}`\n      }));\n      \n      return { reply_keys, summary_keys };\n    } catch (error) {\n      console.error('Error getting API keys:', error);\n      return { reply_keys: [], summary_keys: [] };\n    }\n  }\n}","size_bytes":18719},"server/services/auth-service.ts":{"content":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport axios from \"axios\";\nimport { storage } from \"../storage\";\nimport { EmailService } from \"./email-service\";\nimport { LocationService } from \"./location-service\";\nimport { ChatService } from \"./chat-service\";\nimport { type RegisterData, type LoginData, type VerifyAccountData, type ForgotPasswordData, type ResetPasswordData } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"tradepilot-secret-key\";\n\nexport class AuthService {\n  static async verifyRecaptcha(token: string): Promise<boolean> {\n    try {\n      const settings = await storage.getSystemSettings();\n      const recaptchaSettings = settings?.recaptcha;\n      \n      if (!recaptchaSettings?.enabled || !recaptchaSettings?.secret_key) {\n        return true; // Skip verification if not enabled or configured\n      }\n\n      const response = await axios.post('https://www.google.com/recaptcha/api/siteverify', null, {\n        params: {\n          secret: recaptchaSettings.secret_key,\n          response: token,\n        },\n      });\n\n      return response.data.success === true;\n    } catch (error) {\n      console.error('reCAPTCHA verification error:', error);\n      return false;\n    }\n  }\n\n  static async register(userData: RegisterData & { confirmPassword?: string; recaptchaToken?: string }) {\n    // Check if reCAPTCHA is enabled and validate accordingly\n    const settings = await storage.getSystemSettings();\n    const recaptchaSettings = settings?.recaptcha;\n    \n    if (recaptchaSettings?.enabled && recaptchaSettings?.secret_key) {\n      if (!userData.recaptchaToken) {\n        throw new Error(\"reCAPTCHA verification is required\");\n      }\n      if (!(await this.verifyRecaptcha(userData.recaptchaToken))) {\n        throw new Error(\"reCAPTCHA verification failed\");\n      }\n    }\n\n    // Validate passwords match if confirmPassword provided\n    if (userData.confirmPassword && userData.password !== userData.confirmPassword) {\n      throw new Error(\"Passwords do not match\");\n    }\n\n    // Check if user already exists\n    const existingUser = await storage.getUserByEmail(userData.email);\n    if (existingUser) {\n      throw new Error(\"User with this email already exists\");\n    }\n\n    const existingUsername = await storage.getUserByUsername(userData.username);\n    if (existingUsername) {\n      throw new Error(\"Username already taken\");\n    }\n\n    // Check if pending user exists\n    const existingPendingUser = await storage.getPendingUserByEmail(userData.email);\n\n    // Validate referral code if provided\n    if (userData.referralCode) {\n      const referrer = await storage.getUserByReferralCode(userData.referralCode);\n      if (!referrer) {\n        throw new Error(\"Invalid referral code\");\n      }\n    }\n\n    // Hash password and create pending user (will replace existing if any)\n    const hashedPassword = await this.hashPassword(userData.password);\n    const pendingUserData = { ...userData, password: hashedPassword };\n    const pendingUser = await storage.createPendingUser(pendingUserData);\n\n    // Generate and send verification code\n    const verificationCode = EmailService.generateVerificationCode();\n    await storage.updatePendingUserCode(pendingUser.email, verificationCode);\n    await EmailService.sendVerificationEmail(pendingUser.email, verificationCode, pendingUser.username);\n\n    return {\n      user: {\n        id: pendingUser.id,\n        username: pendingUser.username,\n        email: pendingUser.email,\n        balance: 0,\n        referralCode: null,\n        isAdmin: false,\n        isVerified: false,\n      },\n      message: \"Registration successful! Please check your email for a verification code.\",\n    };\n  }\n\n  static async login(loginData: LoginData & { recaptchaToken?: string }) {\n    // Check if reCAPTCHA is enabled and validate accordingly\n    const settings = await storage.getSystemSettings();\n    const recaptchaSettings = settings?.recaptcha;\n    \n    if (recaptchaSettings?.enabled && recaptchaSettings?.secret_key) {\n      if (!loginData.recaptchaToken) {\n        throw new Error(\"reCAPTCHA verification is required\");\n      }\n      if (!(await this.verifyRecaptcha(loginData.recaptchaToken))) {\n        throw new Error(\"reCAPTCHA verification failed\");\n      }\n    }\n\n    const user = await storage.getUserByEmail(loginData.email);\n    if (!user || !user.isActive) {\n      throw new Error(\"Invalid credentials or account not activated\");\n    }\n\n    if (!user.isVerified) {\n      throw new Error(\"Please verify your email address before logging in\");\n    }\n\n    const isValidPassword = await bcrypt.compare(loginData.password, user.password);\n    if (!isValidPassword) {\n      throw new Error(\"Invalid credentials\");\n    }\n\n    const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"3d\" });\n\n    return {\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        balance: user.balance,\n        referralCode: user.referralCode,\n        isAdmin: user.isAdmin,\n        isVerified: user.isVerified,\n      },\n      token,\n    };\n  }\n\n  static async getCurrentUser(userId: string) {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    return {\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      balance: user.balance,\n      referralCode: user.referralCode,\n      isAdmin: user.isAdmin,\n      isActive: user.isActive,\n      isVerified: user.isVerified,\n      createdAt: user.createdAt,\n    };\n  }\n\n  static async verifyAccount(verifyData: VerifyAccountData, requestOrigin?: string) {\n    const user = await storage.verifyPendingUser(verifyData.email, verifyData.verificationCode);\n    if (!user) {\n      throw new Error(\"Invalid or expired verification code\");\n    }\n\n    // Add welcome message to user's inbox\n    await ChatService.addWelcomeMessage(user.id);\n\n    // Send welcome email with request origin for proper dashboard redirect\n    await EmailService.sendWelcomeEmail(user.email, user.username, undefined, requestOrigin);\n\n    return { message: \"Account verified successfully! You can now log in.\" };\n  }\n\n  static async resendVerificationCode(email: string) {\n    const pendingUser = await storage.getPendingUserByEmail(email);\n    if (!pendingUser) {\n      throw new Error(\"No pending registration found for this email address\");\n    }\n\n    // Generate and send new verification code\n    const verificationCode = EmailService.generateVerificationCode();\n    await storage.updatePendingUserCode(email, verificationCode);\n    await EmailService.sendVerificationEmail(email, verificationCode, pendingUser.username);\n\n    return { message: \"Verification code sent! Please check your email.\" };\n  }\n\n  static async forgotPassword(forgotData: ForgotPasswordData) {\n    const user = await storage.getUserByEmail(forgotData.email);\n    if (!user) {\n      throw new Error(\"No account found with this email address\");\n    }\n\n    const resetCode = EmailService.generateVerificationCode();\n    await storage.setResetCode(forgotData.email, resetCode);\n    await EmailService.sendPasswordResetEmail(forgotData.email, resetCode, user.username);\n\n    return { message: \"Password reset code sent to your email\" };\n  }\n\n  static async resetPassword(resetData: ResetPasswordData) {\n    const success = await storage.resetPassword(resetData.email, resetData.resetCode, resetData.newPassword);\n    if (!success) {\n      throw new Error(\"Invalid or expired reset code\");\n    }\n\n    return { message: \"Password reset successfully! You can now log in with your new password.\" };\n  }\n\n  static async verifyPassword(hashedPassword: string, plainPassword: string): Promise<boolean> {\n    return await bcrypt.compare(plainPassword, hashedPassword);\n  }\n\n  static async hashPassword(password: string): Promise<string> {\n    return await bcrypt.hash(password, 10);\n  }\n}","size_bytes":7906},"server/services/chat-service.ts":{"content":"import { storage } from \"../storage\";\nimport type { ChatMessage, ChatUser, InboxMessage } from \"@shared/schema\";\nimport axios from \"axios\";\n\nconst CEREBRAS_API_KEY = \"csk-fj5hkkykwtnnttrxj35nvrx5498drpnpjvwhr2yet36k6mte\";\nconst CEREBRAS_API_URL = \"https://api.cerebras.ai/v1/chat/completions\";\n\n// Realistic US/Canada/UK names for fake users\nconst FAKE_USERNAMES = [\n  \"TradeMaster_Mike\", \"CryptoSarah92\", \"InvestorJohn\", \"Emma_Gains\", \"Alex_Profits\",\n  \"BullRun_Dave\", \"Luna_Trader\", \"ChartWiz_Tom\", \"GoldRush_Kate\", \"DiamondHands_Ben\",\n  \"CoinHunter_Amy\", \"BlockchainBob\", \"DeFi_Queen\", \"BitBull_Chris\", \"EthElite_Lisa\",\n  \"HodlKing_Ryan\", \"MoonShot_Jess\", \"CryptoNinja_Sam\", \"TokenTiger_Max\", \"AltCoin_Anna\",\n  \"StakeWise_Dan\", \"YieldFarm_Zoe\", \"SwapStar_Tim\", \"NFT_Hunter_Mia\", \"Web3Wizard_Joe\"\n];\n\n// Chat message templates for AI generation\nconst CHAT_TEMPLATES = [\n  \"Just made ${amount} profit on my latest investment! 🚀💰\",\n  \"Anyone else seeing these amazing returns? My portfolio is up {percentage}% this week!\",\n  \"The arbitrage opportunities today are insane! Already made ${amount} 🔥\",\n  \"Thanks to everyone in this group, just hit my ${milestone} milestone! 🎉\",\n  \"Morning everyone! Ready for another profitable day? ☀️💪\",\n  \"Who else is loving these consistent daily returns? Best platform ever! ⭐\",\n  \"Just withdrew ${amount} - instant processing as always! 💎\",\n  \"New to the platform but already seeing ${amount} daily returns. Amazing! 🚀\",\n  \"The automated trading is working perfectly. Set it and forget it! 💯\",\n  \"Anyone have tips for maximizing arbitrage profits? Currently at ${amount}/day\"\n];\n\nconst MOTIVATIONAL_MESSAGES = [\n  \"Stay strong everyone! The market always rewards patience 💪\",\n  \"Remember: we're not just trading, we're building wealth! 🏗️💰\",\n  \"Every dip is a buying opportunity. Stay focused! 📈\",\n  \"The key to success: consistent investment + time = wealth 🗝️\",\n  \"Great job everyone on those gains today! Keep it up! 🔥\",\n  \"Financial freedom is closer than you think. Keep going! 🎯\",\n  \"Success in crypto: 90% patience, 10% timing ⏰\",\n  \"We're all gonna make it! Believe in the process 🌟\",\n  \"Today's profits are tomorrow's investments. Compound that growth! 📊\",\n  \"Pro tip: Never invest more than you can afford to lose. Stay smart! 🧠\"\n];\n\nexport class ChatService {\n  private static onlineUsers: ChatUser[] = [];\n  private static typingUsers: Set<string> = new Set();\n\n  // Generate realistic online user count (272-321)\n  static getOnlineCount(): number {\n    return Math.floor(Math.random() * (321 - 272 + 1)) + 272;\n  }\n\n  // Check if chat is active (7 AM to 1 AM)\n  static isChatActive(): boolean {\n    const now = new Date();\n    const hour = now.getHours();\n    return hour >= 7 || hour < 1; // 7 AM to 1 AM (next day)\n  }\n\n  // Get chat status message\n  static getChatStatus(): string {\n    if (this.isChatActive()) {\n      return `💬 ${this.getOnlineCount()} users online`;\n    } else {\n      return \"💤 Chatroom is closed for the night. See you at 7:00 AM!\";\n    }\n  }\n\n  // Generate AI response using Cerebras API\n  static async generateAIResponse(userMessage: string, username: string): Promise<string> {\n    try {\n      const prompt = `You are simulating multiple users in a crypto trading community chatroom. They use TradePilot AI arbitrage platform.\n\nTradePilot scans multiple major exchanges in real time (Binance, Coinbase, Kraken, etc).\n- It identifies crypto arbitrage opportunities (price differences across exchanges)\n- It uses AI algorithms to analyze risks, fees, and timing\n- It executes trades automatically and gives users profit\n\nWrite short, natural, human-like messages as different community members.\nMix different tones: profits 💰, jokes 😅, encouragement 🚀, and small talk.\nKeep it casual and realistic under 80 characters. Make it look like real people chatting together.\n\nPrevious message from ${username}: \"${userMessage}\"\n\nRespond as ONE other trader, not as an AI assistant. Be authentic and conversational:`;\n\n      const response = await axios.post(CEREBRAS_API_URL, {\n        model: \"llama3.1-8b\",\n        messages: [\n          { role: \"system\", content: prompt },\n          { role: \"user\", content: userMessage }\n        ],\n        max_tokens: 100,\n        temperature: 0.9\n      }, {\n        headers: {\n          'Authorization': `Bearer ${CEREBRAS_API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        timeout: 10000\n      });\n\n      return response.data.choices[0]?.message?.content?.trim() || this.getFallbackResponse();\n    } catch (error) {\n      console.error('Cerebras API error:', error);\n      return this.getFallbackResponse();\n    }\n  }\n\n  // Fallback responses when API fails\n  static getFallbackResponse(): string {\n    const fallbacks = [\n      \"Just made $200 today! 💰\",\n      \"TradePilot is crushing it 🚀\",\n      \"Anyone else seeing BTC arb opportunities? 📈\",\n      \"Made 15% this week thanks to the AI 🔥\",\n      \"Love this platform! 💎\",\n      \"Who's ready for more profits? 😅\",\n      \"ETH price diff between exchanges is wild today\",\n      \"Bot found me a sweet USDT trade 💰\",\n      \"This AI never sleeps! 🤖\",\n      \"Best investment I ever made 🚀\"\n    ];\n    return fallbacks[Math.floor(Math.random() * fallbacks.length)];\n  }\n\n  // Generate fake chat messages for background activity\n  static generateFakeMessages(count: number = 3): ChatMessage[] {\n    const messages: ChatMessage[] = [];\n    const now = new Date();\n\n    for (let i = 0; i < count; i++) {\n      const username = FAKE_USERNAMES[Math.floor(Math.random() * FAKE_USERNAMES.length)];\n      const template = Math.random() > 0.7 ? \n        MOTIVATIONAL_MESSAGES[Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length)] :\n        CHAT_TEMPLATES[Math.floor(Math.random() * CHAT_TEMPLATES.length)];\n\n      // Replace placeholders with realistic values\n      let message = template\n        .replace(/\\${amount}/g, `$${Math.floor(Math.random() * 500 + 50)}`)\n        .replace(/\\{percentage\\}/g, `${Math.floor(Math.random() * 15 + 5)}`)\n        .replace(/\\${milestone}/g, `$${Math.floor(Math.random() * 10 + 1)}k`);\n\n      messages.push({\n        id: `fake_${Date.now()}_${i}`,\n        userId: `fake_${username}`,\n        username,\n        message,\n        isAI: true,\n        created_at: new Date(now.getTime() - Math.random() * 1800000).toISOString() // Random time within last 30 min\n      });\n    }\n\n    return messages;\n  }\n\n  // Add user message to chat\n  static async addMessage(userId: string, username: string, message: string): Promise<ChatMessage> {\n    const chatMessage: ChatMessage = {\n      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      userId,\n      username,\n      message,\n      isAI: false,\n      created_at: new Date().toISOString()\n    };\n\n    await storage.addChatMessage(chatMessage);\n\n    // Generate AI response after a realistic delay (1-5 seconds)\n    const responseDelay = Math.random() * 4000 + 1000; // 1-5 seconds\n    setTimeout(async () => {\n      if (this.isChatActive()) {\n        const aiResponse = await this.generateAIResponse(message, username);\n        const aiUsername = FAKE_USERNAMES[Math.floor(Math.random() * FAKE_USERNAMES.length)];\n        \n        const aiMessage: ChatMessage = {\n          id: `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          userId: `ai_${aiUsername}`,\n          username: aiUsername,\n          message: aiResponse,\n          isAI: true,\n          created_at: new Date().toISOString()\n        };\n\n        await storage.addChatMessage(aiMessage);\n      }\n    }, responseDelay);\n\n    return chatMessage;\n  }\n\n  // Get recent chat messages with fake messages mixed in\n  static async getChatMessages(limit: number = 50): Promise<ChatMessage[]> {\n    const realMessages = await storage.getChatMessages(limit);\n    \n    if (!this.isChatActive()) {\n      return realMessages;\n    }\n\n    // Add some fake messages to make chat feel alive\n    const fakeMessages = this.generateFakeMessages(Math.floor(Math.random() * 3 + 1));\n    \n    // Combine and sort by timestamp\n    const allMessages = [...realMessages, ...fakeMessages]\n      .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n      .slice(-limit);\n\n    return allMessages;\n  }\n\n  // Simulate typing indicators\n  static setTyping(userId: string, isTyping: boolean): void {\n    if (isTyping) {\n      this.typingUsers.add(userId);\n    } else {\n      this.typingUsers.delete(userId);\n    }\n  }\n\n  static getTypingStatus(): string {\n    const count = Math.floor(Math.random() * 5 + 1); // 1-5 users\n    if (Math.random() > 0.7) { // 30% chance of showing typing\n      return `${count} user${count > 1 ? 's' : ''} typing...`;\n    }\n    return '';\n  }\n\n  // Clean up old messages (called periodically)\n  static async cleanupOldMessages(): Promise<void> {\n    const cutoff = new Date();\n    cutoff.setHours(cutoff.getHours() - 2); // Keep messages for 2 hours\n    await storage.cleanupChatMessages(cutoff.toISOString());\n  }\n\n  // Add welcome message to user's inbox\n  static async addWelcomeMessage(userId: string): Promise<void> {\n    // Get welcome message from system settings\n    const settings = await storage.getSystemSettings();\n    const welcomeSettings = settings?.welcome_message || {\n      title: \"🎉 Welcome to Your Investment Success Journey!\",\n      content: `Congratulations on taking the first step toward financial freedom! We're thrilled to welcome you to TradePilot, where advanced technology meets profitable investing.\n\n**Your Journey Begins Now:**\n• Advanced AI technology analyzing thousands of market opportunities daily\n• Consistent profit generation through automated arbitrage strategies\n• Real-time portfolio tracking and performance analytics\n• Bank-level security protecting your investments 24/7\n• Instant access to your earnings with flexible withdrawal options\n• Professional support team dedicated to your success\n\n**Start Earning Today:**\n1. Explore our proven investment plans designed for maximum returns\n2. Choose your preferred investment amount and duration\n3. Watch your portfolio grow with our automated profit generation\n4. Withdraw your earnings anytime with complete flexibility\n\nYou've made a smart decision joining thousands of successful investors who trust TradePilot for their financial growth. Your investment dashboard is ready, and our AI systems are already identifying profitable opportunities for you.\n\n**Ready to transform your financial future?**\nYour personalized dashboard awaits with exclusive investment opportunities.\n\nTo your success,\nThe TradePilot Team 🚀`\n    };\n\n    const welcomeMessage: InboxMessage = {\n      id: `welcome_${userId}_${Date.now()}`,\n      userId,\n      title: welcomeSettings.title,\n      content: welcomeSettings.content,\n      type: \"welcome\",\n      is_read: false,\n      created_at: new Date().toISOString()\n    };\n\n    await storage.addInboxMessage(welcomeMessage);\n  }\n\n  // Add support reply to inbox\n  static async addSupportReply(userId: string, ticketId: string, subject: string, reply: string): Promise<void> {\n    const replyMessage: InboxMessage = {\n      id: `reply_${ticketId}_${Date.now()}`,\n      userId,\n      title: `Re: ${subject}`,\n      content: reply,\n      type: \"support_reply\",\n      is_read: false,\n      ticket_id: ticketId,\n      created_at: new Date().toISOString()\n    };\n\n    await storage.addInboxMessage(replyMessage);\n  }\n\n  // Get user's inbox messages\n  static async getInboxMessages(userId: string): Promise<InboxMessage[]> {\n    return await storage.getInboxMessages(userId);\n  }\n\n  // Mark inbox message as read\n  static async markMessageAsRead(messageId: string): Promise<void> {\n    await storage.markInboxMessageAsRead(messageId);\n  }\n\n  // Get unread message count for notification dot\n  static async getUnreadCount(userId: string): Promise<number> {\n    const messages = await storage.getInboxMessages(userId);\n    return messages.filter(msg => !msg.is_read).length;\n  }\n}\n\n// Start periodic cleanup and fake message generation\nsetInterval(() => {\n  ChatService.cleanupOldMessages();\n}, 30 * 60 * 1000); // Every 30 minutes\n\n// Generate background chatter every 30 minutes during active hours\nsetInterval(async () => {\n  if (ChatService.isChatActive()) {\n    const fakeMessages = ChatService.generateFakeMessages(2);\n    for (const msg of fakeMessages) {\n      await storage.addChatMessage(msg);\n    }\n  }\n}, 30 * 60 * 1000); // Every 30 minutes","size_bytes":12569},"server/services/crypto-service.ts":{"content":"import axios from \"axios\";\n\ninterface CoinGeckoPrice {\n  [coin: string]: {\n    usd: number;\n    usd_24h_change: number;\n  };\n}\n\ninterface ArbitrageOpportunity {\n  symbol: string;\n  name: string;\n  buyExchange: string;\n  sellExchange: string;\n  buyPrice: number;\n  sellPrice: number;\n  profit: number;\n  profitPercentage: number;\n  volume: number;\n}\n\nexport class CryptoService {\n  private static readonly COINGECKO_API = \"https://api.coingecko.com/api/v3\";\n  \n  static async getCryptoPrices() {\n    try {\n      const response = await axios.get(\n        `${this.COINGECKO_API}/simple/price?ids=bitcoin,ethereum,cardano,binancecoin,solana,ripple,polkadot,dogecoin,avalanche-2,polygon&vs_currencies=usd&include_24hr_change=true`,\n        {\n          timeout: 10000,\n          headers: {\n            'Accept': 'application/json',\n            'User-Agent': 'TradePilot/1.0'\n          }\n        }\n      );\n\n      return response.data as CoinGeckoPrice;\n    } catch (error: any) {\n      console.error(\"Error fetching crypto prices:\", error.response?.status, error.message);\n      \n      // Use fallback prices for any API error to ensure service continues\n      console.log(\"API unavailable or rate limited, using fallback prices for uninterrupted service\");\n      return this.getFallbackPrices();\n    }\n  }\n\n  private static getFallbackPrices(): CoinGeckoPrice {\n    // Current market prices as fallback (update these periodically)\n    return {\n      \"bitcoin\": { usd: 67500, usd_24h_change: 2.1 },\n      \"ethereum\": { usd: 3850, usd_24h_change: 1.8 },\n      \"cardano\": { usd: 0.65, usd_24h_change: -0.5 },\n      \"binancecoin\": { usd: 635, usd_24h_change: 0.9 },\n      \"solana\": { usd: 175, usd_24h_change: 3.2 },\n      \"ripple\": { usd: 0.58, usd_24h_change: -1.1 },\n      \"polkadot\": { usd: 7.25, usd_24h_change: 1.5 },\n      \"dogecoin\": { usd: 0.165, usd_24h_change: 2.8 },\n      \"avalanche-2\": { usd: 42, usd_24h_change: 0.7 },\n      \"polygon\": { usd: 1.15, usd_24h_change: -0.3 }\n    };\n  }\n\n  static async getArbitrageOpportunities(): Promise<ArbitrageOpportunity[]> {\n    try {\n      const prices = await this.getCryptoPrices();\n      \n      // Generate realistic arbitrage opportunities based on current prices\n      const opportunities: ArbitrageOpportunity[] = [];\n      \n      const exchanges = [\"Binance\", \"Coinbase\", \"Kraken\", \"OKX\", \"Huobi\", \"Bitfinex\", \"KuCoin\", \"Gate.io\"];\n      const cryptos = [\n        { id: \"bitcoin\", symbol: \"BTC\", name: \"Bitcoin\" },\n        { id: \"ethereum\", symbol: \"ETH\", name: \"Ethereum\" },\n        { id: \"cardano\", symbol: \"ADA\", name: \"Cardano\" },\n        { id: \"binancecoin\", symbol: \"BNB\", name: \"BNB\" },\n        { id: \"solana\", symbol: \"SOL\", name: \"Solana\" },\n        { id: \"ripple\", symbol: \"XRP\", name: \"XRP\" },\n        { id: \"polkadot\", symbol: \"DOT\", name: \"Polkadot\" },\n        { id: \"dogecoin\", symbol: \"DOGE\", name: \"Dogecoin\" },\n        { id: \"avalanche-2\", symbol: \"AVAX\", name: \"Avalanche\" },\n        { id: \"polygon\", symbol: \"MATIC\", name: \"Polygon\" },\n      ];\n\n      for (const crypto of cryptos) {\n        if (prices[crypto.id]) {\n          const basePrice = prices[crypto.id].usd;\n          \n          // Generate 1-2 realistic arbitrage opportunities per major crypto\n          const numOpportunities = crypto.symbol === 'BTC' || crypto.symbol === 'ETH' ? 2 : 1;\n          \n          for (let i = 0; i < numOpportunities; i++) {\n            const buyExchange = exchanges[Math.floor(Math.random() * exchanges.length)];\n            let sellExchange = exchanges[Math.floor(Math.random() * exchanges.length)];\n            while (sellExchange === buyExchange) {\n              sellExchange = exchanges[Math.floor(Math.random() * exchanges.length)];\n            }\n\n            // Generate realistic price differences (0.2% to 2.5% for most profitable opportunities)\n            const priceDifference = 0.002 + Math.random() * 0.023;\n            const buyPrice = basePrice * (1 - priceDifference / 2);\n            const sellPrice = basePrice * (1 + priceDifference / 2);\n            const profitPercentage = ((sellPrice - buyPrice) / buyPrice) * 100;\n\n            // Generate realistic volume based on market cap\n            const baseVolume = crypto.symbol === 'BTC' ? 500 : crypto.symbol === 'ETH' ? 300 : 100;\n            const volume = baseVolume + Math.random() * baseVolume;\n\n            opportunities.push({\n              symbol: `${crypto.symbol}/USDT`,\n              name: crypto.name,\n              buyExchange,\n              sellExchange,\n              buyPrice: Math.round(buyPrice * 100000) / 100000,\n              sellPrice: Math.round(sellPrice * 100000) / 100000,\n              profit: Math.round((sellPrice - buyPrice) * 100000) / 100000,\n              profitPercentage: Math.round(profitPercentage * 100) / 100,\n              volume: Math.round(volume * 100) / 100,\n            });\n          }\n        }\n      }\n\n      // Sort by profit percentage descending and return top opportunities\n      return opportunities.sort((a, b) => b.profitPercentage - a.profitPercentage).slice(0, 15);\n    } catch (error) {\n      console.error(\"Error generating arbitrage opportunities:\", error);\n      \n      // Generate basic opportunities even if price fetching fails\n      console.log(\"Generating backup arbitrage opportunities\");\n      return this.generateBackupOpportunities();\n    }\n  }\n\n  private static generateBackupOpportunities(): ArbitrageOpportunity[] {\n    const fallbackPrices = this.getFallbackPrices();\n    const opportunities: ArbitrageOpportunity[] = [];\n    const exchanges = [\"Binance\", \"Coinbase\", \"Kraken\", \"OKX\"];\n    \n    const cryptos = [\n      { id: \"bitcoin\", symbol: \"BTC\", name: \"Bitcoin\" },\n      { id: \"ethereum\", symbol: \"ETH\", name: \"Ethereum\" },\n      { id: \"solana\", symbol: \"SOL\", name: \"Solana\" },\n    ];\n\n    cryptos.forEach(crypto => {\n      const basePrice = fallbackPrices[crypto.id].usd;\n      const priceDiff = 0.01 + Math.random() * 0.02; // 1-3% difference\n      const buyPrice = basePrice * (1 - priceDiff / 2);\n      const sellPrice = basePrice * (1 + priceDiff / 2);\n      \n      opportunities.push({\n        symbol: `${crypto.symbol}/USDT`,\n        name: crypto.name,\n        buyExchange: \"Binance\",\n        sellExchange: \"Coinbase\", \n        buyPrice: Math.round(buyPrice * 100) / 100,\n        sellPrice: Math.round(sellPrice * 100) / 100,\n        profit: Math.round((sellPrice - buyPrice) * 100) / 100,\n        profitPercentage: Math.round(((sellPrice - buyPrice) / buyPrice) * 10000) / 100,\n        volume: 50 + Math.random() * 100,\n      });\n    });\n\n    return opportunities;\n  }\n\n  static async convertToUSD(amount: number, cryptocurrency: string): Promise<number> {\n    try {\n      const coinIds: { [key: string]: string } = {\n        'BTC': 'bitcoin',\n        'ETH': 'ethereum',\n        'USDT': 'tether',\n      };\n\n      const coinId = coinIds[cryptocurrency.toUpperCase()];\n      if (!coinId) {\n        throw new Error(\"Unsupported cryptocurrency\");\n      }\n\n      if (cryptocurrency.toUpperCase() === 'USDT') {\n        return amount; // USDT is already in USD\n      }\n\n      try {\n        const response = await axios.get(\n          `${this.COINGECKO_API}/simple/price?ids=${coinId}&vs_currencies=usd`,\n          {\n            timeout: 10000,\n            headers: {\n              'Accept': 'application/json',\n              'User-Agent': 'TradePilot/1.0'\n            }\n          }\n        );\n\n        const price = response.data[coinId].usd;\n        return amount * price;\n      } catch (apiError: any) {\n        // If API fails, use fallback prices\n        if (apiError.response?.status === 429) {\n          console.log(\"Rate limited, using fallback price for conversion\");\n          const fallbackPrices = this.getFallbackPrices();\n          const price = fallbackPrices[coinId]?.usd || 1;\n          return amount * price;\n        }\n        throw apiError;\n      }\n    } catch (error) {\n      console.error(\"Error converting to USD:\", error);\n      throw new Error(\"Failed to convert to USD\");\n    }\n  }\n}\n","size_bytes":8020},"server/services/email-service-backup.ts":{"content":"import nodemailer from 'nodemailer';\n\nexport class EmailService {\n  private static transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: 'TradePilota@gmail.com',\n      pass: process.env.GMAIL_APP_PASSWORD || 'xcjx hyyo pmdu wzed'\n    }\n  });\n\n  static generateVerificationCode(): string {\n    return Math.floor(10000 + Math.random() * 90000).toString();\n  }\n\n  static async sendVerificationEmail(email: string, code: string, username: string) {\n    const mailOptions = {\n      from: '\"TradePilot\" <TradePilota@gmail.com>',\n      to: email,\n      subject: '🚀 Verify Your TradePilot Account - Welcome to AI Trading!',\n      html: `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Verify Your TradePilot Account</title>\n          <style>\n            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');\n            \n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            \n            body {\n              font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              padding: 20px;\n              line-height: 1.6;\n            }\n            \n            .container {\n              max-width: 600px;\n              margin: 0 auto;\n              background: #ffffff;\n              border-radius: 20px;\n              overflow: hidden;\n              box-shadow: 0 25px 50px rgba(0,0,0,0.15);\n              animation: fadeIn 0.8s ease-out;\n            }\n            \n            @keyframes fadeIn {\n              from { opacity: 0; transform: translateY(30px); }\n              to { opacity: 1; transform: translateY(0); }\n            }\n            \n            .header {\n              background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 50%, #581c87 100%);\n              padding: 40px 30px;\n              text-align: center;\n              position: relative;\n              overflow: hidden;\n            }\n            \n            .header::before {\n              content: '';\n              position: absolute;\n              top: -50%;\n              left: -50%;\n              width: 200%;\n              height: 200%;\n              background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\n              animation: pulse 4s ease-in-out infinite;\n            }\n            \n            @keyframes pulse {\n              0%, 100% { transform: scale(1) rotate(0deg); }\n              50% { transform: scale(1.1) rotate(180deg); }\n            }\n            \n            .logo {\n              position: relative;\n              z-index: 1;\n            }\n            \n            .logo h1 {\n              color: #ffffff;\n              font-size: 36px;\n              font-weight: 700;\n              margin-bottom: 8px;\n              text-shadow: 0 2px 10px rgba(0,0,0,0.3);\n            }\n            \n            .logo p {\n              color: rgba(255,255,255,0.9);\n              font-size: 16px;\n              font-weight: 400;\n            }\n            \n            .content {\n              padding: 40px 30px;\n            }\n            \n            .welcome-title {\n              font-size: 28px;\n              font-weight: 700;\n              color: #1f2937;\n              margin-bottom: 20px;\n              text-align: center;\n            }\n            \n            .welcome-text {\n              font-size: 18px;\n              color: #6b7280;\n              text-align: center;\n              margin-bottom: 40px;\n            }\n            \n            .otp-section {\n              background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n              border: 2px solid #e5e7eb;\n              border-radius: 15px;\n              padding: 30px;\n              text-align: center;\n              margin: 40px 0;\n              position: relative;\n            }\n            \n            .otp-label {\n              font-size: 16px;\n              color: #374151;\n              margin-bottom: 15px;\n              font-weight: 600;\n            }\n            \n            .otp-code {\n              background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n              color: white;\n              font-size: 36px;\n              font-weight: 700;\n              padding: 20px 40px;\n              border-radius: 12px;\n              letter-spacing: 8px;\n              font-family: 'Monaco', 'Consolas', monospace;\n              display: inline-block;\n              margin-bottom: 15px;\n              box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);\n              animation: glow 2s ease-in-out infinite alternate;\n            }\n            \n            @keyframes glow {\n              from { box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3); }\n              to { box-shadow: 0 10px 35px rgba(59, 130, 246, 0.6); }\n            }\n            \n            .copy-button {\n              background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n              color: white;\n              border: none;\n              padding: 12px 24px;\n              border-radius: 8px;\n              font-size: 14px;\n              font-weight: 600;\n              margin-left: 15px;\n              display: inline-block;\n              cursor: pointer;\n              transition: all 0.3s ease;\n            }\n            \n            .copy-button:hover {\n              transform: translateY(-2px);\n              box-shadow: 0 5px 15px rgba(16, 185, 129, 0.4);\n            }\n            \n            .expire-text {\n              font-size: 14px;\n              color: #ef4444;\n              margin-top: 10px;\n              font-weight: 500;\n            }\n            \n            .features {\n              background: #f9fafb;\n              border-radius: 12px;\n              padding: 30px;\n              margin: 30px 0;\n            }\n            \n            .features h3 {\n              color: #1f2937;\n              font-size: 20px;\n              font-weight: 600;\n              margin-bottom: 20px;\n              text-align: center;\n            }\n            \n            .features ul {\n              list-style: none;\n            }\n            \n            .features li {\n              padding: 8px 0;\n              color: #4b5563;\n              position: relative;\n              padding-left: 25px;\n            }\n            \n            .features li::before {\n              content: '✓';\n              position: absolute;\n              left: 0;\n              color: #10b981;\n              font-weight: bold;\n              font-size: 18px;\n            }\n            \n            .cta-button {\n              display: inline-block;\n              background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n              color: white;\n              text-decoration: none;\n              padding: 18px 40px;\n              border-radius: 12px;\n              font-weight: 600;\n              font-size: 16px;\n              text-align: center;\n              margin: 30px auto;\n              display: block;\n              width: fit-content;\n              transition: all 0.3s ease;\n              box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);\n            }\n            \n            .partners {\n              background: #1f2937;\n              padding: 40px 30px;\n              text-align: center;\n            }\n            \n            .partners h3 {\n              color: white;\n              font-size: 18px;\n              margin-bottom: 25px;\n              font-weight: 600;\n            }\n            \n            .partner-logos {\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              flex-wrap: wrap;\n              gap: 30px;\n            }\n            \n            .partner-logo {\n              width: 80px;\n              height: 40px;\n              background: white;\n              border-radius: 8px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: 600;\n              color: #1f2937;\n              font-size: 12px;\n              transition: all 0.3s ease;\n              opacity: 0.8;\n            }\n            \n            .footer {\n              background: #111827;\n              color: #9ca3af;\n              text-align: center;\n              padding: 30px;\n              font-size: 14px;\n            }\n            \n            .footer p {\n              margin-bottom: 10px;\n            }\n            \n            .footer .company {\n              color: white;\n              font-weight: 600;\n            }\n            \n            @media (max-width: 600px) {\n              body { padding: 10px; }\n              .container { border-radius: 15px; }\n              .header { padding: 30px 20px; }\n              .content { padding: 30px 20px; }\n              .otp-code { font-size: 28px; padding: 15px 25px; letter-spacing: 4px; }\n              .partner-logos { gap: 20px; }\n              .partner-logo { width: 60px; height: 35px; font-size: 10px; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <div class=\"logo\">\n                <h1>TradePilot</h1>\n                <p>AI-Powered Crypto Arbitrage Trading</p>\n              </div>\n            </div>\n            \n            <div class=\"content\">\n              <h2 class=\"welcome-title\">Welcome to TradePilot, ${username}!</h2>\n              <p class=\"welcome-text\">\n                Congratulations on taking the first step toward automated crypto trading success! \n                We're thrilled to have you join our community of smart traders who are already earning \n                consistent profits through AI-powered arbitrage opportunities.\n              </p>\n              \n              <p style=\"font-size: 16px; color: #4b5563; text-align: center; margin-bottom: 30px;\">\n                To activate your account and start accessing real-time trading opportunities, \n                we need to verify your email address. This security step ensures your account \n                remains protected and you receive important trading notifications.\n              </p>\n              \n              <div class=\"otp-section\">\n                <div class=\"otp-label\">Your Email Verification Code</div>\n                <div class=\"otp-code\" id=\"otpCode\">${code}</div>\n                <button class=\"copy-button\" onclick=\"copyCode()\" id=\"copyBtn\">Tap and hold to copy code</button>\n                <div class=\"expire-text\">⏰ This code expires in 15 minutes for your security</div>\n                <p style=\"font-size: 14px; color: #6b7280; margin-top: 15px; line-height: 1.5;\">\n                  Simply copy this code and paste it into the verification page that opened after registration. \n                  Once verified, you'll immediately gain access to your personalized trading dashboard.\n                </p>\n              </div>\n              \n              <div style=\"text-align: center; padding: 25px; background: #fef7ed; border-radius: 12px; margin: 30px 0;\">\n                <p style=\"color: #92400e; font-size: 14px; margin: 0; line-height: 1.6;\">\n                  🛡️ <strong>Security Notice:</strong> If you didn't create a TradePilot account, please disregard this email. \n                  Your email address will not be used for any further communications. We take your privacy and security seriously.\n                </p>\n              </div>\n            </div>\n            \n            <div class=\"partners\">\n              <h3>🤝 Trusted Exchange Partners</h3>\n              <div class=\"partner-logos\">\n                <div class=\"partner-logo\">Binance</div>\n                <div class=\"partner-logo\">Coinbase</div>\n                <div class=\"partner-logo\">Kraken</div>\n                <div class=\"partner-logo\">Huobi</div>\n                <div class=\"partner-logo\">OKX</div>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <p>Questions? Our support team is available 24/7 to help you get started.</p>\n              <p class=\"company\">© 2025 TradePilot. All rights reserved.</p>\n              <p>🔒 Bank-Level Security • 📊 Real-Time Analytics • 🌍 Trusted by 50,000+ traders worldwide</p>\n              <p style=\"font-size: 12px; margin-top: 15px; opacity: 0.8;\">\n                This email was sent to verify your TradePilot account registration. \n                Our systems use advanced encryption to protect your data.\n              </p>\n            </div>\n          </div>\n        </body>\n        </html>\n      `\n    };\n\n    try {\n      await this.transporter.sendMail(mailOptions);\n      console.log(`Verification email sent to ${email} with code: ${code}`);\n    } catch (error) {\n      console.error('Failed to send verification email:', error);\n      throw new Error('Failed to send verification email');\n    }\n  }\n\n  static async sendPasswordResetEmail(email: string, code: string, username: string) {\n    const mailOptions = {\n      from: '\"TradePilot\" <TradePilota@gmail.com>',\n      to: email,\n      subject: '🔐 Reset Your TradePilot Password - Security Alert',\n      html: `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Reset Your TradePilot Password</title>\n          <style>\n            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');\n            \n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            \n            body {\n              font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);\n              padding: 20px;\n              line-height: 1.6;\n            }\n            \n            .container {\n              max-width: 600px;\n              margin: 0 auto;\n              background: #ffffff;\n              border-radius: 20px;\n              overflow: hidden;\n              box-shadow: 0 25px 50px rgba(0,0,0,0.15);\n              animation: fadeIn 0.8s ease-out;\n            }\n            \n            @keyframes fadeIn {\n              from { opacity: 0; transform: translateY(30px); }\n              to { opacity: 1; transform: translateY(0); }\n            }\n            \n            .header {\n              background: linear-gradient(135deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%);\n              padding: 40px 30px;\n              text-align: center;\n              position: relative;\n              overflow: hidden;\n            }\n            \n            .header::before {\n              content: '';\n              position: absolute;\n              top: -50%;\n              left: -50%;\n              width: 200%;\n              height: 200%;\n              background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\n              animation: pulse 4s ease-in-out infinite;\n            }\n            \n            @keyframes pulse {\n              0%, 100% { transform: scale(1) rotate(0deg); }\n              50% { transform: scale(1.1) rotate(180deg); }\n            }\n            \n            .logo {\n              position: relative;\n              z-index: 1;\n            }\n            \n            .logo h1 {\n              color: #ffffff;\n              font-size: 36px;\n              font-weight: 700;\n              margin-bottom: 8px;\n              text-shadow: 0 2px 10px rgba(0,0,0,0.3);\n            }\n            \n            .logo p {\n              color: rgba(255,255,255,0.9);\n              font-size: 16px;\n              font-weight: 400;\n            }\n            \n            .content {\n              padding: 40px 30px;\n            }\n            \n            .reset-title {\n              font-size: 28px;\n              font-weight: 700;\n              color: #dc2626;\n              margin-bottom: 20px;\n              text-align: center;\n            }\n            \n            .reset-text {\n              font-size: 18px;\n              color: #6b7280;\n              text-align: center;\n              margin-bottom: 40px;\n            }\n            \n            .otp-section {\n              background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);\n              border: 2px solid #fecaca;\n              border-radius: 15px;\n              padding: 30px;\n              text-align: center;\n              margin: 40px 0;\n              position: relative;\n            }\n            \n            .otp-label {\n              font-size: 16px;\n              color: #991b1b;\n              margin-bottom: 15px;\n              font-weight: 600;\n            }\n            \n            .otp-code {\n              background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\n              color: white;\n              font-size: 36px;\n              font-weight: 700;\n              padding: 20px 40px;\n              border-radius: 12px;\n              letter-spacing: 8px;\n              font-family: 'Monaco', 'Consolas', monospace;\n              display: inline-block;\n              margin-bottom: 15px;\n              box-shadow: 0 10px 25px rgba(239, 68, 68, 0.3);\n              animation: glow 2s ease-in-out infinite alternate;\n            }\n            \n            @keyframes glow {\n              from { box-shadow: 0 10px 25px rgba(239, 68, 68, 0.3); }\n              to { box-shadow: 0 10px 35px rgba(239, 68, 68, 0.6); }\n            }\n            \n            .copy-button {\n              background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n              color: white;\n              border: none;\n              padding: 12px 24px;\n              border-radius: 8px;\n              font-size: 14px;\n              font-weight: 600;\n              margin-left: 15px;\n              display: inline-block;\n              cursor: pointer;\n              transition: all 0.3s ease;\n            }\n            \n            .copy-button:hover {\n              transform: translateY(-2px);\n              box-shadow: 0 5px 15px rgba(245, 158, 11, 0.4);\n            }\n            \n            .expire-text {\n              font-size: 14px;\n              color: #dc2626;\n              margin-top: 10px;\n              font-weight: 500;\n            }\n            \n            .security-notice {\n              background: #f3f4f6;\n              border-radius: 12px;\n              padding: 30px;\n              margin: 30px 0;\n            }\n            \n            .security-notice h3 {\n              color: #1f2937;\n              font-size: 20px;\n              font-weight: 600;\n              margin-bottom: 15px;\n              text-align: center;\n            }\n            \n            .security-notice p {\n              color: #4b5563;\n              font-size: 16px;\n              text-align: center;\n              line-height: 1.6;\n            }\n            \n            .cta-button {\n              display: inline-block;\n              background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);\n              color: white;\n              text-decoration: none;\n              padding: 18px 40px;\n              border-radius: 12px;\n              font-weight: 600;\n              font-size: 16px;\n              text-align: center;\n              margin: 30px auto;\n              display: block;\n              width: fit-content;\n              transition: all 0.3s ease;\n              box-shadow: 0 10px 25px rgba(220, 38, 38, 0.3);\n            }\n            \n            .partners {\n              background: #1f2937;\n              padding: 40px 30px;\n              text-align: center;\n            }\n            \n            .partners h3 {\n              color: white;\n              font-size: 18px;\n              margin-bottom: 25px;\n              font-weight: 600;\n            }\n            \n            .partner-logos {\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              flex-wrap: wrap;\n              gap: 30px;\n            }\n            \n            .partner-logo {\n              width: 80px;\n              height: 40px;\n              background: white;\n              border-radius: 8px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: 600;\n              color: #1f2937;\n              font-size: 12px;\n              opacity: 0.8;\n            }\n            \n            .footer {\n              background: #111827;\n              color: #9ca3af;\n              text-align: center;\n              padding: 30px;\n              font-size: 14px;\n            }\n            \n            .footer p {\n              margin-bottom: 10px;\n            }\n            \n            .footer .company {\n              color: white;\n              font-weight: 600;\n            }\n            \n            @media (max-width: 600px) {\n              body { padding: 10px; }\n              .container { border-radius: 15px; }\n              .header { padding: 30px 20px; }\n              .content { padding: 30px 20px; }\n              .otp-code { font-size: 28px; padding: 15px 25px; letter-spacing: 4px; }\n              .partner-logos { gap: 20px; }\n              .partner-logo { width: 60px; height: 35px; font-size: 10px; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <div class=\"logo\">\n                <h1>TradePilot</h1>\n                <p>Password Reset Security</p>\n              </div>\n            </div>\n            \n            <div class=\"content\">\n              <h2 class=\"reset-title\">Password Reset Request</h2>\n              <p class=\"reset-text\">\n                Hello ${username}, we received a request to reset your TradePilot account password. \n                No worries - this happens to the best of us! We're here to help you regain secure \n                access to your trading account quickly and safely.\n              </p>\n              \n              <p style=\"font-size: 16px; color: #4b5563; text-align: center; margin-bottom: 30px;\">\n                To proceed with creating a new password, please use the verification code below. \n                This ensures only you can access and modify your account security settings.\n              </p>\n              \n              <div class=\"otp-section\">\n                <div class=\"otp-label\">Your Password Reset Code</div>\n                <div class=\"otp-code\" id=\"otpCodeReset\">${code}</div>\n                <button class=\"copy-button\" onclick=\"copyResetCode()\" id=\"copyBtnReset\">Tap and hold to copy code</button>\n                <div class=\"expire-text\">⏰ This code expires in 15 minutes for your security</div>\n                <p style=\"font-size: 14px; color: #6b7280; margin-top: 15px; line-height: 1.5;\">\n                  Copy this code and return to the password reset page where you initiated this request. \n                  Enter the code along with your new secure password to complete the reset process.\n                </p>\n              </div>\n              \n              <div style=\"background: #f0f9ff; border-left: 4px solid #dc2626; padding: 20px; margin: 30px 0; border-radius: 8px;\">\n                <p style=\"color: #b91c1c; font-size: 16px; margin: 0; font-weight: 500;\">\n                  💡 <strong>Password Security Tip:</strong> Choose a strong password with at least 8 characters, \n                  including uppercase, lowercase, numbers, and special characters for maximum security.\n                </p>\n              </div>\n              \n              <a href=\"#\" class=\"cta-button\">🔒 Reset My Password</a>\n              \n              <div class=\"security-notice\">\n                <h3>🛡️ Important Security Notice</h3>\n                <p>\n                  If you didn't request this password reset, please ignore this email - your account remains secure. \n                  However, if you're concerned about unauthorized access attempts, we recommend logging into your \n                  account and changing your password as a precautionary measure.\n                </p>\n              </div>\n              \n              <div style=\"text-align: center; padding: 25px; background: #fef7ed; border-radius: 12px; margin: 30px 0;\">\n                <p style=\"color: #92400e; font-size: 14px; margin: 0; line-height: 1.6;\">\n                  🔐 <strong>Account Protection:</strong> After resetting your password, consider enabling two-factor \n                  authentication in your account settings for an extra layer of security on your trading account.\n                </p>\n              </div>\n            </div>\n            \n            <div class=\"partners\">\n              <h3>🤝 Trusted Exchange Partners</h3>\n              <div class=\"partner-logos\">\n                <div class=\"partner-logo\">Binance</div>\n                <div class=\"partner-logo\">Coinbase</div>\n                <div class=\"partner-logo\">Kraken</div>\n                <div class=\"partner-logo\">Huobi</div>\n                <div class=\"partner-logo\">OKX</div>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <p>Need help? Our security team is available 24/7 to assist with account recovery.</p>\n              <p class=\"company\">© 2025 TradePilot. All rights reserved.</p>\n              <p>🔒 Bank-Level Security • 🛡️ Advanced Encryption • 🌍 Trusted by 50,000+ traders worldwide</p>\n              <p style=\"font-size: 12px; margin-top: 15px; opacity: 0.8;\">\n                This password reset was requested for your TradePilot account security. \n                We use industry-standard encryption to protect all account communications.\n              </p>\n            </div>\n          </div>\n        </body>\n        </html>\n      `\n    };\n\n    try {\n      await this.transporter.sendMail(mailOptions);\n      console.log(`Password reset email sent to ${email} with code: ${code}`);\n    } catch (error) {\n      console.error('Failed to send password reset email:', error);\n      throw new Error('Failed to send password reset email');\n    }\n  }\n}","size_bytes":26410},"server/services/email-service.ts":{"content":"import nodemailer from 'nodemailer';\n\nexport class EmailService {\n  private static transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: 'TradePilota@gmail.com',\n      pass: process.env.GMAIL_APP_PASSWORD || 'xcjx hyyo pmdu wzed'\n    }\n  });\n\n  static generateVerificationCode(): string {\n    return Math.floor(10000 + Math.random() * 90000).toString();\n  }\n\n  static async sendVerificationEmail(email: string, code: string, username: string) {\n    const mailOptions = {\n      from: '\"TradePilot\" <TradePilota@gmail.com>',\n      to: email,\n      subject: 'Verify Your TradePilot Account',\n      html: `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Verify Your TradePilot Account</title>\n          <style>\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            \n            body {\n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n              background-color: #f8fafc;\n              padding: 20px;\n              line-height: 1.6;\n            }\n            \n            .container {\n              max-width: 600px;\n              margin: 0 auto;\n              background: #ffffff;\n              border-radius: 12px;\n              overflow: hidden;\n              box-shadow: 0 4px 24px rgba(0,0,0,0.1);\n            }\n            \n            .header {\n              background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);\n              padding: 32px 24px;\n              text-align: center;\n            }\n            \n            .logo h1 {\n              color: #ffffff;\n              font-size: 28px;\n              font-weight: 700;\n              margin-bottom: 4px;\n            }\n            \n            .logo p {\n              color: rgba(255,255,255,0.9);\n              font-size: 14px;\n              font-weight: 400;\n            }\n            \n            .content {\n              padding: 32px 24px;\n            }\n            \n            .greeting {\n              font-size: 18px;\n              font-weight: 600;\n              color: #1f2937;\n              margin-bottom: 16px;\n            }\n            \n            .message {\n              font-size: 16px;\n              color: #6b7280;\n              margin-bottom: 32px;\n            }\n            \n            .code-section {\n              background: #f8fafc;\n              border: 2px solid #e5e7eb;\n              border-radius: 12px;\n              padding: 24px;\n              text-align: center;\n              margin: 32px 0;\n            }\n            \n            .code-label {\n              font-size: 16px;\n              color: #374151;\n              margin-bottom: 16px;\n              font-weight: 600;\n            }\n            \n            .verification-code {\n              background: #1e3a8a;\n              color: white;\n              font-size: 32px;\n              font-weight: 700;\n              padding: 16px 32px;\n              border-radius: 8px;\n              letter-spacing: 4px;\n              font-family: 'Monaco', 'Consolas', monospace;\n              display: inline-block;\n              margin: 8px 0;\n            }\n            \n            .footer {\n              background: #f8fafc;\n              color: #6b7280;\n              text-align: center;\n              padding: 24px;\n              font-size: 12px;\n              border-top: 1px solid #e5e7eb;\n            }\n            \n            @media (max-width: 600px) {\n              body { padding: 10px; }\n              .container { border-radius: 15px; }\n              .header { padding: 30px 20px; }\n              .content { padding: 30px 20px; }\n              .otp-code { font-size: 28px; padding: 15px 25px; letter-spacing: 4px; }\n              .partner-logos { gap: 20px; }\n              .partner-logo { width: 60px; height: 35px; font-size: 10px; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <div class=\"logo\">\n                <h1>TradePilot</h1>\n                <p>AI-Powered Crypto Arbitrage Trading</p>\n              </div>\n            </div>\n            \n            <div class=\"content\">\n              <div class=\"greeting\">Hello ${username},</div>\n              <p class=\"message\">\n                Here is your verification code to complete your registration.\n              </p>\n              \n              <div class=\"code-section\">\n                <div class=\"code-label\">Verification Code</div>\n                <div class=\"verification-code\">${code}</div>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <p>If you did not request this, please ignore this email.</p>\n              <p>© 2025 TradePilot. All rights reserved.</p>\n            </div>\n          </div>\n        </body>\n        </html>\n      `\n    };\n\n    try {\n      await this.transporter.sendMail(mailOptions);\n      console.log(`Verification email sent to ${email} with code: ${code}`);\n    } catch (error) {\n      console.error('Failed to send verification email:', error);\n      throw new Error('Failed to send verification email');\n    }\n  }\n\n  static async sendPasswordResetEmail(email: string, code: string, username: string) {\n    const mailOptions = {\n      from: '\"TradePilot\" <TradePilota@gmail.com>',\n      to: email,\n      subject: 'Reset Your TradePilot Password',\n      html: `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Reset Your TradePilot Password</title>\n          <style>\n            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');\n            \n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            \n            body {\n              font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);\n              padding: 20px;\n              line-height: 1.6;\n            }\n            \n            .container {\n              max-width: 600px;\n              margin: 0 auto;\n              background: #ffffff;\n              border-radius: 20px;\n              overflow: hidden;\n              box-shadow: 0 25px 50px rgba(0,0,0,0.15);\n              animation: fadeIn 0.8s ease-out;\n            }\n            \n            @keyframes fadeIn {\n              from { opacity: 0; transform: translateY(30px); }\n              to { opacity: 1; transform: translateY(0); }\n            }\n            \n            .header {\n              background: linear-gradient(135deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%);\n              padding: 40px 30px;\n              text-align: center;\n              position: relative;\n              overflow: hidden;\n            }\n            \n            .header::before {\n              content: '';\n              position: absolute;\n              top: -50%;\n              left: -50%;\n              width: 200%;\n              height: 200%;\n              background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\n              animation: pulse 4s ease-in-out infinite;\n            }\n            \n            @keyframes pulse {\n              0%, 100% { transform: scale(1) rotate(0deg); }\n              50% { transform: scale(1.1) rotate(180deg); }\n            }\n            \n            .logo {\n              position: relative;\n              z-index: 1;\n            }\n            \n            .logo h1 {\n              color: #ffffff;\n              font-size: 36px;\n              font-weight: 700;\n              margin-bottom: 8px;\n              text-shadow: 0 2px 10px rgba(0,0,0,0.3);\n            }\n            \n            .logo p {\n              color: rgba(255,255,255,0.9);\n              font-size: 16px;\n              font-weight: 400;\n            }\n            \n            .content {\n              padding: 40px 30px;\n            }\n            \n            .reset-title {\n              font-size: 28px;\n              font-weight: 700;\n              color: #dc2626;\n              margin-bottom: 20px;\n              text-align: center;\n            }\n            \n            .reset-text {\n              font-size: 18px;\n              color: #6b7280;\n              text-align: center;\n              margin-bottom: 40px;\n            }\n            \n            .otp-section {\n              background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);\n              border: 2px solid #fecaca;\n              border-radius: 15px;\n              padding: 30px;\n              text-align: center;\n              margin: 40px 0;\n              position: relative;\n            }\n            \n            .otp-label {\n              font-size: 16px;\n              color: #991b1b;\n              margin-bottom: 15px;\n              font-weight: 600;\n            }\n            \n            .otp-code {\n              background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\n              color: white;\n              font-size: 36px;\n              font-weight: 700;\n              padding: 20px 40px;\n              border-radius: 12px;\n              letter-spacing: 8px;\n              font-family: 'Monaco', 'Consolas', monospace;\n              display: inline-block;\n              margin-bottom: 15px;\n              box-shadow: 0 10px 25px rgba(239, 68, 68, 0.3);\n              animation: glow 2s ease-in-out infinite alternate;\n            }\n            \n            @keyframes glow {\n              from { box-shadow: 0 10px 25px rgba(239, 68, 68, 0.3); }\n              to { box-shadow: 0 10px 35px rgba(239, 68, 68, 0.6); }\n            }\n            \n            .copy-button {\n              background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n              color: white;\n              border: none;\n              padding: 12px 24px;\n              border-radius: 8px;\n              font-size: 14px;\n              font-weight: 600;\n              margin-left: 15px;\n              display: inline-block;\n              cursor: pointer;\n              transition: all 0.3s ease;\n            }\n            \n            .copy-button:hover {\n              transform: translateY(-2px);\n              box-shadow: 0 5px 15px rgba(245, 158, 11, 0.4);\n            }\n            \n            .expire-text {\n              font-size: 14px;\n              color: #dc2626;\n              margin-top: 10px;\n              font-weight: 500;\n            }\n            \n            .partners {\n              background: #1f2937;\n              padding: 40px 30px;\n              text-align: center;\n            }\n            \n            .partners h3 {\n              color: white;\n              font-size: 18px;\n              margin-bottom: 25px;\n              font-weight: 600;\n            }\n            \n            .partner-logos {\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              flex-wrap: wrap;\n              gap: 30px;\n            }\n            \n            .partner-logo {\n              width: 80px;\n              height: 40px;\n              background: white;\n              border-radius: 8px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: 600;\n              color: #1f2937;\n              font-size: 12px;\n              opacity: 0.8;\n            }\n            \n            .footer {\n              background: #111827;\n              color: #9ca3af;\n              text-align: center;\n              padding: 30px;\n              font-size: 14px;\n            }\n            \n            .footer p {\n              margin-bottom: 10px;\n            }\n            \n            .footer .company {\n              color: white;\n              font-weight: 600;\n            }\n            \n            @media (max-width: 600px) {\n              body { padding: 10px; }\n              .container { border-radius: 15px; }\n              .header { padding: 30px 20px; }\n              .content { padding: 30px 20px; }\n              .otp-code { font-size: 28px; padding: 15px 25px; letter-spacing: 4px; }\n              .partner-logos { gap: 20px; }\n              .partner-logo { width: 60px; height: 35px; font-size: 10px; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <div class=\"logo\">\n                <h1>TradePilot</h1>\n                <p>Password Reset Security</p>\n              </div>\n            </div>\n            \n            <div class=\"content\">\n              <h2 class=\"reset-title\">Password Reset Request</h2>\n              <p class=\"reset-text\">\n                Hello ${username}, we received a request to reset your TradePilot account password. \n                No worries - this happens to the best of us! We're here to help you regain secure \n                access to your trading account quickly and safely.\n              </p>\n              \n              <p style=\"font-size: 16px; color: #4b5563; text-align: center; margin-bottom: 30px;\">\n                To proceed with creating a new password, please use the verification code below. \n                This ensures only you can access and modify your account security settings.\n              </p>\n              \n              <div class=\"otp-section\">\n                <div class=\"otp-label\">Your Password Reset Code</div>\n                <div class=\"otp-code\" id=\"otpCodeReset\">${code}</div>\n                <button class=\"copy-button\" onclick=\"copyResetCode()\" id=\"copyBtnReset\">Tap and hold to copy code</button>\n                <div class=\"expire-text\">⏰ This code expires in 15 minutes for your security</div>\n                <p style=\"font-size: 14px; color: #6b7280; margin-top: 15px; line-height: 1.5;\">\n                  Copy this code and return to the password reset page where you initiated this request. \n                  Enter the code along with your new secure password to complete the reset process.\n                </p>\n              </div>\n              \n              <div style=\"text-align: center; padding: 25px; background: #fef7ed; border-radius: 12px; margin: 30px 0;\">\n                <p style=\"color: #92400e; font-size: 14px; margin: 0; line-height: 1.6;\">\n                  🛡️ <strong>Security Notice:</strong> If you didn't request this password reset, please ignore this email - your account remains secure. \n                  However, if you're concerned about unauthorized access attempts, we recommend logging into your \n                  account and changing your password as a precautionary measure.\n                </p>\n              </div>\n            </div>\n            \n            <div class=\"partners\">\n              <h3>🤝 Trusted Exchange Partners</h3>\n              <div class=\"partner-logos\">\n                <div class=\"partner-logo\">Binance</div>\n                <div class=\"partner-logo\">Coinbase</div>\n                <div class=\"partner-logo\">Kraken</div>\n                <div class=\"partner-logo\">Huobi</div>\n                <div class=\"partner-logo\">OKX</div>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <p>Need help? Our security team is available 24/7 to assist with account recovery.</p>\n              <p class=\"company\">© 2025 TradePilot. All rights reserved.</p>\n              <p>🔒 Bank-Level Security • 🛡️ Advanced Encryption • 🌍 Trusted by 50,000+ traders worldwide</p>\n              <p style=\"font-size: 12px; margin-top: 15px; opacity: 0.8;\">\n                This password reset was requested for your TradePilot account security. \n                We use industry-standard encryption to protect all account communications.\n              </p>\n            </div>\n          </div>\n          \n          <script>\n            function copyResetCode() {\n              const code = document.getElementById('otpCodeReset').textContent.trim();\n              if (navigator.clipboard && window.isSecureContext) {\n                navigator.clipboard.writeText(code).then(() => {\n                  const button = document.getElementById('copyBtnReset');\n                  button.innerHTML = '✅ Copied!';\n                  setTimeout(() => {\n                    button.innerHTML = 'Tap and hold to copy code';\n                  }, 2000);\n                }).catch(() => {\n                  fallbackCopyTextToClipboard(code);\n                });\n              } else {\n                fallbackCopyTextToClipboard(code);\n              }\n            }\n            \n            function fallbackCopyTextToClipboard(text) {\n              const textArea = document.createElement(\"textarea\");\n              textArea.value = text;\n              textArea.style.position = \"fixed\";\n              textArea.style.left = \"-999999px\";\n              textArea.style.top = \"-999999px\";\n              document.body.appendChild(textArea);\n              textArea.focus();\n              textArea.select();\n              try {\n                document.execCommand('copy');\n                const button = document.getElementById('copyBtnReset');\n                button.innerHTML = '✅ Copied!';\n                setTimeout(() => {\n                  button.innerHTML = 'Tap and hold to copy code';\n                }, 2000);\n              } catch (err) {\n                const button = document.getElementById('copyBtnReset');\n                button.innerHTML = '📝 Select & Copy';\n                setTimeout(() => {\n                  button.innerHTML = 'Tap and hold to copy code';\n                }, 2000);\n              }\n              document.body.removeChild(textArea);\n            }\n          </script>\n        </body>\n        </html>\n      `\n    };\n\n    try {\n      await this.transporter.sendMail(mailOptions);\n      console.log(`Password reset email sent to ${email} with code: ${code}`);\n    } catch (error) {\n      console.error('Failed to send password reset email:', error);\n      throw new Error('Failed to send password reset email');\n    }\n  }\n\n\n  static async sendWelcomeEmail(email: string, username: string, dashboardUrl?: string, requestOrigin?: string) {\n    // Get dynamic email welcome settings\n    const { FileStorage } = await import('../storage');\n    const storage = new FileStorage();\n    const settings = await storage.getSystemSettings();\n    const emailSettings = settings?.email_welcome || {\n      subject: \"🚀 Welcome to TradePilot - Your AI Investment Dashboard is Ready!\",\n      title: \"Welcome to Your Success Story\",\n      subtitle: \"Your AI-powered investment journey starts now\",\n      benefits: [\n        {\n          \"title\": \"AI-Powered Returns\", \n          \"description\": \"Advanced algorithms execute profitable trades automatically, maximizing your investment potential\"\n        },\n        {\n          \"title\": \"Daily Profit Generation\",\n          \"description\": \"Watch your balance grow with consistent returns generated by our sophisticated trading systems\"\n        }\n      ],\n      steps: [\n        \"Access your personalized investment dashboard\",\n        \"Explore our high-performance investment plans\"\n      ],\n      cta_text: \"🎯 Access Your Investment Dashboard\",\n      footer_message: \"Welcome to the future of intelligent investing. Your success is our mission.\"\n    };\n\n    // Auto-detect domain from request origin or environment\n    const detectedDomain = dashboardUrl || \n      requestOrigin ||\n      (process.env.REPLIT_DOMAINS ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}` : null) ||\n      process.env.REPLIT_APP_DOMAIN ||\n      (process.env.REPLIT_APP_DOMAIN ? `https://${process.env.REPLIT_APP_DOMAIN}` : null) ||\n      // Fallback to detected environment\n      'https://localhost:5000';\n    \n    const dashboardLink = `${detectedDomain}/dashboard`;\n    const mailOptions = {\n      from: '\"TradePilot\" <TradePilota@gmail.com>',\n      to: email,\n      subject: emailSettings.subject,\n      html: `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Welcome to TradePilot</title>\n          <style>\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            \n            body {\n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n              background-color: #f8fafc;\n              padding: 20px;\n              line-height: 1.6;\n            }\n            \n            .container {\n              max-width: 600px;\n              margin: 0 auto;\n              background: #ffffff;\n              border-radius: 12px;\n              overflow: hidden;\n              box-shadow: 0 4px 24px rgba(0,0,0,0.1);\n            }\n            \n            .header {\n              background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);\n              padding: 40px 24px;\n              text-align: center;\n            }\n            \n            .logo h1 {\n              color: #ffffff;\n              font-size: 32px;\n              font-weight: 700;\n              margin-bottom: 8px;\n            }\n            \n            .logo p {\n              color: rgba(255,255,255,0.9);\n              font-size: 16px;\n              font-weight: 400;\n            }\n            \n            .welcome-badge {\n              background: rgba(255,255,255,0.15);\n              color: #ffffff;\n              padding: 8px 16px;\n              border-radius: 20px;\n              font-size: 14px;\n              font-weight: 600;\n              margin-top: 16px;\n              display: inline-block;\n            }\n            \n            .content {\n              padding: 40px 32px;\n            }\n            \n            .greeting {\n              font-size: 24px;\n              font-weight: 700;\n              color: #1f2937;\n              margin-bottom: 16px;\n              text-align: center;\n            }\n            \n            .subheading {\n              font-size: 18px;\n              color: #6b7280;\n              margin-bottom: 32px;\n              text-align: center;\n            }\n            \n            .benefits {\n              background: #f8fafc;\n              border-radius: 12px;\n              padding: 24px;\n              margin: 32px 0;\n            }\n            \n            .benefits h3 {\n              color: #1f2937;\n              font-size: 18px;\n              font-weight: 600;\n              margin-bottom: 16px;\n            }\n            \n            .benefit-item {\n              display: flex;\n              align-items: flex-start;\n              margin-bottom: 12px;\n            }\n            \n            .benefit-icon {\n              width: 20px;\n              height: 20px;\n              background: #10b981;\n              border-radius: 50%;\n              margin-right: 12px;\n              margin-top: 2px;\n              flex-shrink: 0;\n              position: relative;\n            }\n            \n            .benefit-icon::after {\n              content: '✓';\n              position: absolute;\n              top: 50%;\n              left: 50%;\n              transform: translate(-50%, -50%);\n              color: white;\n              font-size: 12px;\n              font-weight: bold;\n            }\n            \n            .benefit-text {\n              color: #4b5563;\n              font-size: 16px;\n              line-height: 1.5;\n            }\n            \n            .steps {\n              background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\n              border-radius: 12px;\n              padding: 24px;\n              margin: 32px 0;\n            }\n            \n            .steps h3 {\n              color: #1e3a8a;\n              font-size: 18px;\n              font-weight: 600;\n              margin-bottom: 16px;\n            }\n            \n            .step-item {\n              display: flex;\n              align-items: flex-start;\n              margin-bottom: 16px;\n            }\n            \n            .step-number {\n              width: 24px;\n              height: 24px;\n              background: #3b82f6;\n              color: white;\n              border-radius: 50%;\n              font-size: 14px;\n              font-weight: 600;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              margin-right: 12px;\n              flex-shrink: 0;\n            }\n            \n            .step-text {\n              color: #1e3a8a;\n              font-size: 16px;\n              font-weight: 500;\n              line-height: 1.5;\n            }\n            \n            .cta-section {\n              text-align: center;\n              margin: 32px 0;\n            }\n            \n            .cta-button {\n              background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n              color: #ffffff;\n              text-decoration: none;\n              padding: 16px 32px;\n              border-radius: 8px;\n              font-size: 16px;\n              font-weight: 600;\n              display: inline-block;\n              box-shadow: 0 4px 16px rgba(59, 130, 246, 0.3);\n              transition: all 0.3s ease;\n            }\n            \n            .cta-button:hover {\n              transform: translateY(-2px);\n              box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);\n            }\n            \n            .footer {\n              background: #f9fafb;\n              padding: 32px 24px;\n              text-align: center;\n              border-top: 1px solid #e5e7eb;\n            }\n            \n            .footer-text {\n              color: #6b7280;\n              font-size: 14px;\n              margin-bottom: 16px;\n            }\n            \n            .social-links {\n              margin: 16px 0;\n            }\n            \n            .security-badge {\n              background: #10b981;\n              color: white;\n              padding: 8px 16px;\n              border-radius: 20px;\n              font-size: 12px;\n              font-weight: 600;\n              display: inline-block;\n              margin-top: 16px;\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <div class=\"logo\">\n                <h1>TradePilot</h1>\n                <p>Your Gateway to Crypto Success</p>\n                <div class=\"welcome-badge\">🎉 Account Verified Successfully!</div>\n              </div>\n            </div>\n            \n            <div class=\"content\">\n              <div class=\"greeting\">${emailSettings.title}, ${username}!</div>\n              <div class=\"subheading\">${emailSettings.subtitle}</div>\n              \n              <div class=\"benefits\">\n                <h3>💎 Your TradePilot Advantages:</h3>\n                <div class=\"benefit-item\">\n                  <div class=\"benefit-icon\"></div>\n                  <div class=\"benefit-text\"><strong>AI-Powered Trading:</strong> Advanced algorithms execute profitable arbitrage trades automatically</div>\n                </div>\n                <div class=\"benefit-item\">\n                  <div class=\"benefit-icon\"></div>\n                  <div class=\"benefit-text\"><strong>Daily Profit Generation:</strong> Watch your balance grow with consistent returns every day</div>\n                </div>\n                <div class=\"benefit-item\">\n                  <div class=\"benefit-icon\"></div>\n                  <div class=\"benefit-text\"><strong>Real-Time Analytics:</strong> Monitor market opportunities and your performance 24/7</div>\n                </div>\n                <div class=\"benefit-item\">\n                  <div class=\"benefit-icon\"></div>\n                  <div class=\"benefit-text\"><strong>Secure Environment:</strong> Bank-grade security ensures your investments are protected</div>\n                </div>\n                <div class=\"benefit-item\">\n                  <div class=\"benefit-icon\"></div>\n                  <div class=\"benefit-text\"><strong>Flexible Withdrawals:</strong> Access your profits anytime with instant processing</div>\n                </div>\n              </div>\n              \n              <div class=\"steps\">\n                <h3>🎯 Your Next Steps to Success:</h3>\n                <div class=\"step-item\">\n                  <div class=\"step-number\">1</div>\n                  <div class=\"step-text\">Log in to your dashboard and explore our investment plans</div>\n                </div>\n                <div class=\"step-item\">\n                  <div class=\"step-number\">2</div>\n                  <div class=\"step-text\">Choose a plan that fits your investment goals</div>\n                </div>\n                <div class=\"step-item\">\n                  <div class=\"step-number\">3</div>\n                  <div class=\"step-text\">Make your first deposit and watch your profits grow</div>\n                </div>\n                <div class=\"step-item\">\n                  <div class=\"step-number\">4</div>\n                  <div class=\"step-text\">Track your daily earnings and withdraw anytime</div>\n                </div>\n              </div>\n              \n              <div class=\"cta-section\">\n                <a href=\"${dashboardUrl || process.env.REPLIT_APP_DOMAIN || 'https://tradepilot.com'}/dashboard\" class=\"cta-button\">\n                  🚀 Access Your Dashboard\n                </a>\n                <p style=\"margin-top: 16px; color: #6b7280; font-size: 14px;\">\n                  Start your profitable investment journey today with TradePilot's advanced trading system\n                </p>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <p class=\"footer-text\">\n                Thank you for choosing TradePilot. We're committed to your financial success.\n              </p>\n              <div class=\"security-badge\">🔒 Secure & Regulated Platform</div>\n              <p style=\"color: #9ca3af; font-size: 12px; margin-top: 24px;\">\n                This email was sent to ${email}. TradePilot - Your Trusted Investment Partner.\n              </p>\n            </div>\n          </div>\n        </body>\n        </html>\n      `\n    };\n\n    try {\n      await this.transporter.sendMail(mailOptions);\n      console.log(`Welcome email sent to ${email}`);\n    } catch (error) {\n      console.error('Failed to send welcome email:', error);\n      throw new Error('Failed to send welcome email');\n    }\n  }\n}","size_bytes":30802},"server/services/investment-service.ts":{"content":"import { storage } from \"../storage\";\nimport type { UserInvestment } from \"@shared/schema\";\n\nexport class InvestmentService {\n  // Process daily returns for all active investments\n  static async processDailyReturns(): Promise<void> {\n    try {\n      const investments = await storage.getAllInvestments();\n      const activeInvestments = investments.filter(inv => inv.is_active && inv.days_remaining > 0);\n\n      console.log(`Processing daily returns for ${activeInvestments.length} active investments`);\n\n      for (const investment of activeInvestments) {\n        const user = await storage.getUser(investment.userId);\n        if (!user) continue;\n\n        // Calculate days since investment started (calendar days, not 24-hour periods)\n        const now = new Date();\n        const investmentStartDate = new Date(investment.created_at);\n        \n        // Calculate calendar days difference\n        const startDate = new Date(investmentStartDate.getFullYear(), investmentStartDate.getMonth(), investmentStartDate.getDate());\n        const currentDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        const daysSinceStart = Math.floor((currentDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n        \n        // Calculate expected total earnings based on days passed\n        const maxDays = 30; // Standard investment duration\n        const completedDays = Math.min(daysSinceStart, maxDays);\n        const expectedTotalEarnings = completedDays * investment.daily_return;\n        \n        // Check if user is behind on earnings\n        if (expectedTotalEarnings > investment.total_earned) {\n          const missingEarnings = expectedTotalEarnings - investment.total_earned;\n          \n          // Add missing earnings to user balance\n          const newBalance = user.balance + missingEarnings;\n          await storage.updateUser(investment.userId, { balance: newBalance });\n\n          // Update investment tracking\n          const newDaysRemaining = Math.max(0, maxDays - completedDays);\n          const updatedInvestment = {\n            ...investment,\n            total_earned: expectedTotalEarnings,\n            days_remaining: newDaysRemaining,\n            is_active: newDaysRemaining > 0\n          };\n\n          await storage.updateUserInvestment(investment.id, updatedInvestment);\n\n          console.log(`💰 Credited ${user.username}: $${missingEarnings.toFixed(2)} (Day ${completedDays}, Total: $${expectedTotalEarnings.toFixed(2)})`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error processing daily returns:\", error);\n    }\n  }\n\n  // Manual trigger for testing daily returns (can be called from API for demo purposes)\n  static async processDailyReturnsNow(): Promise<{ processed: number; totalCredited: number }> {\n    try {\n      const investments = await storage.getAllInvestments();\n      const activeInvestments = investments.filter(inv => inv.is_active && inv.days_remaining > 0);\n      \n      let processedCount = 0;\n      let totalCredited = 0;\n\n      for (const investment of activeInvestments) {\n        const user = await storage.getUser(investment.userId);\n        if (!user) continue;\n\n        // Force credit one day's return for demonstration\n        const dailyReturn = investment.daily_return;\n        const newBalance = user.balance + dailyReturn;\n        \n        await storage.updateUser(investment.userId, { balance: newBalance });\n\n        const updatedInvestment = {\n          ...investment,\n          total_earned: investment.total_earned + dailyReturn,\n          days_remaining: Math.max(0, investment.days_remaining - 1),\n          is_active: investment.days_remaining > 1\n        };\n\n        await storage.updateUserInvestment(investment.id, updatedInvestment);\n\n        processedCount++;\n        totalCredited += dailyReturn;\n        console.log(`Manual credit for ${user.username}: $${dailyReturn.toFixed(2)}`);\n      }\n\n      return { processed: processedCount, totalCredited };\n    } catch (error) {\n      console.error(\"Error in manual daily returns processing:\", error);\n      return { processed: 0, totalCredited: 0 };\n    }\n  }\n\n  // Check if it's 1:00 AM in user's local time\n  static isUserLocalTime1AM(userTimezone: string): boolean {\n    try {\n      const now = new Date();\n      const localTime = new Date(now.toLocaleString(\"en-US\", {timeZone: userTimezone}));\n      return localTime.getHours() === 1;\n    } catch (error) {\n      console.error(`Error checking time for timezone ${userTimezone}:`, error);\n      return false;\n    }\n  }\n\n  // Process returns for users where it's 1:00 AM local time\n  static async processReturnsForLocalTime(): Promise<void> {\n    try {\n      const investments = await storage.getAllInvestments();\n      const activeInvestments = investments.filter(inv => inv.is_active && inv.days_remaining > 0);\n      \n      let processedCount = 0;\n\n      for (const investment of activeInvestments) {\n        const user = await storage.getUser(investment.userId);\n        if (!user || !(user as any).timezone) continue;\n        \n        // Check if it's 1:00 AM in the user's timezone\n        if (InvestmentService.isUserLocalTime1AM((user as any).timezone)) {\n          // Check if user already received profit today\n          const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n          const lastProfitDate = (investment as any).last_profit_date;\n          \n          if (lastProfitDate === today) {\n            continue; // Already processed today\n          }\n          \n          // Credit daily return\n          const dailyReturn = investment.daily_return;\n          const newBalance = user.balance + dailyReturn;\n          await storage.updateUser(investment.userId, { balance: newBalance });\n\n          // Update investment\n          const newDaysRemaining = Math.max(0, investment.days_remaining - 1);\n          const updatedInvestment = {\n            ...investment,\n            total_earned: investment.total_earned + dailyReturn,\n            days_remaining: newDaysRemaining,\n            is_active: newDaysRemaining > 0,\n            last_profit_date: today\n          };\n\n          await storage.updateUserInvestment(investment.id, updatedInvestment);\n          \n          processedCount++;\n          console.log(`🕐 1:00 AM Daily Profit for ${user.username} (${(user as any).timezone}): $${dailyReturn.toFixed(2)} - Day ${30 - newDaysRemaining}`);\n        }\n      }\n      \n      if (processedCount > 0) {\n        console.log(`Processed ${processedCount} users at their local 1:00 AM`);\n      }\n    } catch (error) {\n      console.error(\"Error processing local time returns:\", error);\n    }\n  }\n\n  // Start the daily return processing service\n  static startDailyReturnService(): void {\n    // Process timezone-based returns every 15 minutes to catch 1:00 AM for all timezones\n    setInterval(async () => {\n      await InvestmentService.processReturnsForLocalTime();\n    }, 15 * 60 * 1000); // Every 15 minutes\n\n    // Keep the backup catchup processing every 4 hours for any missed payments\n    setInterval(async () => {\n      await InvestmentService.processDailyReturns();\n    }, 4 * 60 * 60 * 1000); // Every 4 hours\n\n    console.log(\"Daily return service started - timezone-based profits every 15 minutes, catchup every 4 hours\");\n    \n    // Run immediate processing on startup\n    setTimeout(async () => {\n      console.log(\"Running initial daily returns processing...\");\n      await InvestmentService.processReturnsForLocalTime();\n      await InvestmentService.processDailyReturns();\n    }, 5000); // Wait 5 seconds after startup\n  }\n}","size_bytes":7603},"server/services/location-service.ts":{"content":"export class LocationService {\n  private static countryNames: { [key: string]: string } = {\n    'US': 'United States',\n    'CA': 'Canada',\n    'GB': 'United Kingdom',\n    'DE': 'Germany', \n    'FR': 'France',\n    'JP': 'Japan',\n    'AU': 'Australia',\n    'IN': 'India',\n    'NG': 'Nigeria',\n    'KE': 'Kenya',\n    'ZA': 'South Africa',\n    'BR': 'Brazil',\n    'MX': 'Mexico',\n    'CN': 'China',\n    'RU': 'Russia',\n    'IT': 'Italy',\n    'ES': 'Spain',\n    'NL': 'Netherlands',\n    'BE': 'Belgium',\n    'CH': 'Switzerland',\n    'AT': 'Austria',\n    'SE': 'Sweden',\n    'NO': 'Norway',\n    'DK': 'Denmark',\n    'FI': 'Finland',\n    'PT': 'Portugal',\n    'GR': 'Greece',\n    'PL': 'Poland',\n    'CZ': 'Czech Republic',\n    'HU': 'Hungary',\n    'RO': 'Romania',\n    'BG': 'Bulgaria',\n    'HR': 'Croatia',\n    'SI': 'Slovenia',\n    'SK': 'Slovakia',\n    'LT': 'Lithuania',\n    'LV': 'Latvia',\n    'EE': 'Estonia',\n    'IE': 'Ireland',\n    'LU': 'Luxembourg',\n    'MT': 'Malta',\n    'CY': 'Cyprus',\n    'IS': 'Iceland',\n    'TR': 'Turkey',\n    'IL': 'Israel',\n    'AE': 'United Arab Emirates',\n    'SA': 'Saudi Arabia',\n    'EG': 'Egypt',\n    'MA': 'Morocco',\n    'TN': 'Tunisia',\n    'DZ': 'Algeria',\n    'LY': 'Libya',\n    'SD': 'Sudan',\n    'ET': 'Ethiopia',\n    'UG': 'Uganda',\n    'TZ': 'Tanzania',\n    'RW': 'Rwanda',\n    'BW': 'Botswana',\n    'ZW': 'Zimbabwe',\n    'ZM': 'Zambia',\n    'MW': 'Malawi',\n    'MZ': 'Mozambique',\n    'MG': 'Madagascar',\n    'MU': 'Mauritius',\n    'SC': 'Seychelles',\n    'KR': 'South Korea',\n    'TH': 'Thailand',\n    'VN': 'Vietnam',\n    'MY': 'Malaysia',\n    'SG': 'Singapore',\n    'ID': 'Indonesia',\n    'PH': 'Philippines',\n    'BD': 'Bangladesh',\n    'PK': 'Pakistan',\n    'LK': 'Sri Lanka',\n    'NP': 'Nepal',\n    'MM': 'Myanmar',\n    'KH': 'Cambodia',\n    'LA': 'Laos',\n    'BN': 'Brunei',\n    'MN': 'Mongolia',\n    'NZ': 'New Zealand',\n    'FJ': 'Fiji',\n    'PG': 'Papua New Guinea',\n    'SB': 'Solomon Islands',\n    'VU': 'Vanuatu',\n    'NC': 'New Caledonia',\n    'PF': 'French Polynesia',\n    'AR': 'Argentina',\n    'CL': 'Chile',\n    'PE': 'Peru',\n    'CO': 'Colombia',\n    'VE': 'Venezuela',\n    'EC': 'Ecuador',\n    'BO': 'Bolivia',\n    'PY': 'Paraguay',\n    'UY': 'Uruguay',\n    'GY': 'Guyana',\n    'SR': 'Suriname',\n    'GF': 'French Guiana',\n    'CR': 'Costa Rica',\n    'PA': 'Panama',\n    'NI': 'Nicaragua',\n    'HN': 'Honduras',\n    'GT': 'Guatemala',\n    'BZ': 'Belize',\n    'SV': 'El Salvador',\n    'CU': 'Cuba',\n    'JM': 'Jamaica',\n    'HT': 'Haiti',\n    'DO': 'Dominican Republic',\n    'PR': 'Puerto Rico',\n    'TT': 'Trinidad and Tobago',\n    'BB': 'Barbados',\n    'GD': 'Grenada',\n    'LC': 'Saint Lucia',\n    'VC': 'Saint Vincent and the Grenadines',\n    'AG': 'Antigua and Barbuda',\n    'KN': 'Saint Kitts and Nevis',\n    'DM': 'Dominica',\n    'BS': 'Bahamas',\n    'Unknown': 'Unknown'\n  };\n\n  static extractRealClientIP(req: any): string {\n    // Try to extract real client IP from various headers\n    const forwardedFor = req.headers['x-forwarded-for'];\n    const realIP = req.headers['x-real-ip'];\n    const cfConnectingIP = req.headers['cf-connecting-ip']; // Cloudflare\n    const requestIP = req.ip || req.connection.remoteAddress;\n\n    let userIP = '';\n    \n    if (forwardedFor) {\n      if (typeof forwardedFor === 'string') {\n        userIP = forwardedFor.split(',')[0].trim();\n      } else if (Array.isArray(forwardedFor)) {\n        userIP = forwardedFor[0];\n      }\n    } else if (realIP) {\n      userIP = realIP as string;\n    } else if (cfConnectingIP) {\n      userIP = cfConnectingIP as string;\n    } else if (requestIP) {\n      if (typeof requestIP === 'string') {\n        userIP = requestIP.split(',')[0].trim();\n      } else if (Array.isArray(requestIP)) {\n        userIP = requestIP[0];\n      }\n    }\n\n    // Fallback for development/localhost\n    if (!userIP || userIP === '::1' || userIP === '127.0.0.1' || userIP.includes('localhost') || userIP.startsWith('172.') || userIP.startsWith('10.') || userIP.startsWith('192.168.')) {\n      userIP = '8.8.8.8'; // Use Google DNS as fallback for testing\n    }\n\n    return userIP;\n  }\n\n  static async detectUserCountry(ip: string): Promise<string> {\n    // Handle internal/localhost IPs\n    if (!ip || ip === '::1' || ip === '127.0.0.1' || ip.includes('localhost') || ip.startsWith('172.') || ip.startsWith('10.') || ip.startsWith('192.168.')) {\n      return \"United States\"; // Default for local/internal IPs\n    }\n\n    // Use ipinfo.io API with provided token for accurate country detection\n    try {\n      const response = await fetch(`https://ipinfo.io/${ip}?token=6947dad7055b04`);\n      if (response.ok) {\n        const data = await response.json();\n        if (data.bogon) {\n          // Handle bogon (internal) IPs\n          return \"United States\";\n        }\n        const countryCode = data.country || \"US\";\n        // Return full country name instead of country code\n        return this.countryNames[countryCode] || countryCode;\n      }\n    } catch (error) {\n      console.error(\"Failed to detect country:\", error);\n    }\n    return \"United States\"; // Default fallback\n  }\n\n  static detectTimezone(): string {\n    // Get timezone from browser or use UTC as fallback\n    try {\n      return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } catch {\n      return \"UTC\";\n    }\n  }\n\n  static getCountryName(countryCode: string): string {\n    return this.countryNames[countryCode] || countryCode;\n  }\n}","size_bytes":5432},"client/src/components/floating-contact-button.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MessageCircle, X, Bot, Headphones } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface FloatingContactButtonProps {\n  onChatClick?: () => void;\n}\n\nexport function FloatingContactButton({ onChatClick }: FloatingContactButtonProps) {\n  const [showWelcomePopup, setShowWelcomePopup] = useState(false);\n  const [showMainModal, setShowMainModal] = useState(false);\n  const [showGreetingBubble, setShowGreetingBubble] = useState(false);\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  // Show greeting bubble immediately when user visits dashboard\n  useEffect(() => {\n    if (user?.id) {\n      const currentUserId = sessionStorage.getItem('tradepilot-current-user');\n      const greetingShown = sessionStorage.getItem('tradepilot-greeting-shown') === 'true';\n      \n      // Show greeting if:\n      // 1. No greeting shown yet for this session, OR\n      // 2. Different user logged in\n      if (!greetingShown || currentUserId !== user.id) {\n        // Update session tracking\n        sessionStorage.setItem('tradepilot-current-user', user.id);\n        sessionStorage.setItem('tradepilot-greeting-shown', 'true');\n        \n        // Show greeting bubble immediately\n        setShowGreetingBubble(true);\n        \n        // Auto-hide greeting bubble after 6 seconds\n        const timer = setTimeout(() => {\n          setShowGreetingBubble(false);\n        }, 6000);\n\n        return () => clearTimeout(timer);\n      }\n    } else {\n      // User logged out - clear session storage\n      sessionStorage.removeItem('tradepilot-greeting-shown');\n      sessionStorage.removeItem('tradepilot-current-user');\n      setShowGreetingBubble(false);\n    }\n  }, [user?.id]);\n\n  const handleButtonClick = () => {\n    setShowMainModal(true);\n    onChatClick?.();\n  };\n\n  const handleChatClick = () => {\n    setShowMainModal(false);\n    // Navigate to AI chat which will automatically trigger the first message\n    setLocation('/ai-chat');\n  };\n\n  const handleSupportClick = () => {\n    setShowMainModal(false);\n    setLocation('/support');\n  };\n\n  return (\n    <>\n      <div className=\"fixed bottom-24 right-6 z-50\">\n        {/* Greeting Bubble on Hover */}\n        <AnimatePresence>\n          {showGreetingBubble && user && (\n            <motion.div\n              initial={{ \n                opacity: 0, \n                scale: 0.3,\n                x: 50, \n                y: 20,\n                originX: 1,\n                originY: 1\n              }}\n              animate={{ \n                opacity: 1, \n                scale: 1, \n                x: 0, \n                y: 0 \n              }}\n              exit={{ \n                opacity: 0, \n                scale: 0.3,\n                x: 50, \n                y: 20,\n                transition: { duration: 0.4, ease: \"easeInOut\" }\n              }}\n              transition={{ \n                duration: 0.6, \n                type: \"spring\", \n                damping: 18, \n                stiffness: 280 \n              }}\n              className=\"absolute bottom-20 right-0 w-64 mb-2 z-10\"\n            >\n              <div className=\"relative\">\n                {/* Soft glow effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-blue-200/40 via-purple-200/40 to-cyan-200/40 rounded-2xl blur-xl\"></div>\n                \n                {/* Main greeting bubble */}\n                <div className=\"relative bg-white/95 dark:bg-white/90 backdrop-blur-sm rounded-2xl px-4 py-3 shadow-xl border border-gray-200/80\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"text-xl animate-bounce\">👋</div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-gray-800 dark:text-gray-800 text-sm font-medium\">\n                        Hi {user.username}! TradePilot AI is ready to chat\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Subtle inner glow */}\n                  <div className=\"absolute inset-0 rounded-2xl bg-gradient-to-br from-blue-50/50 via-transparent to-purple-50/50 pointer-events-none\"></div>\n                </div>\n                \n                {/* Enhanced pointer tail pointing toward the floating icon */}\n                <div className=\"absolute bottom-0 right-6 transform translate-y-full\">\n                  <div className=\"w-0 h-0 border-l-[12px] border-l-transparent border-r-[12px] border-r-transparent border-t-[12px] border-t-white/95 dark:border-t-white/90 filter drop-shadow-sm\"></div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Welcome Popup */}\n        <AnimatePresence>\n          {showWelcomePopup && (\n            <motion.div\n              initial={{ \n                opacity: 0, \n                scale: 0.3, \n                x: 20, \n                y: 20,\n                originX: 1,\n                originY: 1\n              }}\n              animate={{ \n                opacity: 1, \n                scale: 1, \n                x: 0, \n                y: 0 \n              }}\n              exit={{ \n                opacity: 0, \n                scale: 0.3, \n                x: 20, \n                y: 20,\n                transition: { duration: 0.3, ease: \"easeIn\" }\n              }}\n              transition={{ \n                duration: 0.6, \n                type: \"spring\", \n                damping: 15, \n                stiffness: 300 \n              }}\n              className=\"absolute bottom-20 right-0 w-80 mb-2\"\n            >\n              <div className=\"relative\">\n                {/* Glow effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/30 via-blue-500/30 to-purple-600/30 rounded-2xl blur-xl\"></div>\n                \n                {/* Main popup */}\n                <div className=\"relative bg-gray-900/95 backdrop-blur-xl border border-gray-700/30 rounded-2xl p-5 shadow-2xl\">\n                  {/* Decorative elements */}\n                  <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-600 rounded-t-2xl\"></div>\n                  <div className=\"absolute -top-2 left-6 w-4 h-4 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full animate-pulse\"></div>\n                  \n                  <div className=\"flex items-start gap-4\">\n                    {/* AI Icon */}\n                    <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-cyan-400 via-blue-500 to-purple-600 flex items-center justify-center shadow-lg flex-shrink-0 animate-pulse\">\n                      <Bot className=\"w-6 h-6 text-white\" />\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"text-white font-semibold text-base mb-1\">\n                        TradePilot AI Assistant 🚀\n                      </h3>\n                      <p className=\"text-gray-300 text-sm leading-relaxed\">\n                        Your intelligent crypto trading companion is ready to help with market analysis, strategies, and trading insights!\n                      </p>\n                      \n                      {/* Action button */}\n                      <button\n                        onClick={() => {\n                          setShowWelcomePopup(false);\n                          setLocation('/ai-chat');\n                        }}\n                        className=\"mt-3 px-3 py-1.5 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 text-white text-xs font-medium rounded-lg transition-all duration-200 hover:scale-105 hover:shadow-lg\"\n                      >\n                        Start Chat 💬\n                      </button>\n                    </div>\n                    \n                    {/* Close button */}\n                    <button\n                      onClick={() => setShowWelcomePopup(false)}\n                      className=\"text-gray-400 hover:text-white transition-all duration-200 hover:scale-110 p-1 rounded-lg hover:bg-gray-700/50\"\n                      data-testid=\"button-close-welcome\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                  \n                  {/* Bottom accent line */}\n                  <div className=\"absolute bottom-0 left-0 w-full h-0.5 bg-gradient-to-r from-transparent via-cyan-400/50 to-transparent rounded-b-2xl\"></div>\n                </div>\n                \n                {/* Pointer tail sliding from button */}\n                <div className=\"absolute bottom-0 right-6 w-0 h-0 border-l-[10px] border-l-transparent border-r-[10px] border-r-transparent border-t-[10px] border-t-gray-900/95 transform translate-y-full\"></div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Floating Button */}\n        <motion.div\n          whileHover={{ \n            scale: 1.05, \n            y: -3,\n            transition: { duration: 0.2 }\n          }}\n          whileTap={{ scale: 0.95 }}\n          animate={{\n            scale: [1, 1.05, 1],\n          }}\n          transition={{\n            duration: 3,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n          className=\"relative\"\n        >\n          <Button\n            size=\"sm\"\n            className=\"h-14 w-14 rounded-full bg-gradient-to-br from-emerald-500 via-blue-500 to-purple-600 hover:from-emerald-400 hover:via-blue-400 hover:to-purple-500 text-white shadow-2xl hover:shadow-3xl transition-all duration-300 border-2 border-white/30 transform hover:scale-110 hover:-translate-y-2 active:scale-95\"\n            style={{\n              boxShadow: 'inset 0 1px 0 rgba(255,255,255,0.3), 0 4px 12px rgba(0,0,0,0.3), 0 8px 24px rgba(0,0,0,0.2)'\n            }}\n            onClick={handleButtonClick}\n            data-testid=\"button-floating-contact\"\n          >\n            {/* 3D Chat Bubble */}\n            <div className=\"relative w-8 h-8\">\n              {/* Main chat bubble */}\n              <div className=\"absolute inset-0 rounded-xl bg-gradient-to-br from-white via-gray-50 to-gray-100 shadow-lg border border-gray-200/50 transform rotate-3\">\n                {/* Chat lines */}\n                <div className=\"absolute top-2 left-2 right-2 space-y-1\">\n                  <div className=\"h-0.5 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full\"></div>\n                  <div className=\"h-0.5 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full w-4/5\"></div>\n                  <div className=\"h-0.5 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full w-3/5\"></div>\n                </div>\n                {/* Inner shadow for depth */}\n                <div className=\"absolute inset-0 rounded-xl shadow-inner bg-gradient-to-br from-transparent via-transparent to-black/5\"></div>\n              </div>\n              \n              {/* Chat bubble tail */}\n              <div className=\"absolute -bottom-1 left-2 w-2 h-2 bg-gradient-to-br from-white to-gray-100 transform rotate-45 border-r border-b border-gray-200/50\"></div>\n              \n              {/* Notification dot */}\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-gradient-to-br from-red-400 to-red-600 rounded-full shadow-lg border border-white/50 animate-pulse\"></div>\n              \n              {/* Highlight effect */}\n              <div className=\"absolute -inset-1 rounded-xl bg-gradient-to-tr from-white/20 via-transparent to-transparent pointer-events-none\"></div>\n            </div>\n          </Button>\n          \n          {/* Notification dot removed - notifications only show on profile icon and inbox */}\n        </motion.div>\n      </div>\n\n      {/* Full-screen Modal */}\n      <AnimatePresence>\n        {showMainModal && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[100] flex items-center justify-center p-6\"\n            onClick={() => setShowMainModal(false)}\n          >\n            <motion.div\n              initial={{ opacity: 0, scale: 0.95, y: 10 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.95, y: 10 }}\n              transition={{ duration: 0.3, type: \"spring\", damping: 20, stiffness: 300 }}\n              className=\"w-full max-w-sm mx-auto relative px-4 sm:px-0\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              {/* Decorative Background Elements */}\n              <div className=\"absolute -inset-2 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-emerald-600/20 rounded-2xl blur-lg\"></div>\n              \n              <div className=\"relative bg-gray-900/95 backdrop-blur-xl border border-gray-700/50 rounded-xl shadow-2xl overflow-hidden\">\n                {/* Header */}\n                <div className=\"text-center pt-6 pb-4 px-4\">\n                  <motion.div\n                    initial={{ scale: 0, rotate: -180 }}\n                    animate={{ scale: 1, rotate: 0 }}\n                    transition={{ delay: 0.1, type: \"spring\", stiffness: 300 }}\n                    className=\"w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-blue-500 via-purple-500 to-emerald-500 rounded-xl flex items-center justify-center shadow-lg\"\n                  >\n                    <MessageCircle className=\"w-6 h-6 text-white\" />\n                  </motion.div>\n                  <h2 className=\"text-xl sm:text-2xl font-bold bg-gradient-to-r from-white via-blue-100 to-purple-100 bg-clip-text text-transparent mb-2\">\n                    TradePilot Support\n                  </h2>\n                  <p className=\"text-gray-300 text-sm\">Get help with your crypto trading journey</p>\n                </div>\n\n                <div className=\"px-4 pb-6 space-y-3\">\n                  {/* AI Chat Card */}\n                  <motion.div\n                    whileHover={{ scale: 1.02, y: -2 }}\n                    whileTap={{ scale: 0.98 }}\n                    className=\"group\"\n                  >\n                    <Card \n                      className=\"bg-gradient-to-r from-blue-600/90 to-cyan-600/90 border-0 cursor-pointer transition-all duration-200 group-hover:shadow-lg\"\n                      onClick={handleChatClick}\n                      data-testid=\"card-ai-chat\"\n                    >\n                      <CardContent className=\"p-4 text-white\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                            <Bot className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-base font-semibold mb-1\">TradePilot AI Assistant</h3>\n                            <p className=\"text-blue-100 text-xs leading-tight\">\n                              Smart AI assistant\n                            </p>\n                          </div>\n                          <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse flex-shrink-0\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n\n                  {/* Contact Support Card */}\n                  <motion.div\n                    whileHover={{ scale: 1.02, y: -2 }}\n                    whileTap={{ scale: 0.98 }}\n                    className=\"group\"\n                  >\n                    <Card \n                      className=\"bg-gradient-to-r from-purple-600/90 to-pink-600/90 border-0 cursor-pointer transition-all duration-200 group-hover:shadow-lg\"\n                      onClick={handleSupportClick}\n                      data-testid=\"card-support\"\n                    >\n                      <CardContent className=\"p-4 text-white\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                            <Headphones className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-base font-semibold mb-1\">Human Support</h3>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                </div>\n\n                {/* Close button */}\n                <div className=\"border-t border-gray-700/50 p-3\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setShowMainModal(false)}\n                    className=\"w-full text-gray-400 hover:text-white hover:bg-gray-700/50 transition-all duration-200 text-sm\"\n                    data-testid=\"button-close-modal\"\n                  >\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Close\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}","size_bytes":17746},"client/src/components/scroll-to-top.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function ScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Scroll to top whenever the location changes\n    window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\n  }, [location]);\n\n  return null;\n}","size_bytes":319},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { getAuthState, setAuthState, clearAuthState } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  balance: number;\n  referralCode: string;\n  isAdmin: boolean;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string, recaptchaToken?: string) => Promise<void>;\n  register: (userData: {\n    username: string;\n    email: string;\n    password: string;\n    confirmPassword?: string;\n    referralCode?: string;\n    recaptchaToken?: string;\n  }) => Promise<void>;\n  logout: () => void;\n  refreshUser: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const refreshUser = async () => {\n    try {\n      const response = await apiRequest(\"GET\", \"/api/auth/me\");\n      const userData = await response.json();\n      setUser(userData);\n      // Also update stored auth state\n      const { token } = getAuthState();\n      if (token) {\n        setAuthState({ user: userData, token });\n      }\n    } catch (error) {\n      console.error(\"Failed to refresh user data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    const { user: storedUser, token } = getAuthState();\n    if (storedUser && token) {\n      setUser(storedUser);\n      // Refresh user data from server to get latest balance\n      refreshUser();\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string, recaptchaToken?: string) => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n      email,\n      password,\n      recaptchaToken,\n    });\n\n    const data = await response.json();\n    setAuthState({ user: data.user, token: data.token });\n    setUser(data.user);\n    \n    // Ensure state is updated before resolving\n    await new Promise(resolve => setTimeout(resolve, 100));\n  };\n\n  const register = async (userData: {\n    username: string;\n    email: string;\n    password: string;\n    confirmPassword?: string;\n    referralCode?: string;\n    recaptchaToken?: string;\n  }) => {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n\n    const data = await response.json();\n    // Don't set user or token until email is verified\n    return data;\n  };\n\n  const logout = () => {\n    clearAuthState();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, register, logout, refreshUser, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3010},"client/src/hooks/use-crypto-prices.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getCryptoPrices, getArbitrageOpportunities } from \"@/lib/crypto-api\";\n\nexport function useCryptoPrices() {\n  return useQuery({\n    queryKey: [\"/api/crypto/prices\"],\n    queryFn: getCryptoPrices,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n}\n\nexport function useArbitrageOpportunities() {\n  return useQuery({\n    queryKey: [\"/api/crypto/arbitrage\"],\n    queryFn: getArbitrageOpportunities,\n    refetchInterval: 4000, // Refresh every 4 seconds as specified\n  });\n}\n","size_bytes":541},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-recaptcha.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\n\ninterface RecaptchaSettings {\n  enabled: boolean;\n  siteKey: string;\n}\n\nexport function useRecaptcha() {\n  const { data: settings, isLoading } = useQuery<RecaptchaSettings>({\n    queryKey: [\"/api/auth/recaptcha-settings\"],\n    queryFn: () => fetchWithAuth(\"/auth/recaptcha-settings\"),\n  });\n\n  return {\n    isEnabled: settings?.enabled || false,\n    siteKey: settings?.siteKey || \"\",\n    isLoading,\n  };\n}","size_bytes":506},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"interface User {\n  id: string;\n  username: string;\n  email: string;\n  balance: number;\n  referralCode: string;\n  isAdmin: boolean;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n}\n\nconst AUTH_STORAGE_KEY = \"tradepilot_auth\";\n\nexport function getAuthState(): AuthState {\n  try {\n    const stored = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.error(\"Error parsing auth state:\", error);\n  }\n  return { user: null, token: null };\n}\n\nexport function setAuthState(state: AuthState) {\n  localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(state));\n}\n\nexport function clearAuthState() {\n  localStorage.removeItem(AUTH_STORAGE_KEY);\n}\n\nexport function getAuthHeaders(): Record<string, string> {\n  const { token } = getAuthState();\n  return token ? { Authorization: `Bearer ${token}` } : {};\n}\n\nexport function isAuthenticated(): boolean {\n  const { token } = getAuthState();\n  return !!token;\n}\n\nexport function isAdmin(): boolean {\n  const { user } = getAuthState();\n  return user?.isAdmin ?? false;\n}\n","size_bytes":1146},"client/src/lib/crypto-api.ts":{"content":"import { getAuthHeaders } from \"./auth\";\n\nconst API_BASE = \"/api\";\n\nexport async function fetchWithAuth(url: string, options: RequestInit = {}) {\n  const headers: HeadersInit = {\n    \"Content-Type\": \"application/json\",\n    ...getAuthHeaders(),\n    ...(options.headers || {}),\n  };\n\n  const response = await fetch(`${API_BASE}${url}`, {\n    ...options,\n    headers,\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: \"Network error\" }));\n    throw new Error(error.message || \"Request failed\");\n  }\n\n  return response.json();\n}\n\nexport async function getCryptoPrices() {\n  return fetchWithAuth(\"/crypto/prices\");\n}\n\nexport async function getArbitrageOpportunities() {\n  return fetchWithAuth(\"/crypto/arbitrage\");\n}\n\nexport async function getInvestmentPlans() {\n  return fetchWithAuth(\"/plans\");\n}\n\nexport async function investInPlan(planId: string, amount: number) {\n  return fetchWithAuth(`/plans/${planId}/invest`, {\n    method: \"POST\",\n    body: JSON.stringify({ amount }),\n  });\n}\n\nexport async function getUserInvestments() {\n  return fetchWithAuth(\"/investments\");\n}\n\nexport async function getUserDeposits() {\n  return fetchWithAuth(\"/deposits\");\n}\n\nexport async function getUserWithdrawals() {\n  return fetchWithAuth(\"/withdrawals\");\n}\n\nexport async function createWithdrawal(data: {\n  cryptocurrency: string;\n  amount: string;\n  usdValue: string;\n  walletAddress: string;\n  networkFee: string;\n}) {\n  return fetchWithAuth(\"/withdrawals\", {\n    method: \"POST\",\n    body: JSON.stringify(data),\n  });\n}\n\nexport async function getSystemWallets() {\n  return fetchWithAuth(\"/system/wallets\");\n}\n\nexport async function getUserMessages() {\n  return fetchWithAuth(\"/messages\");\n}\n\nexport async function markMessageAsRead(messageId: string) {\n  return fetchWithAuth(`/messages/${messageId}/read`, {\n    method: \"PATCH\",\n  });\n}\n\nexport async function getSupportTickets() {\n  return fetchWithAuth(\"/support-tickets\");\n}\n\nexport async function createSupportTicket(data: {\n  subject: string;\n  message: string;\n}) {\n  return fetchWithAuth(\"/support-tickets\", {\n    method: \"POST\",\n    body: JSON.stringify(data),\n  });\n}\n\nexport async function getReferralData() {\n  return fetchWithAuth(\"/referrals\");\n}\n","size_bytes":2239},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getAuthHeaders } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = getAuthHeaders();\n  const headers: HeadersInit = {\n    ...authHeaders,\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey.join(\"/\") as string;\n    \n    // All requests use standard auth headers\n    const authHeaders = getAuthHeaders();\n    const res = await fetch(url, {\n      headers: authHeaders,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1618},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}","size_bytes":165},"client/src/pages/admin-new-working.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport WithdrawalManagement from \"@/components/admin/WithdrawalManagement\";\nimport BalanceManagement from \"@/components/admin/BalanceManagement\";\nimport APIKeyManagement from \"@/components/admin/APIKeyManagement\";\nimport ReCaptchaSettings from \"@/components/admin/ReCaptchaSettings\";\nimport LogoManagement from \"@/components/admin/LogoManagement\";\nimport CallMeBotSettings from \"@/components/admin/CallMeBotSettings\";\nimport { \n  ShieldAlert,\n  Users,\n  DollarSign,\n  Zap,\n  Settings,\n  MessageSquare,\n  Activity,\n  Wallet,\n  CheckCircle,\n  XCircle,\n  BarChart3,\n  TrendingUp,\n  Database,\n  Shield,\n  Bot,\n  Gift,\n  Send,\n  Edit,\n  Plus,\n  RefreshCw,\n  Clock,\n  Trash2,\n  Reply,\n  X\n} from \"lucide-react\";\n\n// Helper function to make authenticated requests\nconst fetchWithAuth = async (endpoint: string, options: RequestInit = {}) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`/api${endpoint}`, {\n    ...options,\n    headers: {\n      ...options.headers,\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Request failed\");\n  }\n\n  return response.json();\n};\n\nexport default function Admin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  // Support ticket management state\n  const [selectedTicket, setSelectedTicket] = useState<any>(null);\n  const [isTicketDialogOpen, setIsTicketDialogOpen] = useState(false);\n  const [replyMessage, setReplyMessage] = useState(\"\");\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n  const [isUserDialogOpen, setIsUserDialogOpen] = useState(false);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(true);\n  const [balanceAdjustment, setBalanceAdjustment] = useState({\n    amount: \"\",\n    type: \"credit\" as \"credit\" | \"debit\",\n  });\n\n  // Check admin access and redirect if not authorized\n  const adminAccess = localStorage.getItem(\"admin_access\") === \"true\";\n  \n  useEffect(() => {\n    if (!adminAccess) {\n      setLocation(\"/\");\n    }\n  }, [adminAccess, setLocation]);\n\n  if (!adminAccess) {\n    return (\n      <div className=\"min-h-screen bg-crypto-dark flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-white mb-4\">Access Denied</h1>\n          <p className=\"text-gray-400 mb-6\">You need admin access to view this page.</p>\n          <Button onClick={() => setLocation(\"/\")} className=\"bg-crypto-blue hover:bg-blue-600\">\n            Return to Homepage\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Real data fetching with authentication\n  const { data: users = [], isLoading: usersLoading, refetch: refetchUsers } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: () => fetchWithAuth(\"/admin/users\"),\n    retry: 1,\n  });\n\n  const { data: systemSettings, isLoading: settingsLoading, refetch: refetchSettings } = useQuery({\n    queryKey: [\"/api/admin/settings\"],\n    queryFn: () => fetchWithAuth(\"/admin/settings\"),\n    retry: 1,\n  });\n\n  const { data: referralData, isLoading: referralLoading, refetch: refetchReferrals } = useQuery({\n    queryKey: [\"/api/admin/referrals\"],\n    queryFn: () => fetchWithAuth(\"/admin/referrals\"),\n    retry: 1,\n  });\n\n  const { data: depositSettings = {}, isLoading: depositSettingsLoading, refetch: refetchDepositSettings } = useQuery({\n    queryKey: [\"/api/admin/deposit-settings\"],\n    queryFn: () => fetchWithAuth(\"/admin/deposit-settings\"),\n    retry: 1,\n  });\n\n  // Support tickets data fetching\n  const { data: supportTickets = [], isLoading: ticketsLoading, refetch: refetchTickets } = useQuery({\n    queryKey: [\"/api/admin/support-tickets\"],\n    queryFn: () => fetchWithAuth(\"/admin/support-tickets\"),\n    retry: 1,\n  });\n\n  // Login logs data fetching\n  const { data: loginLogs = [], isLoading: loginLogsLoading, refetch: refetchLoginLogs } = useQuery({\n    queryKey: [\"/api/admin/login-logs\"],\n    queryFn: () => fetchWithAuth(\"/admin/login-logs\"),\n    retry: 1,\n  });\n\n  const [tempDepositSettings, setTempDepositSettings] = useState<any>({});\n\n  // Calculate dashboard statistics from real data with safe checks\n  const totalUsers = Array.isArray(users) ? users.length : 0;\n  const activeUsers = Array.isArray(users) ? users.filter((user: any) => user && user.isActive).length : 0;\n  const blockedUsers = Array.isArray(users) ? users.filter((user: any) => user && !user.isActive).length : 0;\n  const totalBalances = Array.isArray(users) ? users.reduce((sum: number, user: any) => sum + parseFloat(user?.balance || \"0\"), 0) : 0;\n  const referralCount = Array.isArray(users) ? users.filter((user: any) => user && user.referredBy).length : 0;\n\n  // Balance adjustment mutation\n  const adjustBalanceMutation = useMutation({\n    mutationFn: async ({ userId, amount, type }: { userId: string; amount: string; type: string }) => {\n      return fetchWithAuth(`/admin/users/${userId}/balance`, {\n        method: \"POST\",\n        body: JSON.stringify({ amount: parseFloat(amount), type }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Balance Updated\",\n        description: \"User balance has been successfully updated\",\n      });\n      setIsUserDialogOpen(false);\n      setBalanceAdjustment({ amount: \"\", type: \"credit\" });\n      refetchUsers();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return fetchWithAuth(`/admin/users/${userId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Deleted\",\n        description: \"User and all associated data have been permanently deleted\",\n      });\n      refetchUsers();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update deposit settings mutation\n  const updateDepositSettingsMutation = useMutation({\n    mutationFn: async (settings: any) => {\n      return fetchWithAuth(\"/admin/deposit-settings\", {\n        method: \"PATCH\",\n        body: JSON.stringify(settings),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"Deposit settings have been successfully updated\",\n      });\n      refetchDepositSettings();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Support ticket management mutations\n  const updateTicketMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      return fetchWithAuth(`/admin/support-tickets/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(updates),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ticket Updated\",\n        description: \"Support ticket has been updated successfully\",\n      });\n      refetchTickets();\n      setIsTicketDialogOpen(false);\n      setReplyMessage(\"\");\n      setSelectedTicket(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTicketMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return fetchWithAuth(`/admin/support-tickets/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ticket Deleted\",\n        description: \"Support ticket has been deleted successfully\",\n      });\n      refetchTickets();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const adminSections = [\n    {\n      category: \"Overview\",\n      sections: [\n        { id: \"dashboard\", label: \"Dashboard\", icon: BarChart3, description: \"System overview and statistics\" },\n      ]\n    },\n    {\n      category: \"User Management\",\n      sections: [\n        { id: \"users\", label: \"User Accounts\", icon: Users, description: \"Manage user accounts and profiles\" },\n        { id: \"balances\", label: \"Balance Management\", icon: DollarSign, description: \"Adjust user account balances\" },\n        { id: \"login-logs\", label: \"Login Logs\", icon: Activity, description: \"Track user login activities\" },\n      ]\n    },\n    {\n      category: \"Financial Operations\", \n      sections: [\n        { id: \"withdrawals\", label: \"Withdrawals\", icon: Send, description: \"Process withdrawal requests\" },\n        { id: \"deposits\", label: \"Deposit Settings\", icon: Wallet, description: \"Configure deposit parameters\" },\n      ]\n    },\n    {\n      category: \"Customer Support\",\n      sections: [\n        { id: \"support\", label: \"Support Tickets\", icon: MessageSquare, description: \"Handle customer support requests\" },\n      ]\n    },\n    {\n      category: \"AI & Automation\",\n      sections: [\n        { id: \"ai-keys\", label: \"AI API Keys\", icon: Bot, description: \"Manage AI service integrations\" },\n        { id: \"ai-chat\", label: \"AI Chat Settings\", icon: Bot, description: \"Configure AI chat parameters\" },\n      ]\n    },\n    {\n      category: \"System Configuration\",\n      sections: [\n        { id: \"referrals\", label: \"Referral Program\", icon: Gift, description: \"Configure referral rewards\" },\n        { id: \"settings\", label: \"System Settings\", icon: Settings, description: \"General system configuration\" },\n        { id: \"security\", label: \"Security & reCAPTCHA\", icon: Shield, description: \"Security settings and protection\" },\n        { id: \"callmebot\", label: \"WhatsApp Notifications\", icon: MessageSquare, description: \"Configure CallMeBot WhatsApp alerts\" },\n      ]\n    }\n  ];\n\n  const handleBalanceAdjustment = () => {\n    if (!selectedUser || !balanceAdjustment.amount) return;\n    \n    adjustBalanceMutation.mutate({\n      userId: selectedUser.id,\n      amount: balanceAdjustment.amount,\n      type: balanceAdjustment.type,\n    });\n  };\n\n  const renderDashboard = () => (\n    <div className=\"space-y-8\">\n      {/* Welcome Header */}\n      <div className=\"text-center py-8 bg-gradient-to-r from-crypto-blue/10 to-crypto-green/10 rounded-xl border border-gray-700\">\n        <div className=\"mb-4\">\n          <div className=\"w-16 h-16 mx-auto bg-gradient-to-r from-crypto-blue to-crypto-green rounded-full flex items-center justify-center mb-4\">\n            <BarChart3 className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">Welcome to TradePilot Admin</h1>\n          <p className=\"text-gray-400\">Complete platform overview and control center</p>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div>\n        <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center\">\n          <TrendingUp className=\"w-5 h-5 mr-2 text-crypto-blue\" />\n          Key Metrics\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-crypto-card border-gray-700 hover:border-crypto-blue/50 transition-colors\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Total Users</CardTitle>\n              <Users className=\"h-4 w-4 text-crypto-blue\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"total-users\">\n                {totalUsers}\n              </div>\n              <p className=\"text-xs text-gray-400\">Registered accounts</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-crypto-card border-gray-700 hover:border-green-500/50 transition-colors\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Active Users</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-400\" data-testid=\"active-users\">\n                {activeUsers}\n              </div>\n              <p className=\"text-xs text-gray-400\">\n                {totalUsers > 0 ? `${((activeUsers / totalUsers) * 100).toFixed(1)}% active` : \"No users yet\"}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-crypto-card border-gray-700 hover:border-crypto-green/50 transition-colors\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Total Balances</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-crypto-green\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-crypto-green\" data-testid=\"total-balances\">\n                ${totalBalances.toFixed(2)}\n              </div>\n              <p className=\"text-xs text-gray-400\">Platform liquidity</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-crypto-card border-gray-700 hover:border-yellow-500/50 transition-colors\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Referrals</CardTitle>\n              <Gift className=\"h-4 w-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-400\" data-testid=\"referral-count\">\n                {referralCount}\n              </div>\n              <p className=\"text-xs text-gray-400\">Referred users</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Quick Actions Grid */}\n      <div>\n        <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center\">\n          <Zap className=\"w-5 h-5 mr-2 text-crypto-green\" />\n          Quick Actions\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <Button \n            onClick={() => setActiveSection(\"users\")} \n            variant=\"outline\"\n            className=\"h-16 justify-start border-crypto-blue text-crypto-blue hover:bg-crypto-blue hover:text-white\"\n          >\n            <Users className=\"mr-3 h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Manage Users</div>\n              <div className=\"text-xs opacity-70\">View and edit user accounts</div>\n            </div>\n          </Button>\n\n          <Button \n            onClick={() => setActiveSection(\"withdrawals\")} \n            variant=\"outline\"\n            className=\"h-16 justify-start border-yellow-500 text-yellow-500 hover:bg-yellow-500 hover:text-black\"\n          >\n            <Send className=\"mr-3 h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Process Withdrawals</div>\n              <div className=\"text-xs opacity-70\">Review withdrawal requests</div>\n            </div>\n          </Button>\n\n          <Button \n            onClick={() => setActiveSection(\"support\")} \n            variant=\"outline\"\n            className=\"h-16 justify-start border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white\"\n          >\n            <MessageSquare className=\"mr-3 h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Support Tickets</div>\n              <div className=\"text-xs opacity-70\">Handle customer support</div>\n            </div>\n          </Button>\n\n          <Button \n            onClick={() => setActiveSection(\"deposits\")} \n            variant=\"outline\"\n            className=\"h-16 justify-start border-crypto-green text-crypto-green hover:bg-crypto-green hover:text-black\"\n          >\n            <Wallet className=\"mr-3 h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Deposit Settings</div>\n              <div className=\"text-xs opacity-70\">Configure deposit limits</div>\n            </div>\n          </Button>\n\n          <Button \n            onClick={() => setActiveSection(\"login-logs\")} \n            variant=\"outline\"\n            className=\"h-16 justify-start border-blue-400 text-blue-400 hover:bg-blue-400 hover:text-white\"\n          >\n            <Activity className=\"mr-3 h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Login Logs</div>\n              <div className=\"text-xs opacity-70\">User activity tracking</div>\n            </div>\n          </Button>\n\n          <Button \n            onClick={() => setActiveSection(\"settings\")} \n            variant=\"outline\"\n            className=\"h-16 justify-start border-gray-500 text-gray-300 hover:bg-gray-500 hover:text-white\"\n          >\n            <Settings className=\"mr-3 h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">System Settings</div>\n              <div className=\"text-xs opacity-70\">Platform configuration</div>\n            </div>\n          </Button>\n\n          <Button \n            onClick={() => refetchUsers()} \n            disabled={usersLoading}\n            variant=\"outline\"\n            className=\"h-16 justify-start border-orange-500 text-orange-500 hover:bg-orange-500 hover:text-white\"\n            data-testid=\"refresh-users\"\n          >\n            <RefreshCw className=\"mr-3 h-5 w-5\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Refresh Data</div>\n              <div className=\"text-xs opacity-70\">Update all statistics</div>\n            </div>\n          </Button>\n        </div>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Clock className=\"w-5 h-5 mr-2 text-crypto-blue\" />\n              Recent Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Array.isArray(users) && users.length > 0 ? (\n                users.slice(0, 5).map((user: any) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-crypto-blue/20 rounded-full flex items-center justify-center\">\n                        <Users className=\"w-4 h-4 text-crypto-blue\" />\n                      </div>\n                      <div>\n                        <p className=\"text-white text-sm font-medium\">{user.username}</p>\n                        <p className=\"text-gray-400 text-xs\">Joined {new Date(user.createdAt).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n                    <Badge variant={user.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                      {user.isActive ? \"Active\" : \"Blocked\"}\n                    </Badge>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-gray-400\">\n                  <Users className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n                  <p>No users registered yet</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Activity className=\"w-5 h-5 mr-2 text-crypto-green\" />\n              System Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-green-500/10 rounded-lg border border-green-500/20\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                  <div>\n                    <p className=\"text-white text-sm font-medium\">Platform Status</p>\n                    <p className=\"text-gray-400 text-xs\">All systems operational</p>\n                  </div>\n                </div>\n                <Badge className=\"bg-green-500 text-white\">Online</Badge>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-crypto-blue/10 rounded-lg border border-crypto-blue/20\">\n                <div className=\"flex items-center space-x-3\">\n                  <Database className=\"w-5 h-5 text-crypto-blue\" />\n                  <div>\n                    <p className=\"text-white text-sm font-medium\">Database</p>\n                    <p className=\"text-gray-400 text-xs\">Connected and healthy</p>\n                  </div>\n                </div>\n                <Badge className=\"bg-crypto-blue text-white\">Connected</Badge>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-yellow-500/10 rounded-lg border border-yellow-500/20\">\n                <div className=\"flex items-center space-x-3\">\n                  <Shield className=\"w-5 h-5 text-yellow-400\" />\n                  <div>\n                    <p className=\"text-white text-sm font-medium\">Security</p>\n                    <p className=\"text-gray-400 text-xs\">Monitoring active</p>\n                  </div>\n                </div>\n                <Badge className=\"bg-yellow-500 text-black\">Monitoring</Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const renderLoginLogs = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold text-white\">Login Activity Logs</h3>\n        <Button \n          onClick={() => refetchLoginLogs()}\n          disabled={loginLogsLoading}\n          variant=\"outline\"\n          className=\"text-crypto-blue border-crypto-blue hover:bg-crypto-blue hover:text-white\"\n          data-testid=\"refresh-logs\"\n        >\n          <RefreshCw className={`w-4 h-4 mr-2 ${loginLogsLoading ? 'animate-spin' : ''}`} />\n          Refresh\n        </Button>\n      </div>\n\n      <Card className=\"bg-crypto-card border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Recent User Activities</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loginLogsLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <RefreshCw className=\"w-6 h-6 animate-spin text-crypto-blue\" />\n            </div>\n          ) : loginLogs.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Activity className=\"w-12 h-12 mx-auto mb-4 opacity-50 text-gray-400\" />\n              <div className=\"text-gray-400\">No activity logs available</div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-gray-700\">\n                    <TableHead className=\"text-gray-300\">Time</TableHead>\n                    <TableHead className=\"text-gray-300\">User</TableHead>\n                    <TableHead className=\"text-gray-300\">Action</TableHead>\n                    <TableHead className=\"text-gray-300\">Country</TableHead>\n                    <TableHead className=\"text-gray-300\">IP Address</TableHead>\n                    <TableHead className=\"text-gray-300\">User Agent</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {loginLogs\n                    .sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n                    .slice(0, 10)\n                    .map((log: any, index: number) => (\n                      <TableRow key={index} className=\"border-gray-700 hover:bg-gray-700/30\">\n                        <TableCell className=\"text-gray-300\">\n                          {new Date(log.timestamp).toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-white font-medium\">\n                          {log.username}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            className={\n                              log.action === 'login' \n                                ? 'bg-green-500/20 text-green-400 hover:bg-green-500/30'\n                                : log.action === 'register' \n                                ? 'bg-blue-500/20 text-blue-400 hover:bg-blue-500/30'\n                                : 'bg-gray-500/20 text-gray-400 hover:bg-gray-500/30'\n                            }\n                          >\n                            {log.action}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-gray-300\">\n                          {log.country || 'Unknown'}\n                        </TableCell>\n                        <TableCell className=\"text-gray-400 text-sm\">\n                          {log.ipAddress || 'N/A'}\n                        </TableCell>\n                        <TableCell className=\"text-gray-400 text-sm max-w-xs truncate\">\n                          {log.userAgent || 'N/A'}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderUserManagement = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold text-white\">User Management</h3>\n        <Button \n          onClick={() => refetchUsers()} \n          disabled={usersLoading}\n          variant=\"outline\"\n          className=\"border-gray-600\"\n          data-testid=\"refresh-button\"\n        >\n          <RefreshCw className=\"mr-2 h-4 w-4\" />\n          Refresh\n        </Button>\n      </div>\n\n      {usersLoading ? (\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardContent className=\"flex items-center justify-center py-8\">\n            <div className=\"text-gray-400\">Loading users...</div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Registered Users ({users?.length || 0})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-gray-700\">\n                    <TableHead className=\"text-gray-300\">ID</TableHead>\n                    <TableHead className=\"text-gray-300\">Username</TableHead>\n                    <TableHead className=\"text-gray-300\">Email</TableHead>\n                    <TableHead className=\"text-gray-300\">Country</TableHead>\n                    <TableHead className=\"text-gray-300\">Balance</TableHead>\n                    <TableHead className=\"text-gray-300\">Status</TableHead>\n                    <TableHead className=\"text-gray-300\">Created</TableHead>\n                    <TableHead className=\"text-gray-300\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users?.map((user: any) => (\n                    <TableRow key={user.id} className=\"border-gray-700\">\n                      <TableCell className=\"text-gray-300\">{user.id}</TableCell>\n                      <TableCell className=\"text-white font-medium\">{user.username}</TableCell>\n                      <TableCell className=\"text-gray-300\">{user.email}</TableCell>\n                      <TableCell className=\"text-gray-300\">{user.country || 'Unknown'}</TableCell>\n                      <TableCell className=\"text-crypto-green\">${parseFloat(user.balance || \"0\").toFixed(2)}</TableCell>\n                      <TableCell>\n                        <Badge variant={user.isActive ? \"default\" : \"destructive\"}>\n                          {user.isActive ? \"Active\" : \"Blocked\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-gray-300\">\n                        {new Date(user.createdAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setSelectedUser(user);\n                              setIsUserDialogOpen(true);\n                            }}\n                            className=\"border-crypto-blue text-crypto-blue hover:bg-crypto-blue hover:text-white\"\n                            data-testid={`edit-user-${user.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => {\n                              if (confirm(`⚠️ PERMANENT DELETION WARNING ⚠️\\n\\nThis will permanently delete user \"${user.username}\" and ALL their data:\\n• User account & profile\\n• All investments & earnings\\n• Deposit & withdrawal history\\n• Messages & support tickets\\n• Login logs & activity\\n\\nAfter deletion, they can register again with the same email/username.\\n\\nThis action CANNOT be undone. Are you absolutely sure?`)) {\n                                deleteUserMutation.mutate(user.id);\n                              }\n                            }}\n                            disabled={deleteUserMutation.isPending}\n                            data-testid={`delete-user-${user.id}`}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  // Local state for deposit settings to show typing\n  const [localDepositSettings, setLocalDepositSettings] = useState<any>({});\n  \n  // Update local state when depositSettings changes (but only when data is actually fetched)\n  useEffect(() => {\n    if (depositSettings && Object.keys(depositSettings).length > 0) {\n      // Include wallet addresses from systemSettings in the local state\n      const walletAddresses: any = {};\n      if (systemSettings?.wallets) {\n        Object.keys(systemSettings.wallets).forEach(crypto => {\n          walletAddresses[`${crypto.toUpperCase()}_wallet_address`] = systemSettings.wallets[crypto]?.address || \"\";\n        });\n      }\n      setLocalDepositSettings({\n        ...depositSettings,\n        ...walletAddresses\n      });\n    }\n  }, [depositSettingsLoading, systemSettings]); // Update when loading state changes or systemSettings changes\n\n  const renderDepositSettings = () => {\n    const cryptoOptions = [\n      { symbol: \"BTC\", name: \"Bitcoin\", logo: \"https://assets.coincap.io/assets/icons/btc@2x.png\" },\n      { symbol: \"ETH\", name: \"Ethereum\", logo: \"https://assets.coincap.io/assets/icons/eth@2x.png\" },\n      { symbol: \"USDT\", name: \"Tether USDT\", logo: \"https://assets.coincap.io/assets/icons/usdt@2x.png\" },\n    ];\n\n    const handleUpdateSettings = (crypto: string, field: string, value: string) => {\n      // Update local state immediately for UI feedback\n      const updatedLocalSettings = {\n        ...localDepositSettings,\n        [crypto]: {\n          ...localDepositSettings[crypto],\n          [field]: value,\n        },\n      };\n      setLocalDepositSettings(updatedLocalSettings);\n    };\n\n    const handleSaveSettings = async (crypto: string) => {\n      const settings = localDepositSettings[crypto] || {};\n      const walletAddress = localDepositSettings[`${crypto}_wallet_address`] || \"\";\n      \n      // Save deposit settings\n      updateDepositSettingsMutation.mutate({\n        [crypto]: settings\n      });\n      \n      // Save wallet address if it exists\n      if (walletAddress) {\n        try {\n          await handleWalletAddressUpdate(crypto, walletAddress);\n        } catch (error) {\n          console.error('Failed to save wallet address:', error);\n        }\n      }\n    };\n\n    const handleQRCodeUpload = async (crypto: string, file?: File) => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        \n        if (!file) {\n          // Remove QR code\n          const response = await fetch('/api/admin/remove-qr-code', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ cryptocurrency: crypto })\n          });\n\n          if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw new Error(errorData.message || `HTTP ${response.status}: Failed to remove QR code`);\n          }\n\n          toast({\n            title: \"Success\",\n            description: `QR code removed for ${crypto}`,\n          });\n        } else {\n          // Validate file size (5MB limit)\n          if (file.size > 5 * 1024 * 1024) {\n            throw new Error('File size must be less than 5MB');\n          }\n\n          // Validate file type\n          if (!file.type.startsWith('image/')) {\n            throw new Error('Please select a valid image file');\n          }\n\n          // Upload QR code\n          const formData = new FormData();\n          formData.append('qrCode', file);\n          formData.append('cryptocurrency', crypto);\n\n          const response = await fetch('/api/admin/upload-qr-code', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n            },\n            body: formData\n          });\n\n          if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw new Error(errorData.message || `HTTP ${response.status}: Failed to upload QR code`);\n          }\n\n          const result = await response.json();\n          toast({\n            title: \"Success\",\n            description: `QR code uploaded successfully for ${crypto}`,\n          });\n        }\n        \n        // Refresh system settings to show the changes\n        refetchSettings();\n      } catch (error: any) {\n        console.error('QR Code upload error:', error);\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: error.message || \"Failed to process QR code\",\n        });\n      }\n    };\n\n    const handleWalletAddressUpdate = async (crypto: string, address: string) => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch('/api/admin/update-wallet-address', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            cryptocurrency: crypto,\n            address: address\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to update wallet address');\n        }\n\n        toast({\n          title: \"Success\",\n          description: `Wallet address updated for ${crypto}`,\n        });\n        \n        refetchSettings();\n      } catch (error: any) {\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: error.message || \"Failed to update wallet address\",\n        });\n      }\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\">Deposit Settings</h2>\n            <p className=\"text-gray-400 mt-1\">Configure minimum deposits and confirmations for each cryptocurrency</p>\n          </div>\n          <Button \n            onClick={() => refetchDepositSettings()} \n            disabled={depositSettingsLoading}\n            variant=\"outline\"\n            className=\"border-crypto-blue text-crypto-blue hover:bg-crypto-blue hover:text-white\"\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n\n        {depositSettingsLoading ? (\n          <Card className=\"bg-crypto-card border-gray-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center text-gray-400\">Loading deposit settings...</div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-6\">\n            {cryptoOptions.map((crypto) => {\n              const settings = localDepositSettings[crypto.symbol] || {};\n              \n              return (\n                <Card key={crypto.symbol} className=\"bg-crypto-card border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center space-x-3\">\n                      <img src={crypto.logo} alt={crypto.name} className=\"w-8 h-8 rounded-full\" />\n                      <div>\n                        <div className=\"text-lg\">{crypto.name}</div>\n                        <div className=\"text-sm text-gray-400 font-normal\">{crypto.symbol}</div>\n                      </div>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Wallet Management Section */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Wallet className=\"h-4 w-4 text-crypto-blue\" />\n                        <Label className=\"text-gray-300 font-medium\">Wallet Configuration</Label>\n                      </div>\n                      \n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-300\">Wallet Address</Label>\n                          <div className=\"flex space-x-2\">\n                            <Input\n                              type=\"text\"\n                              value={localDepositSettings[`${crypto.symbol}_wallet_address`] !== undefined \n                                ? localDepositSettings[`${crypto.symbol}_wallet_address`] \n                                : (systemSettings?.wallets?.[crypto.symbol.toLowerCase()]?.address || \"\")}\n                              onChange={(e) => {\n                                setLocalDepositSettings((prev: any) => ({\n                                  ...prev,\n                                  [`${crypto.symbol}_wallet_address`]: e.target.value\n                                }));\n                              }}\n                              placeholder={`Enter ${crypto.symbol} wallet address`}\n                              className=\"bg-crypto-dark border-gray-600 text-white flex-1\"\n                              data-testid={`wallet-address-${crypto.symbol.toLowerCase()}`}\n                            />\n\n                          </div>\n                          <p className=\"text-xs text-gray-400\">\n                            {crypto.symbol} wallet address for receiving deposits\n                          </p>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-300\">QR Code</Label>\n                          <div className=\"space-y-2\">\n                            {systemSettings?.wallets?.[crypto.symbol.toLowerCase()]?.qr_code ? (\n                              <div className=\"flex items-center space-x-3 p-3 bg-crypto-dark rounded-lg border border-gray-600\">\n                                <img \n                                  src={systemSettings.wallets[crypto.symbol.toLowerCase()].qr_code} \n                                  alt={`${crypto.symbol} QR Code`}\n                                  className=\"w-12 h-12 rounded border border-gray-500\"\n                                />\n                                <div className=\"flex-1\">\n                                  <p className=\"text-sm text-green-400 font-medium\">QR Code Active</p>\n                                  <p className=\"text-xs text-gray-400\">Displayed on deposit page</p>\n                                </div>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                                  onClick={() => {\n                                    if (confirm(`Remove QR code for ${crypto.symbol}?`)) {\n                                      handleQRCodeUpload(crypto.symbol);\n                                    }\n                                  }}\n                                >\n                                  Remove\n                                </Button>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center justify-center p-6 border-2 border-dashed border-gray-600 rounded-lg bg-crypto-dark\">\n                                <label className=\"cursor-pointer text-center\">\n                                  <input\n                                    type=\"file\"\n                                    accept=\"image/*\"\n                                    className=\"hidden\"\n                                    onChange={(e) => {\n                                      const file = e.target.files?.[0];\n                                      if (file) {\n                                        handleQRCodeUpload(crypto.symbol, file);\n                                      }\n                                    }}\n                                    data-testid={`qr-upload-${crypto.symbol.toLowerCase()}`}\n                                  />\n                                  <div className=\"space-y-2\">\n                                    <Plus className=\"w-8 h-8 text-gray-400 mx-auto\" />\n                                    <p className=\"text-sm text-gray-400\">Upload QR Code</p>\n                                    <p className=\"text-xs text-gray-500\">PNG, JPG up to 5MB</p>\n                                  </div>\n                                </label>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Deposit Rules Section */}\n                    <div className=\"space-y-4 pt-4 border-t border-gray-600\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Settings className=\"h-4 w-4 text-crypto-green\" />\n                        <Label className=\"text-gray-300 font-medium\">Deposit Rules</Label>\n                      </div>\n                      \n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-300\">Minimum Deposit</Label>\n                          <Input\n                            type=\"text\"\n                            value={settings.minDeposit || \"\"}\n                            onChange={(e) => handleUpdateSettings(crypto.symbol, \"minDeposit\", e.target.value)}\n                            placeholder={`e.g., 0.001 ${crypto.symbol}`}\n                            className=\"bg-crypto-dark border-gray-600 text-white\"\n                            data-testid={`min-deposit-${crypto.symbol.toLowerCase()}`}\n                          />\n                          <p className=\"text-xs text-gray-400\">\n                            Minimum amount users can deposit for {crypto.name}\n                          </p>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-300\">Confirmations Required</Label>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={settings.confirmations || \"\"}\n                            onChange={(e) => handleUpdateSettings(crypto.symbol, \"confirmations\", e.target.value)}\n                            placeholder=\"e.g., 3\"\n                            className=\"bg-crypto-dark border-gray-600 text-white\"\n                            data-testid={`confirmations-${crypto.symbol.toLowerCase()}`}\n                          />\n                          <p className=\"text-xs text-gray-400\">\n                            Network confirmations needed before crediting deposit\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between pt-4 border-t border-gray-600\">\n                      <div className=\"text-sm text-gray-400\">\n                        Current: {settings.minDeposit || \"Not set\"} • {settings.confirmations || \"Not set\"} confirmations\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge \n                          variant={settings.minDeposit && settings.confirmations ? \"default\" : \"secondary\"}\n                          className={settings.minDeposit && settings.confirmations ? \"bg-crypto-green\" : \"\"}\n                        >\n                          {settings.minDeposit && settings.confirmations ? \"Configured\" : \"Needs Setup\"}\n                        </Badge>\n                        <Button\n                          onClick={() => handleSaveSettings(crypto.symbol)}\n                          disabled={updateDepositSettingsMutation.isPending}\n                          className=\"bg-crypto-blue hover:bg-blue-600 text-white\"\n                          size=\"sm\"\n                          data-testid={`save-deposit-settings-${crypto.symbol.toLowerCase()}`}\n                        >\n                          {updateDepositSettingsMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Withdrawal Settings Section */}\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center space-x-3\">\n              <TrendingUp className=\"w-6 h-6 text-crypto-blue\" />\n              <div>Withdrawal Settings</div>\n            </CardTitle>\n            <p className=\"text-gray-400\">Configure minimum withdrawal amounts and processing settings</p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-gray-300\">Minimum Withdrawal ($USD)</Label>\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  value={localDepositSettings.min_withdrawal || systemSettings?.withdrawal_limits?.min_withdrawal || \"\"}\n                  onChange={(e) => setLocalDepositSettings((prev: any) => ({\n                    ...prev,\n                    min_withdrawal: e.target.value\n                  }))}\n                  placeholder=\"e.g., 10\"\n                  className=\"bg-crypto-dark border-gray-600 text-white\"\n                  data-testid=\"min-withdrawal-input\"\n                />\n                <p className=\"text-xs text-gray-400\">\n                  Minimum amount users can withdraw in USD\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <Label className=\"text-gray-300\">Processing Fee (%)</Label>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"10\"\n                  step=\"0.1\"\n                  value={localDepositSettings.withdrawal_fee || systemSettings?.withdrawal_limits?.fee_percentage || \"\"}\n                  onChange={(e) => setLocalDepositSettings((prev: any) => ({\n                    ...prev,\n                    withdrawal_fee: e.target.value\n                  }))}\n                  placeholder=\"e.g., 2.5\"\n                  className=\"bg-crypto-dark border-gray-600 text-white\"\n                  data-testid=\"withdrawal-fee-input\"\n                />\n                <p className=\"text-xs text-gray-400\">\n                  Percentage fee charged on withdrawals\n                </p>\n              </div>\n            </div>\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={() => {\n                  const withdrawalSettings = {\n                    min_withdrawal: parseFloat(localDepositSettings.min_withdrawal) || 10,\n                    fee_percentage: parseFloat(localDepositSettings.withdrawal_fee) || 0\n                  };\n                  updateDepositSettingsMutation.mutate({ withdrawal_limits: withdrawalSettings });\n                }}\n                className=\"bg-crypto-blue hover:bg-blue-600 text-white\"\n                data-testid=\"save-withdrawal-settings\"\n              >\n                Save Withdrawal Settings\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-2 h-2 bg-crypto-blue rounded-full mt-2 flex-shrink-0\"></div>\n              <div className=\"text-sm text-gray-300\">\n                <div className=\"font-medium mb-1\">Configuration Notes:</div>\n                <ul className=\"text-gray-400 space-y-1\">\n                  <li>• Changes are applied immediately to new deposits and withdrawals</li>\n                  <li>• Minimum deposit amounts should include the cryptocurrency symbol</li>\n                  <li>• Higher confirmation counts increase security but delay processing</li>\n                  <li>• Wallet addresses must be saved with deposit settings to appear on deposit pages</li>\n                  <li>• All deposits are automatically converted to USD in user accounts</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\n  // State for AI settings\n  const [aiSettings, setAiSettings] = useState({\n    personality: \"\",\n    greetingMessage: \"\"\n  });\n\n  // Fetch current AI settings\n  const { data: currentAiSettings } = useQuery({\n    queryKey: [\"/api/admin/settings\"],\n    queryFn: () => fetchWithAuth(\"/admin/settings\"),\n  });\n\n  // Update AI settings when data is fetched\n  useEffect(() => {\n    if (currentAiSettings?.ai_chat) {\n      setAiSettings({\n        personality: currentAiSettings.ai_chat.personality || \"You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities. You are knowledgeable, professional, and always aim to provide accurate information about crypto markets and trading strategies.\",\n        greetingMessage: currentAiSettings.ai_chat.greeting_message || \"Welcome to TradePilot! How can I assist you with your trading journey today?\"\n      });\n    }\n  }, [currentAiSettings]);\n\n  // Save AI settings mutation\n  const saveAiSettingsMutation = useMutation({\n    mutationFn: async (settings: { personality: string; greetingMessage: string }) => {\n      // Update AI personality\n      await fetchWithAuth(\"/admin/ai-chat/personality\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          personality: settings.personality\n        }),\n      });\n      \n      // Update system settings for greeting message\n      return fetchWithAuth(\"/admin/settings\", {\n        method: \"PATCH\",\n        body: JSON.stringify({\n          ai_chat: {\n            enabled: true,\n            personality: settings.personality,\n            greeting_message: settings.greetingMessage,\n            api_keys: currentAiSettings?.ai_chat?.api_keys || {\n              reply_keys: [],\n              summary_keys: [],\n              current_reply_index: 0,\n              current_summary_index: 0,\n            }\n          }\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"AI settings have been saved successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to save AI settings\",\n      });\n    },\n  });\n\n  // AI Chat Settings Component\n  const renderAIChatSettings = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-white\">AI Chat Configuration</h2>\n        <p className=\"text-gray-400\">Configure AI personality and behavior</p>\n      </div>\n\n      <Card className=\"bg-crypto-card border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <MessageSquare className=\"h-5 w-5 mr-2\" />\n            AI Personality Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300 text-lg font-medium\">AI Personality Prompt</Label>\n            <Textarea\n              value={aiSettings.personality}\n              onChange={(e) => setAiSettings({...aiSettings, personality: e.target.value})}\n              placeholder=\"You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities. You are knowledgeable, professional, and always aim to provide accurate information about crypto markets and trading strategies...\"\n              className=\"bg-gray-700 border-gray-600 text-white min-h-[120px] resize-vertical\"\n              rows={8}\n            />\n            <p className=\"text-xs text-gray-400\">\n              This prompt defines the AI's personality and behavior. Be specific about trading expertise, communication style, and helpful traits.\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300 text-lg font-medium\">AI Greeting Message</Label>\n            <Input\n              value={aiSettings.greetingMessage}\n              onChange={(e) => setAiSettings({...aiSettings, greetingMessage: e.target.value})}\n              placeholder=\"Welcome to TradePilot! How can I assist you with your trading journey today?\"\n              className=\"bg-gray-700 border-gray-600 text-white\"\n            />\n            <p className=\"text-xs text-gray-400\">\n              The first message users see when they start a new chat session with the AI.\n            </p>\n          </div>\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button \n              onClick={() => saveAiSettingsMutation.mutate(aiSettings)}\n              disabled={saveAiSettingsMutation.isPending}\n              className=\"bg-crypto-green hover:bg-green-600\"\n            >\n              <Edit className=\"w-4 h-4 mr-2\" />\n              {saveAiSettingsMutation.isPending ? \"Saving...\" : \"Save AI Settings\"}\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n              onClick={() => setAiSettings({\n                personality: \"You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities. You are knowledgeable, professional, and always aim to provide accurate information about crypto markets and trading strategies.\",\n                greetingMessage: \"Welcome to TradePilot! How can I assist you with your trading journey today?\"\n              })}\n            >\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Reset to Defaults\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-crypto-card border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Bot className=\"h-5 w-5 mr-2\" />\n            AI Chat Statistics\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-gray-800 rounded-lg\">\n              <div className=\"text-2xl font-bold text-crypto-blue\">145</div>\n              <div className=\"text-sm text-gray-400\">Total Conversations</div>\n            </div>\n            <div className=\"text-center p-4 bg-gray-800 rounded-lg\">\n              <div className=\"text-2xl font-bold text-crypto-green\">89%</div>\n              <div className=\"text-sm text-gray-400\">User Satisfaction</div>\n            </div>\n            <div className=\"text-center p-4 bg-gray-800 rounded-lg\">\n              <div className=\"text-2xl font-bold text-yellow-400\">24</div>\n              <div className=\"text-sm text-gray-400\">Active Sessions</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  // Support ticket management helpers\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-yellow-500\";\n      case \"replied\":\n        return \"bg-blue-500\";\n      case \"closed\":\n        return \"bg-gray-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-500\";\n      case \"medium\":\n        return \"bg-yellow-500\";\n      case \"low\":\n        return \"bg-green-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  // Render support ticket management\n  const renderSupportTickets = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">Support Tickets</h2>\n          <p className=\"text-gray-400 mt-1\">Manage customer support tickets</p>\n        </div>\n        <Button onClick={() => refetchTickets()} disabled={ticketsLoading} variant=\"outline\" className=\"border-crypto-blue text-crypto-blue hover:bg-crypto-blue hover:text-white\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      {ticketsLoading ? (\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center text-gray-400\">Loading support tickets...</div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-gray-600\">\n                    <TableHead className=\"text-gray-300\">ID</TableHead>\n                    <TableHead className=\"text-gray-300\">User</TableHead>\n                    <TableHead className=\"text-gray-300\">Subject</TableHead>\n                    <TableHead className=\"text-gray-300\">Status</TableHead>\n                    <TableHead className=\"text-gray-300\">Priority</TableHead>\n                    <TableHead className=\"text-gray-300\">Created</TableHead>\n                    <TableHead className=\"text-gray-300\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {!Array.isArray(supportTickets) || supportTickets.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center text-gray-400 py-8\">\n                        No support tickets found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    Array.isArray(supportTickets) ? supportTickets.map((ticket: any) => {\n                      const user = Array.isArray(users) ? users.find((u: any) => u && u.id === ticket?.userId) : null;\n                      return (\n                        <TableRow key={ticket.id} className=\"border-gray-600\">\n                          <TableCell className=\"text-white font-mono text-xs\">\n                            {ticket?.id ? ticket.id.slice(0, 8) : 'N/A'}...\n                          </TableCell>\n                          <TableCell className=\"text-white\">\n                            {user?.username || 'Unknown'}\n                          </TableCell>\n                          <TableCell className=\"text-white max-w-xs truncate\">\n                            {ticket.subject}\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={`${getStatusColor(ticket.status)} text-white`}>\n                              {ticket.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={`${getPriorityColor(ticket.priority)} text-white`}>\n                              {ticket.priority}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-gray-300\">\n                            {new Date(ticket.created_at).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-blue-500 text-blue-500 hover:bg-blue-500 hover:text-white\"\n                                onClick={() => {\n                                  if (!ticket?.id) {\n                                    toast({\n                                      title: \"Error\",\n                                      description: \"Invalid ticket data. Please refresh the page.\",\n                                      variant: \"destructive\",\n                                    });\n                                    return;\n                                  }\n                                  setSelectedTicket(ticket);\n                                  setReplyMessage(ticket.admin_reply || \"\");\n                                  setIsTicketDialogOpen(true);\n                                }}\n                              >\n                                <Reply className=\"w-3 h-3\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                                onClick={() => {\n                                  if (confirm(\"Are you sure you want to delete this ticket?\")) {\n                                    deleteTicketMutation.mutate(ticket.id);\n                                  }\n                                }}\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    }) : null\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Ticket Reply Dialog */}\n      <Dialog open={isTicketDialogOpen} onOpenChange={setIsTicketDialogOpen}>\n        <DialogContent className=\"bg-crypto-card border-gray-700 text-white max-w-3xl\">\n          <DialogHeader>\n            <DialogTitle>Manage Support Ticket</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Reply to or update the support ticket status\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedTicket && (\n            <div className=\"space-y-6\">\n              {/* Original ticket info */}\n              <div className=\"bg-gray-800 rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-white font-medium\">{selectedTicket.subject}</h3>\n                    <p className=\"text-gray-400 text-sm\">\n                      From: {Array.isArray(users) ? users.find((u: any) => u && u.id === selectedTicket?.userId)?.username || 'Unknown' : 'Unknown'} • \n                      Created: {selectedTicket?.created_at ? new Date(selectedTicket.created_at).toLocaleString() : 'Unknown'}\n                    </p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Badge className={`${getStatusColor(selectedTicket.status)} text-white`}>\n                      {selectedTicket.status}\n                    </Badge>\n                    <Badge className={`${getPriorityColor(selectedTicket.priority)} text-white`}>\n                      {selectedTicket.priority}\n                    </Badge>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 whitespace-pre-wrap\">{selectedTicket.message}</p>\n              </div>\n\n              {/* Admin reply section */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-gray-300\">Admin Reply</Label>\n                <Textarea\n                  value={replyMessage}\n                  onChange={(e) => setReplyMessage(e.target.value)}\n                  placeholder=\"Type your reply here...\"\n                  className=\"bg-gray-700 border-gray-600 text-white min-h-[120px]\"\n                />\n              </div>\n\n              {/* Status and Priority controls */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-gray-300\">Status</Label>\n                  <Select\n                    value={selectedTicket.status}\n                    onValueChange={(value) =>\n                      setSelectedTicket({ ...selectedTicket, status: value })\n                    }\n                  >\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      <SelectItem value=\"open\">Open</SelectItem>\n                      <SelectItem value=\"replied\">Replied</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-gray-300\">Priority</Label>\n                  <Select\n                    value={selectedTicket.priority}\n                    onValueChange={(value) =>\n                      setSelectedTicket({ ...selectedTicket, priority: value })\n                    }\n                  >\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Action buttons */}\n              <div className=\"flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsTicketDialogOpen(false)}\n                  className=\"border-gray-600\"\n                >\n                  Cancel\n                </Button>\n                <div className=\"space-x-2\">\n                  <Button\n                    onClick={() => {\n                      if (!selectedTicket?.id) {\n                        toast({\n                          title: \"Error\",\n                          description: \"Invalid ticket selected. Please refresh and try again.\",\n                          variant: \"destructive\",\n                        });\n                        return;\n                      }\n                      updateTicketMutation.mutate({\n                        id: selectedTicket.id,\n                        updates: {\n                          admin_reply: replyMessage,\n                          status: selectedTicket.status,\n                          priority: selectedTicket.priority,\n                        },\n                      });\n                    }}\n                    disabled={updateTicketMutation.isPending || !selectedTicket?.id}\n                    className=\"bg-crypto-green hover:bg-green-600\"\n                  >\n                    {updateTicketMutation.isPending ? \"Updating...\" : \"Update Ticket\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case \"dashboard\":\n        return renderDashboard();\n      case \"users\":\n        return renderUserManagement();\n      case \"support\":\n        return renderSupportTickets();\n      case \"withdrawals\":\n        return <WithdrawalManagement />;\n      case \"balances\":\n        return <BalanceManagement />;\n      case \"deposits\":\n        return renderDepositSettings();\n      case \"ai-keys\":\n        return <APIKeyManagement />;\n      case \"ai-chat\":\n        return renderAIChatSettings();\n      case \"referrals\":\n        return (\n          <div className=\"text-center text-gray-400 py-8\">\n            <Gift className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n            <div className=\"text-lg\">Referral Settings</div>\n            <div className=\"text-sm\">Configuration coming soon...</div>\n          </div>\n        );\n      case \"settings\":\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white\">System Settings</h2>\n            \n            {/* Brand Management Section */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Brand Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <LogoManagement />\n              </CardContent>\n            </Card>\n            \n            <div className=\"text-center text-gray-400 py-8\">\n              <Settings className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n              <div className=\"text-lg\">Additional Settings</div>\n              <div className=\"text-sm\">More configuration options coming soon...</div>\n            </div>\n          </div>\n        );\n      case \"login-logs\":\n        return renderLoginLogs();\n      case \"security\":\n        return <ReCaptchaSettings />;\n      case \"callmebot\":\n        return <CallMeBotSettings />;\n      default:\n        return renderDashboard();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark\">\n      <div className=\"flex h-screen\">\n        {/* Admin Sidebar */}\n        <div className={`${isSidebarCollapsed ? \"w-16\" : \"w-72\"} bg-crypto-card border-r border-gray-700 transition-all duration-300 flex flex-col`}>\n          <div className=\"p-4 border-b border-gray-700 flex items-center justify-between\">\n            <div className={`${isSidebarCollapsed ? 'hidden' : 'block'}`}>\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-crypto-blue to-crypto-green flex items-center justify-center\">\n                  <ShieldAlert className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-bold text-white\">Admin Panel</h1>\n                  <p className=\"text-xs text-gray-400\">TradePilot Management</p>\n                </div>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsSidebarCollapsed(!isSidebarCollapsed)}\n              className=\"text-gray-400 hover:text-white\"\n              data-testid=\"button-toggle-sidebar\"\n            >\n              {isSidebarCollapsed ? <Plus className=\"w-4 h-4\" /> : <XCircle className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n\n          <nav className=\"flex-1 p-4 overflow-y-auto\">\n            {!isSidebarCollapsed ? (\n              <div className=\"space-y-6\">\n                {adminSections.map((category) => (\n                  <div key={category.category}>\n                    <h3 className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 px-2\">\n                      {category.category}\n                    </h3>\n                    <div className=\"space-y-1\">\n                      {category.sections.map((section) => {\n                        const Icon = section.icon;\n                        const isActive = activeSection === section.id;\n                        return (\n                          <button\n                            key={section.id}\n                            onClick={() => setActiveSection(section.id)}\n                            className={`w-full text-left p-3 rounded-lg transition-colors ${\n                              isActive \n                                ? \"bg-crypto-blue/20 text-crypto-blue border-l-4 border-crypto-blue\" \n                                : \"text-gray-300 hover:text-white hover:bg-gray-700/50\"\n                            }`}\n                            data-testid={`nav-${section.id}`}\n                          >\n                            <div className=\"flex items-start space-x-3\">\n                              <Icon className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                              <div className=\"text-left\">\n                                <div className=\"font-medium text-sm\">{section.label}</div>\n                                <div className=\"text-xs text-gray-400 mt-0.5\">{section.description}</div>\n                              </div>\n                            </div>\n                          </button>\n                        );\n                      })}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {adminSections.flatMap(category => category.sections).map((section) => {\n                  const Icon = section.icon;\n                  return (\n                    <button\n                      key={section.id}\n                      onClick={() => setActiveSection(section.id)}\n                      className={`w-full p-2 rounded-lg transition-colors ${\n                        activeSection === section.id \n                          ? \"bg-crypto-blue text-white\" \n                          : \"text-gray-300 hover:text-white hover:bg-gray-700\"\n                      }`}\n                      title={section.label}\n                      data-testid={`nav-${section.id}`}\n                    >\n                      <Icon className=\"w-4 h-4\" />\n                    </button>\n                  );\n                })}\n              </div>\n            )}\n          </nav>\n\n          <div className=\"p-4 border-t border-gray-700\">\n            <Button\n              onClick={() => {\n                localStorage.removeItem(\"admin_access\");\n                localStorage.removeItem(\"token\"); \n                localStorage.removeItem(\"user\");\n                setLocation(\"/\");\n              }}\n              variant=\"outline\"\n              className={`w-full border-red-500 text-red-400 hover:bg-red-500 hover:text-white ${\n                isSidebarCollapsed ? 'p-2' : 'px-4 py-2'\n              }`}\n              data-testid=\"button-exit-admin\"\n              title={isSidebarCollapsed ? \"Exit Admin\" : undefined}\n            >\n              <Activity className=\"w-4 h-4\" />\n              {!isSidebarCollapsed && <span className=\"ml-2\">Exit Admin</span>}\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <div className=\"bg-crypto-card border-b border-gray-700 p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-white capitalize\">\n                  {adminSections.flatMap(cat => cat.sections).find(s => s.id === activeSection)?.label || \"Dashboard\"}\n                </h2>\n                <p className=\"text-gray-400\">\n                  {adminSections.flatMap(cat => cat.sections).find(s => s.id === activeSection)?.description || \"Platform administration and management\"}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2 px-3 py-1 bg-red-500/20 rounded-full\">\n                  <div className=\"w-2 h-2 bg-red-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-red-400 text-sm font-medium\">Live System</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <main className=\"flex-1 p-6 overflow-y-auto bg-gradient-to-br from-crypto-dark to-gray-900\">\n            {renderContent()}\n          </main>\n        </div>\n      </div>\n\n      {/* User Edit Dialog */}\n      <Dialog open={isUserDialogOpen} onOpenChange={setIsUserDialogOpen}>\n        <DialogContent className=\"bg-crypto-card border-gray-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit User: {selectedUser?.username}</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Adjust user balance and manage account settings\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-gray-300\">User ID</Label>\n                <Input \n                  value={selectedUser?.id || \"\"} \n                  disabled \n                  className=\"bg-gray-700 text-gray-400\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-gray-300\">Email</Label>\n                <Input \n                  value={selectedUser?.email || \"\"} \n                  disabled \n                  className=\"bg-gray-700 text-gray-400\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-gray-300\">Current Balance</Label>\n                <Input \n                  value={`$${parseFloat(selectedUser?.balance || \"0\").toFixed(2)}`} \n                  disabled \n                  className=\"bg-gray-700 text-gray-400\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-gray-300\">Status</Label>\n                <Input \n                  value={selectedUser?.isActive ? \"Active\" : \"Blocked\"} \n                  disabled \n                  className=\"bg-gray-700 text-gray-400\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-3 border-t border-gray-700 pt-4\">\n              <h4 className=\"text-white font-medium\">Balance Adjustment</h4>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-gray-300\">Amount ($)</Label>\n                  <Input \n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    value={balanceAdjustment.amount}\n                    onChange={(e) => setBalanceAdjustment({ ...balanceAdjustment, amount: e.target.value })}\n                    className=\"bg-gray-700 text-white border-gray-600\"\n                    data-testid=\"balance-amount-input\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-gray-300\">Type</Label>\n                  <select \n                    value={balanceAdjustment.type}\n                    onChange={(e) => setBalanceAdjustment({ ...balanceAdjustment, type: e.target.value as \"credit\" | \"debit\" })}\n                    className=\"w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md\"\n                    data-testid=\"balance-type-select\"\n                  >\n                    <option value=\"credit\">Credit (+)</option>\n                    <option value=\"debit\">Debit (-)</option>\n                  </select>\n                </div>\n              </div>\n              \n              <Button \n                onClick={handleBalanceAdjustment}\n                disabled={!balanceAdjustment.amount || adjustBalanceMutation.isPending}\n                className=\"w-full bg-crypto-blue hover:bg-blue-600\"\n                data-testid=\"adjust-balance-button\"\n              >\n                {adjustBalanceMutation.isPending ? \"Updating...\" : \"Update Balance\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":83697},"client/src/pages/ai-chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Bot, Send, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport type { AIChatMessage } from \"@shared/schema\";\n\ninterface AIChatData {\n  messages: AIChatMessage[];\n  greeting?: string;\n}\n\n// TypewriterMessage component removed - all AI messages now display permanently\n\n// Typing indicator component for when AI is preparing response (no bot icon to avoid duplication)\nfunction TypingIndicator() {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -10 }}\n      className=\"flex items-start space-x-2 mb-4\"\n    >\n      <div className=\"w-8 h-8 flex items-center justify-center flex-shrink-0\">\n        {/* Empty space to align with bot messages but no duplicate bot icon */}\n      </div>\n      <div className=\"max-w-xs lg:max-w-md px-4 py-2 rounded-2xl bg-gray-700/30\">\n        <div className=\"flex space-x-1 items-center\">\n          <span className=\"text-xs text-gray-400 mr-2\">AI is thinking</span>\n          {[0, 1, 2].map((i) => (\n            <motion.div\n              key={i}\n              className=\"w-1.5 h-1.5 bg-blue-400 rounded-full\"\n              animate={{\n                scale: [1, 1.3, 1],\n                opacity: [0.4, 1, 0.4],\n              }}\n              transition={{\n                duration: 1.2,\n                repeat: Infinity,\n                delay: i * 0.15,\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n\nexport function AIChatPage() {\n  const [message, setMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [lastMessageCount, setLastMessageCount] = useState(0);\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n  // Get chat messages with regular polling\n  const { data: chatData, isLoading } = useQuery<AIChatData>({\n    queryKey: ['/api/ai-chat/messages'],\n    queryFn: () => fetchWithAuth(\"/ai-chat/messages\"),\n    refetchInterval: isTyping ? false : 5000, // Only poll when not sending user message\n    refetchIntervalInBackground: false,\n    enabled: !!user, // Only run query if user is authenticated\n  });\n\n  // Handle data changes and trigger initial greeting\n  useEffect(() => {\n    if (chatData && user) {\n      // Auto-trigger first AI message on initial load (fresh conversation)\n      if (isFirstLoad && chatData.messages?.length === 0) {\n        setIsFirstLoad(false);\n        // Trigger initial AI greeting automatically\n        triggerInitialGreeting();\n      }\n      // Update message count but don't trigger typing animation for existing messages\n      if (chatData.messages?.length !== lastMessageCount) {\n        setLastMessageCount(chatData.messages.length);\n      }\n    }\n  }, [chatData, isFirstLoad, user]);\n\n  // Trigger initial greeting when user opens chat\n  const triggerInitialGreeting = async () => {\n    try {\n      setIsTyping(true);\n      await fetchWithAuth(\"/ai-chat/initial-greeting\", {\n        method: \"POST\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-chat/messages'] });\n    } catch (error) {\n      console.error('Failed to trigger initial greeting:', error);\n    } finally {\n      setTimeout(() => setIsTyping(false), 1000);\n    }\n  };\n\n  // Send message mutation\n  const sendMessage = useMutation({\n    mutationFn: async (messageText: string) => {\n      return fetchWithAuth(\"/ai-chat/send\", {\n        method: \"POST\",\n        body: JSON.stringify({ message: messageText }),\n      });\n    },\n    onMutate: () => {\n      setIsTyping(true);\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-chat/messages'] });\n      \n      // Set typing timeout for AI response\n      setTimeout(() => {\n        setIsTyping(false);\n      }, 2000);\n    },\n    onError: (error: any) => {\n      setIsTyping(false);\n      console.error('Send message error:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim() && !sendMessage.isPending) {\n      sendMessage.mutate(message.trim());\n    }\n  };\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatData?.messages, isTyping]);\n\n  // Clear chat when user leaves the chat page or website\n  useEffect(() => {\n    const clearChat = () => {\n      fetchWithAuth(\"/ai-chat/clear\", {\n        method: \"POST\",\n      }).then(() => {\n        // Reset for fresh conversation\n        setIsFirstLoad(true);\n      }).catch(() => {\n        // Ignore errors during cleanup\n      });\n    };\n\n    const handleBeforeUnload = () => clearChat();\n    const handlePageHide = () => clearChat();\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    window.addEventListener('pagehide', handlePageHide);\n    \n    // Also clear when component unmounts (user navigates away)\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      window.removeEventListener('pagehide', handlePageHide);\n      clearChat();\n    };\n  }, []);\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-crypto-dark flex items-center justify-center\">\n        <Card className=\"w-96 bg-gray-900/50 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-center text-red-400\">Authentication Required</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-300 text-center mb-4\">Please log in to chat with TradePilot AI</p>\n            <Button onClick={() => setLocation('/login')} className=\"w-full\">\n              Go to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark\">\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation('/dashboard')}\n              className=\"text-gray-400 hover:text-white\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                <Bot className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">TradePilot AI Assistant</h1>\n                <p className=\"text-sm text-gray-400\">\n                  Your smart AI trading  companion 🚀, profit insights 💵, and reliable AI support 🔑\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Container */}\n          <Card className=\"bg-gray-900/50 border-gray-700 h-[600px] flex flex-col\">\n            <CardHeader className=\"border-b border-gray-700\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-gray-400\">AI is online and ready to help</span>\n              </div>\n            </CardHeader>\n\n            {/* Messages */}\n            <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n              {isLoading ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <Loader2 className=\"w-8 h-8 animate-spin text-gray-400\" />\n                </div>\n              ) : (\n                <>\n                  {chatData?.messages?.map((msg) => {\n                    // Display all messages permanently without typing animation\n                    return (\n                      <motion.div\n                        key={msg.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        className={`flex ${msg.isAI ? 'justify-start' : 'justify-end'} mb-4`}\n                      >\n                        {msg.isAI && (\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0 mr-2\">\n                            <Bot className=\"w-4 h-4 text-white\" />\n                          </div>\n                        )}\n                        <div\n                          className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${\n                            msg.isAI\n                              ? 'bg-gray-700/50 text-gray-100'\n                              : 'bg-gradient-to-r from-blue-500 to-purple-600 text-white ml-auto'\n                          }`}\n                        >\n                          <div className=\"text-sm leading-relaxed\">\n                            {msg.message.split('\\n').map((line, index, array) => {\n                              const trimmedLine = line.trim();\n                              if (trimmedLine === '') {\n                                return index < array.length - 1 ? <br key={index} /> : null;\n                              }\n                              \n                              // Handle bullet points\n                              if (trimmedLine.startsWith('•') || trimmedLine.startsWith('-')) {\n                                return (\n                                  <div key={index} className=\"flex items-start mb-1\">\n                                    <span className=\"text-blue-400 mr-2 flex-shrink-0\">•</span>\n                                    <span>{trimmedLine.substring(1).trim()}</span>\n                                  </div>\n                                );\n                              }\n                              \n                              // Handle numbered lists\n                              const numberedMatch = trimmedLine.match(/^(\\d+\\.\\s*)/);\n                              if (numberedMatch) {\n                                return (\n                                  <div key={index} className=\"flex items-start mb-1\">\n                                    <span className=\"text-blue-400 mr-2 flex-shrink-0 font-medium\">\n                                      {numberedMatch[1]}\n                                    </span>\n                                    <span>{trimmedLine.substring(numberedMatch[1].length)}</span>\n                                  </div>\n                                );\n                              }\n                              \n                              // Regular paragraphs\n                              return (\n                                <p key={index} className={index > 0 ? \"mt-2\" : \"\"}>\n                                  {trimmedLine}\n                                </p>\n                              );\n                            })}\n                          </div>\n                          <p className=\"text-xs opacity-70 mt-1\">\n                            {new Date(msg.created_at).toLocaleTimeString()}\n                          </p>\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n\n                  {isTyping && <TypingIndicator />}\n                  <div ref={messagesEndRef} />\n                </>\n              )}\n            </CardContent>\n\n            {/* Input */}\n            <div className=\"border-t border-gray-700 p-4\">\n              <form onSubmit={handleSubmit} className=\"flex gap-2\">\n                <Input\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  placeholder=\"Type your message...\"\n                  className=\"flex-1 bg-gray-800/50 border-gray-600 text-white placeholder:text-gray-400\"\n                  disabled={sendMessage.isPending}\n                />\n                <Button\n                  type=\"submit\"\n                  disabled={!message.trim() || sendMessage.isPending}\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n                >\n                  {sendMessage.isPending ? (\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    <Send className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </form>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13371},"client/src/pages/arbitrage-feed.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useArbitrageOpportunities } from \"@/hooks/use-crypto-prices\";\nimport { useLocation } from \"wouter\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport CryptoCard from \"@/components/ui/crypto-card\";\nimport { motion } from \"framer-motion\";\n\nexport default function ArbitrageFeed() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isVisible, setIsVisible] = useState(false);\n  const { data: opportunities, isLoading: opportunitiesLoading } = useArbitrageOpportunities();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    } else if (user) {\n      setIsVisible(true);\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <MainLayout>\n        <div className=\"min-h-screen hero-3d-bg flex items-center justify-center\">\n          <motion.div \n            className=\"text-white text-xl\"\n            animate={{ opacity: [1, 0.5, 1] }}\n            transition={{ duration: 1.5, repeat: Infinity }}\n          >\n            Loading Live Arbitrage Feed...\n          </motion.div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <MainLayout>\n      <div className=\"relative\">\n        {/* Header Section */}\n        <motion.div \n          className=\"mb-8 relative z-10\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <motion.h1 \n              className=\"text-4xl font-bold bg-gradient-to-r from-white via-crypto-green to-crypto-blue bg-clip-text text-transparent\"\n              data-testid=\"page-title\"\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              Live Arbitrage Feed\n            </motion.h1>\n            <motion.div\n              className=\"flex items-center space-x-2 text-sm\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <div className=\"w-3 h-3 rounded-full bg-crypto-green animate-pulse\"></div>\n              <span className=\"text-gray-300\">Real-time market data</span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        {/* Arbitrage Opportunities */}\n        <motion.div \n          className=\"relative z-10\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n        >\n          {opportunitiesLoading ? (\n            <div className=\"text-center text-gray-400 py-12\">\n              <motion.div \n                className=\"w-16 h-16 border-4 border-crypto-blue border-t-transparent rounded-full mx-auto mb-4\"\n                animate={{ rotate: 360 }}\n                transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n              />\n              <p className=\"text-lg\">Scanning markets for arbitrage opportunities...</p>\n              <p className=\"text-sm mt-2 text-gray-500\">Analyzing price differences across exchanges</p>\n            </div>\n          ) : opportunities && opportunities.length > 0 ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {opportunities.map((opportunity: any, index: number) => (\n                <motion.div\n                  key={`${opportunity.symbol}-${opportunity.buyExchange}-${opportunity.sellExchange}-${index}`}\n                  initial={{ opacity: 0, y: 30, scale: 0.9 }}\n                  animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30, scale: isVisible ? 1 : 0.9 }}\n                  transition={{ duration: 0.6, delay: 0.8 + (index * 0.1) }}\n                  whileHover={{ scale: 1.02, y: -2 }}\n                >\n                  <CryptoCard\n                    symbol={opportunity.symbol}\n                    name={opportunity.name}\n                    buyExchange={opportunity.buyExchange}\n                    sellExchange={opportunity.sellExchange}\n                    buyPrice={opportunity.buyPrice}\n                    sellPrice={opportunity.sellPrice}\n                    profitPercentage={opportunity.profitPercentage}\n                    volume={opportunity.volume}\n                    isProfitable={index < 5} // Make first 5 show as most profitable\n                  />\n                </motion.div>\n              ))}\n            </div>\n          ) : (\n            <motion.div \n              className=\"text-center text-gray-400 py-12\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n              transition={{ duration: 0.6, delay: 0.8 }}\n            >\n              <div className=\"w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-r from-gray-600/20 to-gray-500/20 flex items-center justify-center text-4xl\">\n                📊\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">No Opportunities Found</h3>\n              <p className=\"text-gray-400 mb-4\">\n                Markets are stable right now. Check back in a few moments for new opportunities.\n              </p>\n              <motion.button\n                className=\"px-6 py-2 bg-crypto-blue/20 text-crypto-blue rounded-lg hover:bg-crypto-blue/30 transition-colors duration-300\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={() => window.location.reload()}\n              >\n                Refresh Data\n              </motion.button>\n            </motion.div>\n          )}\n        </motion.div>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":6070},"client/src/pages/change-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Shield, ArrowLeft, Eye, EyeOff } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function ChangePasswordPage() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [showPasswords, setShowPasswords] = useState({\n    current: false,\n    new: false,\n    confirm: false,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/password\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Changed\",\n        description: \"Your password has been successfully updated\",\n      });\n      setPasswordData({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Password Change Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleChangePassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"New password and confirm password do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword.length < 6) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    changePasswordMutation.mutate({\n      currentPassword: passwordData.currentPassword,\n      newPassword: passwordData.newPassword,\n    });\n  };\n\n  const togglePasswordVisibility = (field: 'current' | 'new' | 'confirm') => {\n    setShowPasswords(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-4 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"text-gray-400 hover:text-white mb-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          \n          <h1 className=\"text-3xl font-bold text-white mb-2 flex items-center gap-3\" data-testid=\"text-change-password-title\">\n            <Shield className=\"h-8 w-8\" />\n            Change Password\n          </h1>\n          <p className=\"text-gray-400\" data-testid=\"text-change-password-description\">\n            Update your account password for better security\n          </p>\n        </div>\n\n        <Card className=\"bg-slate-800/50 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Security Settings</CardTitle>\n            <CardDescription>\n              Change your password to keep your account secure\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <form onSubmit={handleChangePassword} className=\"space-y-6\">\n              <div>\n                <Label className=\"text-gray-300\" htmlFor=\"current-password\">Current Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"current-password\"\n                    type={showPasswords.current ? \"text\" : \"password\"}\n                    value={passwordData.currentPassword}\n                    onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}\n                    className=\"bg-slate-900 border-slate-600 text-white placeholder-gray-400 focus:border-green-500 pr-10\"\n                    placeholder=\"Enter current password\"\n                    required\n                    data-testid=\"input-current-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                    onClick={() => togglePasswordVisibility('current')}\n                    data-testid=\"toggle-current-password\"\n                  >\n                    {showPasswords.current ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <Separator className=\"bg-slate-600\" />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-gray-300\" htmlFor=\"new-password\">New Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"new-password\"\n                      type={showPasswords.new ? \"text\" : \"password\"}\n                      value={passwordData.newPassword}\n                      onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}\n                      className=\"bg-slate-900 border-slate-600 text-white placeholder-gray-400 focus:border-green-500 pr-10\"\n                      placeholder=\"Enter new password\"\n                      required\n                      minLength={6}\n                      data-testid=\"input-new-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                      onClick={() => togglePasswordVisibility('new')}\n                      data-testid=\"toggle-new-password\"\n                    >\n                      {showPasswords.new ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-gray-300\" htmlFor=\"confirm-password\">Confirm New Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"confirm-password\"\n                      type={showPasswords.confirm ? \"text\" : \"password\"}\n                      value={passwordData.confirmPassword}\n                      onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}\n                      className=\"bg-slate-900 border-slate-600 text-white placeholder-gray-400 focus:border-green-500 pr-10\"\n                      placeholder=\"Confirm new password\"\n                      required\n                      minLength={6}\n                      data-testid=\"input-confirm-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                      onClick={() => togglePasswordVisibility('confirm')}\n                      data-testid=\"toggle-confirm-password\"\n                    >\n                      {showPasswords.confirm ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {passwordData.newPassword && passwordData.confirmPassword && \n               passwordData.newPassword !== passwordData.confirmPassword && (\n                <div className=\"text-sm text-red-400\" data-testid=\"text-password-mismatch\">\n                  Passwords do not match\n                </div>\n              )}\n\n              <div className=\"bg-slate-900/50 rounded-lg p-4\">\n                <h4 className=\"text-sm font-medium text-gray-300 mb-2\">Password Requirements:</h4>\n                <ul className=\"text-sm text-gray-400 space-y-1\">\n                  <li>• At least 6 characters long</li>\n                  <li>• Different from your current password</li>\n                  <li>• Must match confirmation password</li>\n                </ul>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                disabled={\n                  changePasswordMutation.isPending || \n                  passwordData.newPassword !== passwordData.confirmPassword ||\n                  passwordData.newPassword.length < 6\n                }\n                data-testid=\"button-change-password\"\n              >\n                {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9991},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { MessageCircle, Send, Headphones, Users, Clock, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport type { ChatMessage } from \"@shared/schema\";\n\ninterface ChatData {\n  messages: ChatMessage[];\n  status: string;\n  isActive: boolean;\n  typingStatus?: string;\n}\n\ninterface ChatStatus {\n  status: string;\n  isActive: boolean;\n  onlineCount: number;\n  typingStatus: string;\n}\n\n// Typing indicator component\nfunction TypingIndicator() {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -10 }}\n      className=\"flex items-center space-x-1 text-gray-400 px-3 py-2\"\n    >\n      <span className=\"text-xs\">Someone is typing</span>\n      <div className=\"flex space-x-1\">\n        {[0, 1, 2].map((i) => (\n          <motion.div\n            key={i}\n            className=\"w-1 h-1 bg-gray-400 rounded-full\"\n            animate={{\n              scale: [1, 1.5, 1],\n              opacity: [0.5, 1, 0.5],\n            }}\n            transition={{\n              duration: 1.5,\n              repeat: Infinity,\n              delay: i * 0.2,\n            }}\n          />\n        ))}\n      </div>\n    </motion.div>\n  );\n}\n\nexport function ChatPage() {\n  const [message, setMessage] = useState(\"\");\n  const [supportSubject, setSupportSubject] = useState(\"\");\n  const [supportMessage, setSupportMessage] = useState(\"\");\n  const [showSupportModal, setShowSupportModal] = useState(false);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showTyping, setShowTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get chat messages\n  const { data: chatData } = useQuery<ChatData>({\n    queryKey: ['/api/chat/messages'],\n    refetchInterval: 3000, // Refetch every 3 seconds for real-time feel\n  });\n\n  // Get chat status with fluctuating online count\n  const { data: chatStatus } = useQuery<ChatStatus>({\n    queryKey: ['/api/chat/status'],\n    refetchInterval: 90000, // Update every 1.5 minutes for realistic fluctuation\n  });\n\n  // Send chat message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageText: string) => {\n      const response = await fetch('/api/chat/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ message: messageText }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to send message');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      // Show typing indicator briefly to simulate AI response\n      setShowTyping(true);\n      setTimeout(() => setShowTyping(false), 2000);\n      \n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: ['/api/chat/messages'] });\n      }, 2500);\n      \n      scrollToBottom();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send support ticket mutation\n  const sendSupportMutation = useMutation({\n    mutationFn: async (ticketData: { subject: string; message: string }) => {\n      const response = await fetch('/api/support/tickets', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(ticketData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to send support ticket');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setSupportSubject(\"\");\n      setSupportMessage(\"\");\n      setShowSupportModal(false);\n      setShowSuccessMessage(true);\n      \n      // Hide success message after 3s\n      setTimeout(() => setShowSuccessMessage(false), 3000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send support ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatData?.messages, showTyping]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || sendMessageMutation.isPending) return;\n    \n    if (!chatData?.isActive) {\n      toast({\n        title: \"Chat Closed\",\n        description: \"The chatroom is currently closed. It opens at 7:00 AM.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendMessageMutation.mutate(message.trim());\n  };\n\n  const handleSendSupport = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!supportSubject.trim() || !supportMessage.trim() || sendSupportMutation.isPending) return;\n    \n    sendSupportMutation.mutate({\n      subject: supportSubject.trim(),\n      message: supportMessage.trim(),\n    });\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800\">\n      {/* Header */}\n      <div className=\"bg-slate-800/50 border-b border-slate-700 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl font-bold text-white mb-3 flex items-center gap-3\">\n            💬 Community Chatroom\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Share your thoughts, ask questions, and connect with others 🚀\n          </p>\n          \n          {/* Online Users Count */}\n          <div className=\"mt-4 flex items-center gap-2\">\n            <div className=\"flex items-center gap-2 bg-green-600/20 border border-green-500/30 rounded-full px-3 py-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n              <span className=\"text-green-400 text-sm font-medium\">\n                🔴 {chatStatus?.onlineCount || 312} users online\n              </span>\n            </div>\n            \n            {!chatData?.isActive && (\n              <div className=\"flex items-center gap-2 bg-yellow-600/20 border border-yellow-500/30 rounded-full px-3 py-1\">\n                <Clock className=\"h-3 w-3 text-yellow-400\" />\n                <span className=\"text-yellow-400 text-sm\">Opens at 7:00 AM</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Chat Messages Container */}\n        <Card className=\"bg-slate-800/30 border-slate-700/50 backdrop-blur-sm\">\n          <CardContent className=\"p-0\">\n            {/* Messages Area */}\n            <div className=\"h-[500px] overflow-y-auto p-6 space-y-4\">\n              <AnimatePresence mode=\"popLayout\">\n                {chatData?.messages?.map((msg, index) => (\n                  <motion.div\n                    key={msg.id}\n                    initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                    animate={{ opacity: 1, y: 0, scale: 1 }}\n                    exit={{ opacity: 0, y: -20, scale: 0.95 }}\n                    transition={{ \n                      duration: 0.3,\n                      delay: index * 0.05, // Stagger animation\n                    }}\n                    className={`flex ${msg.isAI ? 'justify-start' : 'justify-start'}`}\n                    data-testid={`message-${msg.id}`}\n                  >\n                    <div className={`max-w-xs lg:max-w-md rounded-2xl px-4 py-3 shadow-lg ${\n                      msg.isAI \n                        ? 'bg-slate-700/80 text-gray-100 border border-slate-600/50' \n                        : 'bg-blue-600/90 text-white border border-blue-500/50'\n                    }`}>\n                      <div className=\"text-xs font-medium mb-1 opacity-75\">\n                        {msg.username}\n                      </div>\n                      <div className=\"text-sm leading-relaxed\">{msg.message}</div>\n                      <div className=\"text-xs opacity-50 mt-2\">\n                        {formatTime(msg.created_at)}\n                      </div>\n                    </div>\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n              \n              {/* Typing indicator */}\n              <AnimatePresence>\n                {(showTyping || (chatStatus?.typingStatus && chatData?.isActive)) && (\n                  <TypingIndicator />\n                )}\n              </AnimatePresence>\n              \n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* Message Input */}\n            <div className=\"border-t border-slate-700/50 p-6\">\n              <form onSubmit={handleSendMessage} className=\"flex gap-3\">\n                <Input\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  placeholder={chatData?.isActive ? \"Type your message... 💬🚀💰\" : \"Chat is closed\"}\n                  disabled={!chatData?.isActive || sendMessageMutation.isPending}\n                  className=\"bg-slate-900/50 border-slate-600 text-white placeholder:text-gray-400 focus:border-blue-500 focus:ring-blue-500/20\"\n                  maxLength={500}\n                  data-testid=\"input-chat-message\"\n                />\n                <Button\n                  type=\"submit\"\n                  disabled={!message.trim() || !chatData?.isActive || sendMessageMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 px-6\"\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </form>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Support Button */}\n        <div className=\"mt-6 text-center\">\n          <Button\n            onClick={() => setShowSupportModal(true)}\n            className=\"bg-purple-600 hover:bg-purple-700 text-white px-8 py-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n            data-testid=\"button-contact-support\"\n          >\n            <Headphones className=\"h-5 w-5 mr-2\" />\n            Contact Support 📩\n          </Button>\n        </div>\n      </div>\n\n      {/* Support Modal */}\n      <AnimatePresence>\n        {showSupportModal && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-6\"\n            onClick={() => setShowSupportModal(false)}\n          >\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.9 }}\n              className=\"bg-slate-800 rounded-xl p-8 max-w-md w-full border border-slate-700\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold text-white flex items-center gap-2\">\n                  📩 Contact Support\n                </h2>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowSupportModal(false)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <form onSubmit={handleSendSupport} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"support-subject\" className=\"text-white\">\n                    Subject\n                  </Label>\n                  <Input\n                    id=\"support-subject\"\n                    value={supportSubject}\n                    onChange={(e) => setSupportSubject(e.target.value)}\n                    placeholder=\"Brief description of your issue\"\n                    className=\"bg-slate-900/50 border-slate-600 text-white\"\n                    maxLength={100}\n                    data-testid=\"input-support-subject\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"support-message\" className=\"text-white\">\n                    Message\n                  </Label>\n                  <Textarea\n                    id=\"support-message\"\n                    value={supportMessage}\n                    onChange={(e) => setSupportMessage(e.target.value)}\n                    placeholder=\"Describe your issue in detail...\"\n                    className=\"bg-slate-900/50 border-slate-600 text-white min-h-32\"\n                    maxLength={1000}\n                    data-testid=\"input-support-message\"\n                  />\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  disabled={!supportSubject.trim() || !supportMessage.trim() || sendSupportMutation.isPending}\n                  className=\"w-full bg-green-600 hover:bg-green-700 py-3\"\n                  data-testid=\"button-send-support\"\n                >\n                  {sendSupportMutation.isPending ? \"Sending...\" : \"Send Support Ticket\"}\n                </Button>\n              </form>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Success Message */}\n      <AnimatePresence>\n        {showSuccessMessage && (\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 50 }}\n            className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-6 py-3 rounded-lg shadow-xl z-50\"\n          >\n            ✅ Ticket sent! We'll get back to you soon.\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":14879},"client/src/pages/contact.tsx":{"content":"import { Bot, Headphones, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\n\nexport function ContactPage() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark\">\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Header */}\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation('/dashboard')}\n              className=\"text-gray-400 hover:text-white\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Contact TradePilot</h1>\n              <p className=\"text-gray-400\">Choose how you'd like to get help</p>\n            </div>\n          </div>\n\n          {/* Contact Options */}\n          <div className=\"grid gap-6\">\n            {/* AI Chat Option */}\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1 }}\n            >\n              <Card\n                className=\"bg-gray-900/50 border-gray-700 hover:border-blue-500/50 transition-all cursor-pointer group\"\n                onClick={() => setLocation('/ai-chat')}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                      <Bot className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-white group-hover:text-blue-400 transition-colors\">\n                        Chat with AI 🤖\n                      </CardTitle>\n                      <CardDescription className=\"text-gray-400\">\n                        Get instant help from TradePilot AI Assistant\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-300 text-sm leading-relaxed\">\n                    Ask questions about trading strategies, profit calculations, market insights, or just have a friendly conversation. \n                    Available 24/7 with instant responses!\n                  </p>\n                  <div className=\"flex items-center gap-2 mt-3\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span className=\"text-xs text-green-400\">AI is online and ready</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Support Ticket Option */}\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n            >\n              <Card\n                className=\"bg-gray-900/50 border-gray-700 hover:border-green-500/50 transition-all cursor-pointer group\"\n                onClick={() => setLocation('/inbox')}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-emerald-600 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                      <Headphones className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-white group-hover:text-green-400 transition-colors\">\n                        Contact Support 📩\n                      </CardTitle>\n                      <CardDescription className=\"text-gray-400\">\n                        Create a support ticket for complex issues\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-300 text-sm leading-relaxed\">\n                    Need help with account issues, technical problems, or have detailed questions? \n                    Our support team will respond to your ticket within 24 hours.\n                  </p>\n                  <div className=\"flex items-center gap-2 mt-3\">\n                    <div className=\"w-2 h-2 bg-orange-400 rounded-full\"></div>\n                    <span className=\"text-xs text-orange-400\">Response within 24 hours</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n\n          {/* Quick Tips */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"mt-8\"\n          >\n            <Card className=\"bg-gray-900/30 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-gray-300\">💡 Quick Tips</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <p className=\"text-xs text-gray-400\">\n                  • Use AI Chat for quick questions and general help\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  • Use Support Tickets for account-specific issues\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  • AI can help with trading strategies and profit calculations\n                </p>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6042},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useArbitrageOpportunities } from \"@/hooks/use-crypto-prices\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport BalanceCard from \"@/components/ui/balance-card\";\nimport CryptoCard from \"@/components/ui/crypto-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport { motion } from \"framer-motion\";\nimport PWAInstallButton from \"@/components/ui/pwa-install-button\";\n\nexport default function Dashboard() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isVisible, setIsVisible] = useState(false);\n\n  const { data: investments } = useQuery({\n    queryKey: [\"/api/investments\"],\n    queryFn: () => fetchWithAuth(\"/investments\"),\n  });\n\n  const { data: plans } = useQuery({\n    queryKey: [\"/api/plans\"],\n    queryFn: () => fetchWithAuth(\"/plans\"),\n  });\n\n  const { data: arbitrageData, isLoading: arbitrageLoading } = useArbitrageOpportunities();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    } else if (user) {\n      setIsVisible(true);\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen hero-3d-bg flex items-center justify-center\">\n        <motion.div \n          className=\"text-white text-xl\"\n          animate={{ opacity: [1, 0.5, 1] }}\n          transition={{ duration: 1.5, repeat: Infinity }}\n        >\n          Loading Dashboard...\n        </motion.div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Calculate total earnings from investments\n  const totalEarnings = investments?.reduce((sum: number, inv: any) => \n    sum + parseFloat(inv.total_earned || \"0\"), 0\n  ) || 0;\n\n  return (\n    <MainLayout>\n      <div className=\"relative\">\n        {/* Floating Background Elements */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none hidden sm:block\">\n          <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-crypto-green/5 to-transparent blur-xl\"></div>\n          <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-crypto-blue/5 to-transparent blur-lg\"></div>\n          <div className=\"floating-3d absolute bottom-20 right-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-purple-500/3 to-blue-500/3 blur-2xl\"></div>\n        </div>\n\n        {/* Welcome Section */}\n        <motion.div \n          className=\"mb-8 relative z-10\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        >\n          <motion.h1 \n            className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\"\n            data-testid=\"page-title\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Welcome back, {user.username}!\n          </motion.h1>\n          <motion.p \n            className=\"text-gray-400 text-lg\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            Your AI trading dashboard is ready for action\n          </motion.p>\n        </motion.div>\n\n        {/* Balance Overview */}\n        <motion.div \n          className=\"mb-8 relative z-10\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n        >\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8 max-w-full\">\n            {[\n              {\n                title: \"Total Balance\",\n                value: `$${user.balance.toLocaleString()}`,\n                change: user.balance > 1000 ? \"+12.4% this week\" : \"Ready to invest\",\n                icon: (\n                  <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-green-400 to-emerald-600 shadow-lg flex items-center justify-center transform rotate-3 hover:rotate-0 transition-transform duration-300\">\n                    <div className=\"w-5 h-5 bg-white rounded-sm flex items-center justify-center text-green-600 font-black text-sm\">$</div>\n                  </div>\n                ),\n                gradient: \"from-green-500 to-emerald-500\",\n                delay: 0.8\n              },\n              {\n                title: \"Active Plans\",\n                value: investments?.length.toString() || \"0\",\n                change: \"Currently running\",\n                icon: (\n                  <div className=\"w-8 h-8 rounded-xl bg-gradient-to-br from-blue-400 to-cyan-600 shadow-lg flex items-center justify-center transform -rotate-12 hover:rotate-0 transition-transform duration-300\">\n                    <div className=\"w-6 h-4 bg-white rounded-sm flex items-center justify-center\">\n                      <div className=\"w-4 h-2 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full\"></div>\n                    </div>\n                  </div>\n                ),\n                gradient: \"from-blue-500 to-cyan-500\",\n                delay: 1.0\n              },\n              {\n                title: \"Total Earnings\",\n                value: `$${totalEarnings.toLocaleString()}`,\n                change: totalEarnings > 0 ? `+${((totalEarnings / (user.balance || 1)) * 100).toFixed(1)}% ROI` : \"Start earning today\",\n                icon: (\n                  <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-purple-400 to-pink-600 shadow-lg flex items-center justify-center transform rotate-12 hover:rotate-0 transition-transform duration-300\">\n                    <div className=\"flex flex-col space-y-px\">\n                      <div className=\"w-5 h-1 bg-white rounded-full\"></div>\n                      <div className=\"w-4 h-1 bg-white/80 rounded-full ml-1\"></div>\n                      <div className=\"w-3 h-1 bg-white/60 rounded-full ml-2\"></div>\n                    </div>\n                  </div>\n                ),\n                gradient: \"from-purple-500 to-pink-500\",\n                delay: 1.2\n              },\n              {\n                title: \"Referral Earnings\",\n                value: (user as any).referralEarnings ? `$${(user as any).referralEarnings.toLocaleString()}` : \"$0.00\",\n                change: (user as any).referralCount ? `From ${(user as any).referralCount} referrals` : \"Share your link to earn\",\n                icon: (\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-yellow-400 to-orange-600 shadow-lg flex items-center justify-center transform -rotate-6 hover:rotate-0 transition-transform duration-300\">\n                    <div className=\"flex space-x-px\">\n                      <div className=\"w-2 h-4 bg-white rounded-full\"></div>\n                      <div className=\"w-2 h-3 bg-white/80 rounded-full mt-0.5\"></div>\n                      <div className=\"w-2 h-2 bg-white/60 rounded-full mt-1\"></div>\n                    </div>\n                  </div>\n                ),\n                gradient: \"from-yellow-500 to-orange-500\",\n                delay: 1.4\n              }\n            ].map((card, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, scale: 0.9, y: 30 }}\n                animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9, y: isVisible ? 0 : 30 }}\n                transition={{ duration: 0.6, delay: card.delay }}\n                whileHover={{ scale: 1.05, y: -5 }}\n                className=\"group\"\n              >\n                <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-gray-700/50 hover:border-gray-600/50 transition-all duration-300 shadow-lg hover:shadow-xl card-float\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-gray-400 text-sm mb-1\">{card.title}</p>\n                        <p className=\"text-2xl font-bold text-white mb-2\">{card.value}</p>\n                        <p className=\"text-xs text-gray-500\">{card.change}</p>\n                      </div>\n                      <motion.div \n                        className={`w-12 h-12 rounded-xl bg-gradient-to-r ${card.gradient} flex items-center justify-center text-2xl`}\n                        animate={{ \n                          boxShadow: [\n                            \"0 0 20px rgba(255, 255, 255, 0.1)\",\n                            \"0 0 30px rgba(255, 255, 255, 0.2)\",\n                            \"0 0 20px rgba(255, 255, 255, 0.1)\"\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      >\n                        {card.icon}\n                      </motion.div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Live Arbitrage Preview */}\n        <motion.div \n          className=\"mb-8 relative z-10\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n          transition={{ duration: 0.8, delay: 1.6 }}\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <motion.h2 \n              className=\"text-2xl font-semibold text-white\"\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n              transition={{ duration: 0.6, delay: 1.8 }}\n            >\n              🚀 Live Arbitrage Opportunities\n            </motion.h2>\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 2.0 }}\n            >\n              <Button\n                variant=\"link\"\n                className=\"text-crypto-blue hover:text-crypto-green hover:underline text-sm transition-all duration-300 hover:scale-105\"\n                onClick={() => setLocation(\"/arbitrage\")}\n                data-testid=\"link-view-all-arbitrage\"\n              >\n                View All Opportunities →\n              </Button>\n            </motion.div>\n          </div>\n          \n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.95 }}\n            transition={{ duration: 0.8, delay: 2.2 }}\n          >\n            <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-gray-700/50 shadow-2xl card-float\">\n              <CardContent className=\"p-6\">\n                {arbitrageLoading ? (\n                  <motion.div \n                    className=\"text-center text-gray-400 py-8\"\n                    animate={{ opacity: [1, 0.5, 1] }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  >\n                    🔍 Scanning markets for arbitrage opportunities...\n                  </motion.div>\n                ) : (\n                  <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6\">\n                    {arbitrageData?.slice(0, 3).map((opportunity: any, index: number) => (\n                      <motion.div\n                        key={index}\n                        initial={{ opacity: 0, y: 30, scale: 0.9 }}\n                        animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30, scale: isVisible ? 1 : 0.9 }}\n                        transition={{ duration: 0.6, delay: 2.4 + (index * 0.2) }}\n                        whileHover={{ scale: 1.05, y: -5 }}\n                      >\n                        <CryptoCard\n                          symbol={opportunity.symbol}\n                          name={opportunity.name}\n                          buyExchange={opportunity.buyExchange}\n                          sellExchange={opportunity.sellExchange}\n                          buyPrice={opportunity.buyPrice}\n                          sellPrice={opportunity.sellPrice}\n                          profitPercentage={opportunity.profitPercentage}\n                          volume={opportunity.volume}\n                          isProfitable={index === 0}\n                        />\n                      </motion.div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </motion.div>\n        </motion.div>\n\n        {/* Active Investment Plans */}\n        <motion.div \n          className=\"mb-8 relative z-10\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n          transition={{ duration: 0.8, delay: 3.0 }}\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <motion.h2 \n              className=\"text-2xl font-semibold text-white\"\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n              transition={{ duration: 0.6, delay: 3.2 }}\n            >\n              💼 Your Active Investments\n            </motion.h2>\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 3.4 }}\n            >\n              <Button\n                className=\"crypto-gradient hover:opacity-90 transition-all duration-300 button-hover-lift\"\n                onClick={() => setLocation(\"/plans\")}\n                data-testid=\"button-browse-plans\"\n              >\n                📊 Browse Investment Plans\n              </Button>\n            </motion.div>\n          </div>\n          \n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.95 }}\n            transition={{ duration: 0.8, delay: 3.6 }}\n            className=\"relative\"\n          >\n            {/* Decorative background effects */}\n            <div className=\"absolute -inset-4 bg-gradient-to-r from-blue-600/10 via-purple-600/10 to-emerald-600/10 rounded-3xl blur-2xl\"></div>\n            \n            {investments && investments.length > 0 ? (\n              <div className=\"grid gap-4 sm:gap-6 lg:grid-cols-1\">\n                {investments.map((investment: any, index: number) => {\n                  // Calculate progress based on actual plan data\n                  const planData = plans?.find((p: any) => p.id === investment.planId);\n                  const totalDays = planData?.duration_days || 30;\n                  const daysRemaining = investment.days_remaining || totalDays;\n                  const daysElapsed = totalDays - daysRemaining;\n                  const progressPercent = (daysElapsed / totalDays) * 100;\n                  \n                  return (\n                    <motion.div\n                      key={investment.id}\n                      initial={{ opacity: 0, y: 30, rotateX: -15 }}\n                      animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30, rotateX: 0 }}\n                      transition={{ duration: 0.7, delay: 3.8 + (index * 0.2) }}\n                      whileHover={{ \n                        scale: 1.02, \n                        rotateX: 2,\n                        rotateY: -2,\n                        y: -8,\n                        transition: { duration: 0.3 }\n                      }}\n                      style={{ transformStyle: \"preserve-3d\" }}\n                      className=\"relative group\"\n                    >\n                      {/* 3D Card Container */}\n                      <div className=\"relative bg-gradient-to-br from-gray-900/80 via-gray-800/80 to-gray-900/80 backdrop-blur-xl border border-gray-600/50 rounded-2xl shadow-2xl overflow-hidden transition-all duration-500 group-hover:border-gray-500/70\">\n                        {/* Animated background gradient */}\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600/5 via-purple-600/5 to-emerald-600/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                        \n                        {/* Floating particles */}\n                        <div className=\"absolute inset-0 overflow-hidden\">\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={i}\n                              className=\"absolute w-1 h-1 bg-gradient-to-r from-blue-400 to-emerald-400 rounded-full opacity-60\"\n                              animate={{\n                                x: [0, 100, 0],\n                                y: [0, -60, 0],\n                                opacity: [0, 1, 0],\n                              }}\n                              transition={{\n                                duration: 6,\n                                delay: i * 1.5,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                              style={{\n                                left: `${20 + i * 30}%`,\n                                top: `${70 + i * 10}%`,\n                              }}\n                            />\n                          ))}\n                        </div>\n\n                        <div className=\"relative z-10 p-6\">\n                          {/* Header Section */}\n                          <div className=\"flex items-center justify-between mb-6\">\n                            <div className=\"flex items-center gap-4\">\n                              <motion.div\n                                whileHover={{ rotate: 360, scale: 1.1 }}\n                                transition={{ duration: 0.6 }}\n                                className=\"w-14 h-14 rounded-2xl bg-gradient-to-br from-emerald-500 via-blue-500 to-purple-500 shadow-lg flex items-center justify-center relative\"\n                                style={{ \n                                  boxShadow: \"0 8px 32px rgba(59, 130, 246, 0.3)\",\n                                  transform: \"translateZ(10px)\"\n                                }}\n                              >\n                                <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-2xl\"></div>\n                                <motion.div \n                                  animate={{ \n                                    scale: [1, 1.1, 1],\n                                    rotate: [0, 180, 360]\n                                  }}\n                                  transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\" }}\n                                  className=\"text-white text-xl\"\n                                >\n                                  🤖\n                                </motion.div>\n                              </motion.div>\n                              \n                              <div>\n                                <h3 className=\"text-xl font-bold text-white mb-1\">\n                                  {investment.plan_name || 'AI Trading Plan'}\n                                </h3>\n                                <div className=\"flex items-center gap-2 text-sm text-gray-400\">\n                                  <div className=\"w-2 h-2 bg-emerald-400 rounded-full animate-pulse\"></div>\n                                  <span>Active • Started {new Date(investment.created_at).toLocaleDateString()}</span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <motion.div \n                              className=\"text-right\"\n                              whileHover={{ scale: 1.05 }}\n                            >\n                              <div className=\"text-2xl font-bold text-emerald-400 mb-1\">\n                                +${parseFloat(investment.total_earned || \"0\").toFixed(2)}\n                              </div>\n                              <div className=\"text-sm text-gray-400\">Total Earned</div>\n                            </motion.div>\n                          </div>\n\n                          {/* Investment Details Grid */}\n                          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-4 mb-6\">\n                            <motion.div \n                              className=\"bg-gradient-to-br from-blue-500/20 to-cyan-500/20 rounded-xl p-3 border border-blue-500/30\"\n                              whileHover={{ scale: 1.05, rotateY: 5 }}\n                              style={{ transformStyle: \"preserve-3d\" }}\n                            >\n                              <div className=\"text-blue-300 text-xs font-medium mb-1\">Investment</div>\n                              <div className=\"text-white font-bold text-lg\">${parseFloat(investment.amount).toFixed(2)}</div>\n                            </motion.div>\n                            \n                            <motion.div \n                              className=\"bg-gradient-to-br from-emerald-500/20 to-green-500/20 rounded-xl p-3 border border-emerald-500/30\"\n                              whileHover={{ scale: 1.05, rotateY: -5 }}\n                              style={{ transformStyle: \"preserve-3d\" }}\n                            >\n                              <div className=\"text-emerald-300 text-xs font-medium mb-1\">Daily Profit</div>\n                              <div className=\"text-white font-bold text-lg\">${parseFloat(investment.daily_return || \"0\").toFixed(2)}</div>\n                            </motion.div>\n                            \n                            <motion.div \n                              className=\"bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-xl p-3 border border-purple-500/30\"\n                              whileHover={{ scale: 1.05, rotateY: 5 }}\n                              style={{ transformStyle: \"preserve-3d\" }}\n                            >\n                              <div className=\"text-purple-300 text-xs font-medium mb-1\">Days Left</div>\n                              <div className=\"text-white font-bold text-lg\">{investment.days_remaining || 0}</div>\n                            </motion.div>\n                            \n                            <motion.div \n                              className=\"bg-gradient-to-br from-yellow-500/20 to-orange-500/20 rounded-xl p-3 border border-yellow-500/30\"\n                              whileHover={{ scale: 1.05, rotateY: -5 }}\n                              style={{ transformStyle: \"preserve-3d\" }}\n                            >\n                              <div className=\"text-yellow-300 text-xs font-medium mb-1\">ROI</div>\n                              <div className=\"text-white font-bold text-lg\">\n                                {investment.plan_profit_percentage ? `${investment.plan_profit_percentage}%` : \"17.5%\"}\n                              </div>\n                            </motion.div>\n                          </div>\n\n                          {/* Progress Section */}\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm font-medium text-gray-300\">Investment Progress</span>\n                              <span className=\"text-sm font-bold text-blue-400\">\n                                {Math.min(100, progressPercent).toFixed(1)}%\n                              </span>\n                            </div>\n                            \n                            <div className=\"relative\">\n                              <div className=\"w-full h-3 bg-gray-700/50 rounded-full overflow-hidden\">\n                                <motion.div\n                                  initial={{ width: 0 }}\n                                  animate={{ width: isVisible ? `${Math.min(100, progressPercent)}%` : '0%' }}\n                                  transition={{ duration: 1.5, delay: 4.0 + (index * 0.2), ease: \"easeOut\" }}\n                                  className=\"h-full bg-gradient-to-r from-blue-500 via-purple-500 to-emerald-500 rounded-full relative\"\n                                >\n                                  <div className=\"absolute inset-0 bg-white/20 rounded-full\"></div>\n                                  <motion.div\n                                    animate={{\n                                      boxShadow: [\n                                        \"0 0 10px rgba(59, 130, 246, 0.5)\",\n                                        \"0 0 20px rgba(59, 130, 246, 0.8)\",\n                                        \"0 0 10px rgba(59, 130, 246, 0.5)\"\n                                      ]\n                                    }}\n                                    transition={{ duration: 2, repeat: Infinity }}\n                                    className=\"absolute inset-0 rounded-full\"\n                                  />\n                                </motion.div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex justify-between text-xs text-gray-400\">\n                              <span>Started: {new Date(investment.created_at).toLocaleDateString()}</span>\n                              <span>Status: {investment.is_active ? 'Active' : 'Completed'}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            ) : (\n              <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-gray-700/50 shadow-2xl card-float\">\n                <CardContent className=\"p-6\">\n                  <motion.div \n                    className=\"text-center py-12\"\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n                    transition={{ duration: 0.6, delay: 3.8 }}\n                  >\n                    <motion.div \n                      className=\"w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-br from-crypto-blue/20 to-crypto-green/20 shadow-xl flex items-center justify-center\"\n                      whileHover={{ rotate: 360, scale: 1.1 }}\n                      transition={{ duration: 0.8 }}\n                      style={{ transformStyle: \"preserve-3d\" }}\n                    >\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-crypto-blue to-crypto-green shadow-lg flex items-center justify-center transform hover:scale-110 transition-transform\">\n                        <div className=\"w-6 h-6 bg-white rounded-full flex items-center justify-center\">\n                          <div className=\"w-3 h-3 bg-gradient-to-br from-crypto-blue to-crypto-green rounded-full\"></div>\n                        </div>\n                      </div>\n                    </motion.div>\n                    <h3 className=\"text-xl font-semibold text-white mb-2\">Ready to Start Trading?</h3>\n                    <p className=\"text-gray-400 mb-6\">\n                      Choose from our AI-powered investment plans and start earning passive income today\n                    </p>\n                    <Button\n                      className=\"crypto-gradient hover:opacity-90 transition-all duration-300 button-hover-lift\"\n                      onClick={() => setLocation(\"/plans\")}\n                      data-testid=\"button-start-investing\"\n                    >\n                      🚀 Start Your First Investment\n                    </Button>\n                  </motion.div>\n                </CardContent>\n              </Card>\n            )}\n          </motion.div>\n        </motion.div>\n\n\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":28600},"client/src/pages/deposit.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nconst getDefaultCryptoOptions = (depositSettings: any = {}, wallets: any = {}) => [\n  {\n    symbol: \"BTC\",\n    name: \"Bitcoin\",\n    network: \"Bitcoin\",\n    minDeposit: depositSettings?.BTC?.minDeposit ? `${depositSettings.BTC.minDeposit} BTC` : \"0.001 BTC\",\n    confirmations: depositSettings?.BTC?.confirmations ? parseInt(depositSettings.BTC.confirmations) : 3,\n    logoUrl: \"https://assets.coincap.io/assets/icons/btc@2x.png\",\n    address: wallets?.BTC?.address || \"\",\n    qrCode: wallets?.BTC?.qrCode || \"\",\n  },\n  {\n    symbol: \"ETH\",\n    name: \"Ethereum\",\n    network: \"Ethereum\",\n    minDeposit: depositSettings?.ETH?.minDeposit ? `${depositSettings.ETH.minDeposit} ETH` : \"0.01 ETH\",\n    confirmations: depositSettings?.ETH?.confirmations ? parseInt(depositSettings.ETH.confirmations) : 12,\n    logoUrl: \"https://assets.coincap.io/assets/icons/eth@2x.png\",\n    address: wallets?.ETH?.address || \"\",\n    qrCode: wallets?.ETH?.qrCode || \"\",\n  },\n  {\n    symbol: \"USDT\",\n    name: \"Tether\",\n    network: \"Tron (TRC-20)\",\n    minDeposit: depositSettings?.USDT?.minDeposit ? `${depositSettings.USDT.minDeposit} USDT` : \"10 USDT\",\n    confirmations: depositSettings?.USDT?.confirmations ? parseInt(depositSettings.USDT.confirmations) : 20,\n    logoUrl: \"https://assets.coincap.io/assets/icons/usdt@2x.png\",\n    address: wallets?.USDT?.address || \"\",\n    qrCode: wallets?.USDT?.qrCode || \"\",\n  },\n];\n\nexport default function Deposit() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedCrypto, setSelectedCrypto] = useState<string>(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n\n  const { data: wallets } = useQuery({\n    queryKey: [\"/api/system/wallets\"],\n    queryFn: () => fetchWithAuth(\"/system/wallets\"),\n  });\n\n  const { data: deposits } = useQuery({\n    queryKey: [\"/api/deposits\"],\n    queryFn: () => fetchWithAuth(\"/deposits\"),\n  });\n\n  const { data: depositSettings } = useQuery({\n    queryKey: [\"/api/admin/deposit-settings\"],\n    queryFn: () => fetchWithAuth(\"/admin/deposit-settings\"),\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    } else if (user) {\n      setIsVisible(true);\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleCopyAddress = (address: string) => {\n    navigator.clipboard.writeText(address);\n    toast({\n      title: \"Address Copied!\",\n      description: \"Wallet address has been copied to clipboard\",\n    });\n  };\n\n  const getDepositAddress = (symbol: string) => {\n    // First check from the crypto options (which includes admin settings)\n    const crypto = cryptoOptions.find(c => c.symbol === symbol);\n    if (crypto && crypto.address) {\n      return crypto.address;\n    }\n    \n    // Fallback to direct wallet lookup\n    if (wallets && wallets[symbol] && wallets[symbol].address) {\n      return wallets[symbol].address;\n    }\n    return \"\";\n  };\n\n  const getQrCode = (symbol: string) => {\n    // First check from the crypto options (which includes admin settings)\n    const crypto = cryptoOptions.find(c => c.symbol === symbol);\n    if (crypto && crypto.qrCode) {\n      return crypto.qrCode;\n    }\n    \n    // Fallback to direct wallet lookup\n    if (wallets && wallets[symbol] && wallets[symbol].qrCode) {\n      return wallets[symbol].qrCode;\n    }\n    return null;\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">✓ Completed</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">⏳ Pending</Badge>;\n      case \"failed\":\n        return <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30\">✗ Failed</Badge>;\n      default:\n        return <Badge className=\"bg-gray-500/20 text-gray-400 border-gray-500/30\">● {status}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <MainLayout>\n        <div className=\"min-h-screen hero-3d-bg flex items-center justify-center\">\n          <motion.div \n            className=\"text-white text-xl\"\n            animate={{ opacity: [1, 0.5, 1] }}\n            transition={{ duration: 1.5, repeat: Infinity }}\n          >\n            Loading Deposit...\n          </motion.div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const cryptoOptions = getDefaultCryptoOptions(depositSettings, wallets);\n\n  return (\n    <MainLayout>\n      <div className=\"relative\">\n        {/* Floating Background Elements */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-green-500/5 to-transparent blur-xl\"></div>\n          <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-blue-500/5 to-transparent blur-lg\"></div>\n          <div className=\"floating-3d absolute bottom-20 right-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-emerald-500/3 to-teal-500/3 blur-2xl\"></div>\n        </div>\n\n        {/* Header Section */}\n        <motion.div \n          className=\"mb-8 text-center relative z-10\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        >\n          <motion.h1 \n            className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-white via-green-500 to-emerald-500 bg-clip-text text-transparent\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n          >\n            💳 Deposit Funds\n          </motion.h1>\n          <motion.p \n            className=\"text-xl text-gray-400 max-w-2xl mx-auto\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            Add funds to your account and start earning with AI-powered trading\n          </motion.p>\n        </motion.div>\n\n        {/* Current Balance */}\n        <motion.div \n          className=\"mb-8 relative z-10\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n        >\n          <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-gray-700/50 shadow-2xl card-float\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center space-x-4\">\n                <motion.div \n                  className=\"w-16 h-16 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center text-3xl font-bold text-white\"\n                  animate={{ \n                    boxShadow: [\n                      \"0 0 20px rgba(34, 197, 94, 0.3)\",\n                      \"0 0 30px rgba(34, 197, 94, 0.5)\",\n                      \"0 0 20px rgba(34, 197, 94, 0.3)\"\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  $\n                </motion.div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Current Balance</p>\n                  <p className=\"text-3xl font-bold text-white\">${user.balance.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Cryptocurrency Options */}\n        <motion.div \n          className=\"mb-8 relative z-10\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n          transition={{ duration: 0.8, delay: 0.8 }}\n        >\n          <motion.h2 \n            className=\"text-2xl font-semibold text-white mb-6\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n            transition={{ duration: 0.6, delay: 1.0 }}\n          >\n            🪙 Select Cryptocurrency\n          </motion.h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {cryptoOptions.map((crypto, index) => (\n              <motion.div\n                key={crypto.symbol}\n                initial={{ opacity: 0, y: 30, scale: 0.9 }}\n                animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30, scale: isVisible ? 1 : 0.9 }}\n                transition={{ duration: 0.6, delay: 1.2 + (index * 0.1) }}\n                whileHover={{ scale: 1.05, y: -5 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Card \n                  className={`cursor-pointer transition-all duration-300 card-float ${\n                    selectedCrypto === crypto.symbol\n                      ? 'bg-crypto-card/95 border-2 border-green-500/50 shadow-xl shadow-green-500/20'\n                      : 'bg-crypto-card/90 border border-gray-700/50 hover:border-gray-600/50'\n                  }`}\n                  onClick={() => setSelectedCrypto(crypto.symbol)}\n                  data-testid={`crypto-${crypto.symbol.toLowerCase()}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4\">\n                      <motion.div \n                        className=\"w-12 h-12 rounded-full bg-white p-1 flex items-center justify-center\"\n                        animate={selectedCrypto === crypto.symbol ? {\n                          boxShadow: [\n                            \"0 0 20px rgba(34, 197, 94, 0.3)\",\n                            \"0 0 30px rgba(34, 197, 94, 0.5)\",\n                            \"0 0 20px rgba(34, 197, 94, 0.3)\"\n                          ]\n                        } : {}}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      >\n                        <img \n                          src={crypto.logoUrl}\n                          alt={`${crypto.name} logo`}\n                          className=\"w-10 h-10 rounded-full\"\n                          onError={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.src = \"https://assets.coincap.io/assets/icons/btc@2x.png\";\n                          }}\n                        />\n                      </motion.div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-white\">{crypto.name}</h3>\n                        <p className=\"text-sm text-gray-400\">{crypto.network}</p>\n                        <p className=\"text-xs text-crypto-green\">Min: {crypto.minDeposit}</p>\n                      </div>\n                      {selectedCrypto === crypto.symbol && (\n                        <motion.div \n                          className=\"text-green-500 text-2xl\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          ✓\n                        </motion.div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Deposit Address */}\n        {selectedCrypto && (\n          <motion.div \n            className=\"mb-8 relative z-10\"\n            initial={{ opacity: 0, y: 50, scale: 0.95 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            transition={{ duration: 0.8 }}\n          >\n            <Card className=\"bg-crypto-card/95 backdrop-blur-xl border border-green-500/20 shadow-2xl card-float\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  <motion.div \n                    className=\"w-20 h-20 mx-auto mb-4 rounded-2xl bg-white p-3 flex items-center justify-center\"\n                    animate={{ \n                      boxShadow: [\n                        \"0 0 20px rgba(34, 197, 94, 0.3)\",\n                        \"0 0 30px rgba(34, 197, 94, 0.5)\",\n                        \"0 0 20px rgba(34, 197, 94, 0.3)\"\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <img \n                      src={cryptoOptions.find(c => c.symbol === selectedCrypto)?.logoUrl}\n                      alt={`${selectedCrypto} logo`}\n                      className=\"w-full h-full object-contain rounded-xl\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.src = \"https://assets.coincap.io/assets/icons/btc@2x.png\";\n                      }}\n                    />\n                  </motion.div>\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">\n                    Send {selectedCrypto} to this address\n                  </h3>\n                  <p className=\"text-gray-400\">\n                    Scan the QR code or copy the address below\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n                  {/* QR Code Section */}\n                  <div className=\"bg-crypto-dark/50 rounded-xl p-6\">\n                    <p className=\"text-gray-400 text-sm mb-4\">QR Code</p>\n                    <div className=\"flex justify-center\">\n                      {getQrCode(selectedCrypto) ? (\n                        <div className=\"bg-white p-4 rounded-xl\">\n                          <img \n                            src={getQrCode(selectedCrypto)!} \n                            alt={`${selectedCrypto} QR Code`} \n                            className=\"w-48 h-48 object-contain\"\n                            onError={(e) => {\n                              const target = e.target as HTMLImageElement;\n                              target.style.display = 'none';\n                            }}\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"w-48 h-48 bg-gray-700/50 rounded-xl flex items-center justify-center border-2 border-dashed border-gray-600\">\n                          <div className=\"text-center text-gray-400\">\n                            <div className=\"text-4xl mb-2\">📱</div>\n                            <p className=\"text-sm\">QR Code</p>\n                            <p className=\"text-xs\">Not Available</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Address Section */}\n                  <div className=\"bg-crypto-dark/50 rounded-xl p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <p className=\"text-gray-400 text-sm\">Deposit Address</p>\n                      <Button\n                        onClick={() => handleCopyAddress(getDepositAddress(selectedCrypto))}\n                        size=\"sm\"\n                        className=\"bg-gradient-to-r from-blue-500 to-cyan-500 hover:opacity-90 transition-all duration-300\"\n                        data-testid=\"button-copy-address\"\n                      >\n                        📋 Copy\n                      </Button>\n                    </div>\n                    <div className=\"bg-crypto-dark/30 rounded-lg p-4\">\n                      {getDepositAddress(selectedCrypto) ? (\n                        <p className=\"text-white font-mono text-sm break-all\">\n                          {getDepositAddress(selectedCrypto)}\n                        </p>\n                      ) : (\n                        <div className=\"text-center py-4\">\n                          <p className=\"text-gray-400 text-sm mb-2\">⚠️ Wallet address not configured</p>\n                          <p className=\"text-gray-500 text-xs\">Please contact support or try again later</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div className=\"bg-crypto-dark/30 rounded-xl p-4 text-center\">\n                    <p className=\"text-gray-400\">Network</p>\n                    <p className=\"text-white font-semibold\">\n                      {cryptoOptions.find(c => c.symbol === selectedCrypto)?.network}\n                    </p>\n                  </div>\n                  <div className=\"bg-crypto-dark/30 rounded-xl p-4 text-center\">\n                    <p className=\"text-gray-400\">Confirmations</p>\n                    <p className=\"text-white font-semibold\">\n                      {cryptoOptions.find(c => c.symbol === selectedCrypto)?.confirmations}\n                    </p>\n                  </div>\n                </div>\n\n                <motion.div \n                  className=\"mt-6 p-4 rounded-xl bg-gradient-to-r from-yellow-500/10 to-orange-500/10 border border-yellow-500/20\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.3 }}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <span className=\"text-yellow-500 text-lg\">⚠️</span>\n                    <div className=\"text-sm text-gray-300\">\n                      <p className=\"font-semibold mb-1\">Important Notice:</p>\n                      <ul className=\"space-y-1 text-xs\">\n                        <li>• Only send {selectedCrypto} to this address</li>\n                        <li>• Deposits will be credited after network confirmation</li>\n                        <li>• Minimum deposit: {cryptoOptions.find(c => c.symbol === selectedCrypto)?.minDeposit}</li>\n                        <li>• Any amount sent will be automatically converted to USD</li>\n                      </ul>\n                    </div>\n                  </div>\n                </motion.div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Recent Deposits */}\n        <motion.div \n          className=\"relative z-10\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n          transition={{ duration: 0.8, delay: 1.4 }}\n        >\n          <motion.h2 \n            className=\"text-2xl font-semibold text-white mb-6\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n            transition={{ duration: 0.6, delay: 1.6 }}\n          >\n            📋 Recent Deposits\n          </motion.h2>\n          \n          <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-gray-700/50 shadow-2xl card-float\">\n            <CardContent className=\"p-6\">\n              {deposits && deposits.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {deposits.slice(0, 5).map((deposit: any, index: number) => (\n                    <motion.div\n                      key={deposit.id}\n                      initial={{ opacity: 0, x: -30 }}\n                      animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -30 }}\n                      transition={{ duration: 0.6, delay: 1.8 + (index * 0.1) }}\n                      className=\"flex items-center justify-between p-4 rounded-xl bg-crypto-dark/30 hover:bg-crypto-dark/50 transition-all duration-300\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center text-sm\">\n                          💰\n                        </div>\n                        <div>\n                          <p className=\"text-white font-semibold\">\n                            {deposit.amount} {deposit.cryptocurrency}\n                          </p>\n                          <p className=\"text-gray-400 text-sm\">\n                            {new Date(deposit.created_at).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        {getStatusBadge(deposit.status)}\n                        <p className=\"text-gray-400 text-xs mt-1\">\n                          ID: {deposit.id.slice(-8)}\n                        </p>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              ) : (\n                <motion.div \n                  className=\"text-center py-12\"\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n                  transition={{ duration: 0.6, delay: 1.8 }}\n                >\n                  <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-gray-600/20 to-gray-500/20 flex items-center justify-center text-4xl\">\n                    📥\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">No deposits yet</h3>\n                  <p className=\"text-gray-400 mb-6\">\n                    Make your first deposit to start earning with AI trading\n                  </p>\n                  <Button\n                    onClick={() => setSelectedCrypto(cryptoOptions[0].symbol)}\n                    className=\"crypto-gradient hover:opacity-90 transition-all duration-300 button-hover-lift\"\n                    data-testid=\"button-make-first-deposit\"\n                  >\n                    🚀 Make First Deposit\n                  </Button>\n                </motion.div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":22662},"client/src/pages/edit-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { User, ArrowLeft } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function EditProfilePage() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const [profileData, setProfileData] = useState({\n    username: \"\",\n    email: \"\",\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n    if (user) {\n      setProfileData({\n        username: user.username,\n        email: user.email,\n      });\n    }\n  }, [user, isLoading, setLocation]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { username: string; email: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateProfile = async (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(profileData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-4 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"text-gray-400 hover:text-white mb-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          \n          <h1 className=\"text-3xl font-bold text-white mb-2 flex items-center gap-3\" data-testid=\"text-edit-profile-title\">\n            <User className=\"h-8 w-8\" />\n            Edit Profile\n          </h1>\n          <p className=\"text-gray-400\" data-testid=\"text-edit-profile-description\">\n            Update your account information\n          </p>\n        </div>\n\n        <Card className=\"bg-slate-800/50 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Account Information</CardTitle>\n            <CardDescription>\n              Update your username and email address\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <form onSubmit={handleUpdateProfile} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-gray-300\" htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    value={profileData.username}\n                    onChange={(e) => setProfileData({ ...profileData, username: e.target.value })}\n                    className=\"bg-slate-900 border-slate-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                    required\n                    data-testid=\"input-username\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-gray-300\" htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profileData.email}\n                    onChange={(e) => setProfileData({ ...profileData, email: e.target.value })}\n                    className=\"bg-slate-900 border-slate-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"bg-slate-900/50 rounded-lg p-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <div className=\"text-gray-400\">Referral Code</div>\n                    <div className=\"text-blue-400 font-semibold\" data-testid=\"text-referral-code\">\n                      {user.referralCode}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400\">Account Status</div>\n                    <div className=\"text-green-400 font-semibold\" data-testid=\"text-account-status\">\n                      Active\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400\">Member Since</div>\n                    <div className=\"text-gray-300\" data-testid=\"text-member-since\">\n                      {new Date(user.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400\">Account Balance</div>\n                    <div className=\"text-green-400 font-semibold\" data-testid=\"text-account-balance\">\n                      ${user.balance.toFixed(2)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={updateProfileMutation.isPending}\n                data-testid=\"button-update-profile\"\n              >\n                {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6385},"client/src/pages/inbox.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Inbox, Mail, MailOpen, MessageSquare, CheckCircle2, AlertCircle, Clock, Star, Trash2 } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport type { InboxMessage } from \"@shared/schema\";\n\ninterface InboxMessageWithRead extends InboxMessage {\n  is_read: boolean;\n}\n\nexport function InboxPage() {\n  const [selectedMessage, setSelectedMessage] = useState<InboxMessageWithRead | null>(null);\n  const queryClient = useQueryClient();\n\n  // Get inbox messages\n  const { data: messages = [], isLoading } = useQuery<InboxMessageWithRead[]>({\n    queryKey: ['/api/inbox/messages'],\n    refetchInterval: 5000, // Check for new messages every 5 seconds for faster updates\n  });\n\n  // Mark all messages as read mutation (when entering inbox)\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('PATCH', '/api/inbox/messages/mark-all-read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/inbox/messages'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/inbox/unread-count'] });\n    },\n  });\n\n  // Mark single message as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (messageId: string) => {\n      const response = await apiRequest('PATCH', `/api/inbox/messages/${messageId}/read`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/inbox/messages'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/inbox/unread-count'] });\n    },\n  });\n\n  // Delete message mutation\n  const deleteMessageMutation = useMutation({\n    mutationFn: async (messageId: string) => {\n      const response = await apiRequest('DELETE', `/api/inbox/messages/${messageId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/inbox/messages'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/inbox/unread-count'] });\n      setSelectedMessage(null); // Clear selected message after deletion\n    },\n  });\n\n  // Mark all messages as read when component mounts (user enters inbox)\n  useEffect(() => {\n    if (messages && messages.length > 0 && messages.some(msg => !msg.is_read)) {\n      markAllAsReadMutation.mutate();\n    }\n  }, [messages?.length]); // Only run when messages are first loaded or count changes\n\n  const handleMessageClick = (message: InboxMessageWithRead) => {\n    setSelectedMessage(message);\n    \n    // Mark as read if not already read\n    if (!message.is_read) {\n      markAsReadMutation.mutate(message.id);\n    }\n  };\n\n  const getMessageIcon = (type: string) => {\n    switch (type) {\n      case 'welcome':\n        return <Star className=\"h-5 w-5 text-yellow-500\" />;\n      case 'support_reply':\n        return <MessageSquare className=\"h-5 w-5 text-blue-500\" />;\n      case 'system':\n        return <AlertCircle className=\"h-5 w-5 text-orange-500\" />;\n      case 'notification':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-500\" />;\n      default:\n        return <Mail className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getMessageTypeLabel = (type: string) => {\n    switch (type) {\n      case 'welcome':\n        return 'Welcome';\n      case 'support_reply':\n        return 'Support Reply';\n      case 'system':\n        return 'System';\n      case 'notification':\n        return 'Notification';\n      default:\n        return 'Message';\n    }\n  };\n\n  const formatDate = (timestamp: string) => {\n    return new Date(timestamp).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const unreadCount = messages.filter(msg => !msg.is_read).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-slate-700 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-1 space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-20 bg-slate-700 rounded\"></div>\n                ))}\n              </div>\n              <div className=\"lg:col-span-2\">\n                <div className=\"h-96 bg-slate-700 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-white mb-2 flex items-center gap-3\" data-testid=\"text-inbox-title\">\n            <Inbox className=\"h-8 w-8\" />\n            Inbox\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\" data-testid=\"badge-unread-count\">\n                {unreadCount} unread\n              </Badge>\n            )}\n          </h1>\n          <p className=\"text-gray-400\" data-testid=\"text-inbox-description\">\n            Your messages, support replies, and notifications\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Message List */}\n          <div className=\"lg:col-span-1 space-y-3\">\n            <h2 className=\"text-xl font-semibold text-white mb-4\">Messages ({messages.length})</h2>\n            \n            {messages.length === 0 ? (\n              <Card className=\"bg-slate-800/50 border-slate-700\">\n                <CardContent className=\"p-6 text-center\">\n                  <Mail className=\"h-12 w-12 text-gray-500 mx-auto mb-4\" />\n                  <p className=\"text-gray-400\">No messages yet</p>\n                  <p className=\"text-sm text-gray-500 mt-2\">\n                    You'll receive welcome messages, support replies, and notifications here\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-2\">\n                <AnimatePresence>\n                  {messages.map((message) => (\n                    <motion.div\n                      key={message.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -20 }}\n                      className={`cursor-pointer transition-all duration-200 ${\n                        selectedMessage?.id === message.id\n                          ? 'ring-2 ring-blue-500'\n                          : ''\n                      }`}\n                      onClick={() => handleMessageClick(message)}\n                      data-testid={`message-item-${message.id}`}\n                    >\n                      <Card className={`bg-slate-800/50 border-slate-700 hover:bg-slate-800/70 ${\n                        !message.is_read ? 'border-blue-500/30' : ''\n                      }`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex items-center gap-2\">\n                              {getMessageIcon(message.type)}\n                              {!message.is_read && (\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                              )}\n                            </div>\n                            <Badge \n                              variant=\"outline\" \n                              className=\"text-xs\"\n                            >\n                              {getMessageTypeLabel(message.type)}\n                            </Badge>\n                          </div>\n                          \n                          <h3 className={`font-medium mb-1 ${\n                            !message.is_read ? 'text-white' : 'text-gray-300'\n                          }`}>\n                            {message.title}\n                          </h3>\n                          \n                          <p className=\"text-xs text-gray-500\">\n                            {formatDate(message.created_at)}\n                          </p>\n                        </CardContent>\n                      </Card>\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              </div>\n            )}\n          </div>\n\n          {/* Message Detail */}\n          <div className=\"lg:col-span-2\">\n            {selectedMessage ? (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                className=\"space-y-6\"\n              >\n                <Card className=\"bg-slate-800/50 border-slate-700\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        {getMessageIcon(selectedMessage.type)}\n                        <div>\n                          <CardTitle className=\"text-white\" data-testid=\"text-selected-message-title\">\n                            {selectedMessage.title}\n                          </CardTitle>\n                          <CardDescription>\n                            <Badge variant=\"outline\" className=\"mr-2\">\n                              {getMessageTypeLabel(selectedMessage.type)}\n                            </Badge>\n                            {formatDate(selectedMessage.created_at)}\n                          </CardDescription>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        {!selectedMessage.is_read && (\n                          <Badge variant=\"default\" className=\"bg-blue-600\">\n                            New\n                          </Badge>\n                        )}\n                        \n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"text-red-400 hover:text-red-300 hover:bg-red-500/10\"\n                              data-testid=\"button-delete-message\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent className=\"bg-slate-800 border-slate-700\">\n                            <AlertDialogHeader>\n                              <AlertDialogTitle className=\"text-white\">Delete Message</AlertDialogTitle>\n                              <AlertDialogDescription className=\"text-gray-300\">\n                                Are you sure you want to delete this message? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel className=\"bg-slate-700 hover:bg-slate-600 text-white border-slate-600\">\n                                Cancel\n                              </AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deleteMessageMutation.mutate(selectedMessage.id)}\n                                className=\"bg-red-600 hover:bg-red-700 text-white\"\n                                data-testid=\"button-confirm-delete\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div \n                      className=\"prose prose-invert max-w-none\"\n                      data-testid=\"text-selected-message-content\"\n                    >\n                      {selectedMessage.content.split('\\n').map((paragraph, index) => (\n                        <p key={index} className=\"text-gray-300 leading-relaxed mb-4\">\n                          {paragraph}\n                        </p>\n                      ))}\n                    </div>\n                    \n                    {selectedMessage.ticket_id && (\n                      <div className=\"mt-6 p-4 bg-slate-900/50 rounded-lg\">\n                        <div className=\"flex items-center gap-2 text-sm text-gray-400\">\n                          <MessageSquare className=\"h-4 w-4\" />\n                          <span>Support Ticket ID: {selectedMessage.ticket_id}</span>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ) : (\n              <Card className=\"bg-slate-800/50 border-slate-700 h-96 flex items-center justify-center\">\n                <CardContent className=\"text-center\">\n                  <MailOpen className=\"h-16 w-16 text-gray-500 mx-auto mb-4\" />\n                  <p className=\"text-gray-400 text-lg mb-2\">Select a message to read</p>\n                  <p className=\"text-gray-500 text-sm\">\n                    Choose a message from the list to view its content\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14351},"client/src/pages/investment-plans.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { motion } from \"framer-motion\";\n\nexport default function InvestmentPlans() {\n  const { user, isLoading, refreshUser } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedPlan, setSelectedPlan] = useState<any>(null);\n  const [investmentAmount, setInvestmentAmount] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const { data: plans, isLoading: plansLoading } = useQuery({\n    queryKey: [\"/api/plans\"],\n    queryFn: () => fetchWithAuth(\"/plans\"),\n  });\n\n  const investMutation = useMutation({\n    mutationFn: ({ planId, amount }: { planId: string; amount: number }) =>\n      apiRequest(\"POST\", \"/api/investments\", { planId, amount }).then(res => res.json()),\n    onSuccess: async () => {\n      toast({\n        title: \"Investment Activated!\",\n        description: \"Your AI trading plan is now active and generating returns.\",\n      });\n      setIsDialogOpen(false);\n      setInvestmentAmount(\"\");\n      setSelectedPlan(null);\n      \n      // Refresh all data immediately\n      await refreshUser(); // Update balance in auth context\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      \n      // Redirect to dashboard to see the new investment\n      setTimeout(() => {\n        window.location.href = \"/dashboard\";\n      }, 1000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Investment Failed\",\n        description: error.message || \"Failed to create investment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    } else if (user) {\n      setIsVisible(true);\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleInvest = (plan: any) => {\n    setSelectedPlan(plan);\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmitInvestment = () => {\n    if (!selectedPlan || !investmentAmount) return;\n\n    const amount = parseFloat(investmentAmount);\n    const minAmount = selectedPlan.min_deposit;\n    const maxAmount = selectedPlan.max_deposit;\n    const userBalance = user?.balance || 0;\n\n    if (amount < minAmount) {\n      toast({\n        title: \"Amount Too Low\",\n        description: `Minimum investment is $${minAmount}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (amount > maxAmount) {\n      toast({\n        title: \"Amount Too High\",\n        description: `Maximum investment is $${maxAmount}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (amount > userBalance) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: \"You don't have enough balance for this investment\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    investMutation.mutate({\n      planId: selectedPlan.id,\n      amount,\n    });\n  };\n\n  const getPlanIcon = (name: string) => {\n    if (name.toLowerCase().includes(\"starter\")) return \"🤖\";\n    if (name.toLowerCase().includes(\"professional\")) return \"⚡\";\n    if (name.toLowerCase().includes(\"elite\")) return \"👑\";\n    return \"🚀\";\n  };\n\n  const getPlanColor = (name: string) => {\n    if (name.toLowerCase().includes(\"starter\")) return \"from-blue-500 to-cyan-500\";\n    if (name.toLowerCase().includes(\"professional\")) return \"from-crypto-green to-emerald-500\";\n    if (name.toLowerCase().includes(\"elite\")) return \"from-yellow-500 to-orange-500\";\n    return \"from-crypto-blue to-blue-600\";\n  };\n\n  const isPlanPopular = (name: string) => name.toLowerCase().includes(\"professional\");\n  const isPlanPremium = (name: string) => name.toLowerCase().includes(\"elite\");\n\n  if (isLoading || plansLoading) {\n    return (\n      <MainLayout>\n        <div className=\"min-h-screen hero-3d-bg flex items-center justify-center\">\n          <motion.div \n            className=\"text-white text-xl\"\n            animate={{ opacity: [1, 0.5, 1] }}\n            transition={{ duration: 1.5, repeat: Infinity }}\n          >\n            Loading Investment Plans...\n          </motion.div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <MainLayout>\n      <div className=\"relative\">\n        {/* Floating Background Elements */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-crypto-green/5 to-transparent blur-xl\"></div>\n          <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-crypto-blue/5 to-transparent blur-lg\"></div>\n          <div className=\"floating-3d absolute bottom-20 right-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-purple-500/3 to-blue-500/3 blur-2xl\"></div>\n        </div>\n\n        {/* Header Section */}\n        <motion.div \n          className=\"mb-12 text-center relative z-10\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        >\n          <motion.h1 \n            className=\"text-5xl font-bold mb-4 bg-gradient-to-r from-white via-crypto-green to-crypto-blue bg-clip-text text-transparent\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n          >\n            🚀 AI Trading Plans\n          </motion.h1>\n          <motion.p \n            className=\"text-xl text-gray-400 max-w-3xl mx-auto\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            Choose from our AI-powered investment plans and let advanced algorithms generate passive income for you\n          </motion.p>\n          \n          <motion.div \n            className=\"mt-8 flex items-center justify-center space-x-8 text-sm text-gray-400\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: isVisible ? 1 : 0 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-crypto-green text-lg\">✓</span>\n              <span>24/7 AI Trading</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-crypto-green text-lg\">✓</span>\n              <span>Daily Returns</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-crypto-green text-lg\">✓</span>\n              <span>Risk Management</span>\n            </div>\n          </motion.div>\n        </motion.div>\n\n        {/* Plans Grid */}\n        <motion.div \n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 relative z-10\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: isVisible ? 1 : 0 }}\n          transition={{ duration: 0.8, delay: 0.8 }}\n        >\n          {plans?.map((plan: any, index: number) => (\n            <motion.div\n              key={plan.id}\n              initial={{ opacity: 0, y: 50, scale: 0.9 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50, scale: isVisible ? 1 : 0.9 }}\n              transition={{ duration: 0.6, delay: 1.0 + (index * 0.2) }}\n              whileHover={{ scale: 1.05, y: -10 }}\n              className=\"relative group\"\n            >\n              {/* Popular/Premium Badge */}\n              {(isPlanPopular(plan.name) || isPlanPremium(plan.name)) && (\n                <motion.div \n                  className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 z-20\"\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5, delay: 1.2 + (index * 0.2) }}\n                >\n                  <div className={`px-4 py-2 rounded-full text-xs font-bold text-white shadow-lg ${\n                    isPlanPopular(plan.name) ? 'bg-gradient-to-r from-crypto-green to-emerald-500' : 'bg-gradient-to-r from-yellow-500 to-orange-500'\n                  }`}>\n                    {isPlanPopular(plan.name) ? '🔥 MOST POPULAR' : '⭐ PREMIUM'}\n                  </div>\n                </motion.div>\n              )}\n\n              <Card className={`h-full bg-crypto-card/90 backdrop-blur-xl border-2 transition-all duration-300 shadow-2xl card-float ${\n                isPlanPopular(plan.name) ? 'border-crypto-green/50 hover:border-crypto-green' : \n                isPlanPremium(plan.name) ? 'border-yellow-500/50 hover:border-yellow-500' :\n                'border-gray-700/50 hover:border-gray-600'\n              }`}>\n                <CardContent className=\"p-8\">\n                  {/* Plan Header */}\n                  <div className=\"text-center mb-8\">\n                    <motion.div \n                      className={`w-20 h-20 mx-auto mb-4 rounded-2xl bg-gradient-to-r ${getPlanColor(plan.name)} flex items-center justify-center text-4xl shadow-lg`}\n                      animate={{ \n                        boxShadow: [\n                          \"0 0 20px rgba(255, 255, 255, 0.1)\",\n                          \"0 0 30px rgba(255, 255, 255, 0.2)\",\n                          \"0 0 20px rgba(255, 255, 255, 0.1)\"\n                        ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      {getPlanIcon(plan.name)}\n                    </motion.div>\n                    <h3 className=\"text-2xl font-bold text-white mb-2\">{plan.name}</h3>\n                    <p className=\"text-gray-400 text-sm\">{plan.description}</p>\n                  </div>\n\n                  {/* Plan Stats */}\n                  <div className=\"space-y-6 mb-8\">\n                    <div className=\"text-center\">\n                      <div className=\"text-4xl font-bold text-white mb-2\">\n                        {plan.profit_percentage}%\n                      </div>\n                      <div className=\"text-sm text-gray-400\">Daily Return</div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"bg-crypto-dark/50 rounded-xl p-4 text-center\">\n                        <div className=\"text-white font-semibold\">${plan.min_deposit.toLocaleString()}</div>\n                        <div className=\"text-gray-400\">Min Deposit</div>\n                      </div>\n                      <div className=\"bg-crypto-dark/50 rounded-xl p-4 text-center\">\n                        <div className=\"text-white font-semibold\">${plan.max_deposit.toLocaleString()}</div>\n                        <div className=\"text-gray-400\">Max Deposit</div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"bg-crypto-dark/50 rounded-xl p-4 text-center\">\n                        <div className=\"text-white font-semibold\">{plan.duration_days} Days</div>\n                        <div className=\"text-gray-400\">Duration</div>\n                      </div>\n                      <div className=\"bg-crypto-dark/50 rounded-xl p-4 text-center\">\n                        <div className=\"text-crypto-green font-semibold\">\n                          {(plan.profit_percentage * plan.duration_days).toFixed(1)}%\n                        </div>\n                        <div className=\"text-gray-400\">Total ROI</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Features */}\n                  <div className=\"mb-8\">\n                    <h4 className=\"text-white font-semibold mb-4\">✨ Plan Features</h4>\n                    <div className=\"space-y-3\">\n                      {plan.features?.map((feature, idx) => (\n                        <div key={idx} className=\"flex items-center space-x-3 text-sm\">\n                          <span className=\"text-crypto-green\">✓</span>\n                          <span className=\"text-gray-300\">{feature}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Action Button */}\n                  <Button\n                    onClick={() => handleInvest(plan)}\n                    className={`w-full py-3 text-lg font-semibold rounded-xl transition-all duration-300 button-hover-lift ${\n                      isPlanPopular(plan.name) ? 'crypto-gradient' : \n                      isPlanPremium(plan.name) ? 'bg-gradient-to-r from-yellow-500 to-orange-500 hover:opacity-90' :\n                      'bg-gradient-to-r from-blue-500 to-cyan-500 hover:opacity-90'\n                    }`}\n                    data-testid={`invest-${plan.id}`}\n                  >\n                    {isPlanPremium(plan.name) ? '👑 Invest Now' : '🚀 Start Trading'}\n                  </Button>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n\n        {/* Investment Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"bg-crypto-card/95 backdrop-blur-xl border border-gray-700 max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl font-bold text-white\">\n                💰 Invest in {selectedPlan?.name}\n              </DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Enter your investment amount to start earning with AI trading\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-6 mt-6\">\n              <div className=\"bg-crypto-dark/50 rounded-xl p-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n                  <div>\n                    <div className=\"text-gray-400\">Daily Return</div>\n                    <div className=\"text-crypto-green font-semibold\">\n                      {selectedPlan?.profit_percentage}%\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400\">Duration</div>\n                    <div className=\"text-white font-semibold\">\n                      {selectedPlan?.duration_days} days\n                    </div>\n                  </div>\n                </div>\n\n                {/* Dynamic Profit Calculations */}\n                {investmentAmount && !isNaN(parseFloat(investmentAmount)) && (\n                  <div className=\"border-t border-gray-600 pt-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"bg-gradient-to-r from-blue-500/20 to-cyan-500/20 rounded-lg p-3\">\n                        <div className=\"text-blue-300 text-xs font-medium\">Daily Profit</div>\n                        <div className=\"text-blue-100 font-bold text-lg\">\n                          ${((parseFloat(investmentAmount) * (selectedPlan?.profit_percentage || 0)) / 100).toFixed(2)}\n                        </div>\n                      </div>\n                      <div className=\"bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-lg p-3\">\n                        <div className=\"text-green-300 text-xs font-medium\">Total Profit</div>\n                        <div className=\"text-green-100 font-bold text-lg\">\n                          ${((parseFloat(investmentAmount) * (selectedPlan?.profit_percentage || 0) * (selectedPlan?.duration_days || 0)) / 100).toFixed(2)}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <div className=\"text-xs text-gray-400\">Total Return</div>\n                      <div className=\"text-yellow-400 font-bold text-lg\">\n                        ${(parseFloat(investmentAmount) + ((parseFloat(investmentAmount) * (selectedPlan?.profit_percentage || 0) * (selectedPlan?.duration_days || 0)) / 100)).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-gray-300\">Investment Amount</Label>\n                <Input\n                  type=\"number\"\n                  placeholder={`Min: $${selectedPlan?.min_deposit} - Max: $${selectedPlan?.max_deposit}`}\n                  value={investmentAmount}\n                  onChange={(e) => setInvestmentAmount(e.target.value)}\n                  className=\"bg-white/90 border-gray-600 text-black placeholder-gray-500 focus:border-crypto-green focus:bg-white\"\n                  data-testid=\"input-investment-amount\"\n                />\n                <div className=\"text-sm text-gray-400\">\n                  Your balance: ${user?.balance?.toLocaleString() || '0'}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  className=\"flex-1 border-gray-600 text-gray-300 hover:text-white\"\n                  data-testid=\"button-cancel-investment\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSubmitInvestment}\n                  disabled={investMutation.isPending}\n                  className=\"flex-1 crypto-gradient\"\n                  data-testid=\"button-confirm-investment\"\n                >\n                  {investMutation.isPending ? (\n                    <motion.div \n                      className=\"flex items-center space-x-2\"\n                      animate={{ opacity: [1, 0.5, 1] }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                      <span>Investing...</span>\n                    </motion.div>\n                  ) : (\n                    \"🚀 Confirm Investment\"\n                  )}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":19215},"client/src/pages/landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport BrandLogo from \"@/components/ui/brand-logo\";\n\n// Import the generated images\nimport heroImage from \"@assets/generated_images/Crypto_trading_hero_image_ecf83401.png\";\nimport aiAutomationImage from \"@assets/generated_images/AI_automation_feature_image_2cb8678c.png\";\nimport securityImage from \"@assets/generated_images/Security_feature_image_e75fdd32.png\";\nimport portfolioImage from \"@assets/generated_images/Portfolio_dashboard_image_daeb41b4.png\";\nimport tradingImage from \"@assets/generated_images/24/7_trading_image_5e5bfe2d.png\";\n\n// Import partner logos\nimport kucoinLogo from \"@assets/lg-67add290548ff-Kucoin_1755678321594.webp\";\nimport binanceLogo from \"@assets/Binance-Logo.wine_1755678321693.png\";\nimport coinbaseLogo from \"@assets/coinbase-logo-full-text_1755678321735.webp\";\nimport okxLogo from \"@assets/images (2)_1755679363454.png\";\nimport krakenLogo from \"@assets/kraken_300x300@x2_1755678321817.png\";\nimport bybitLogo from \"@assets/bybit_300x300@x2_1755678321875.png\";\nimport gateLogo from \"@assets/images_1755679363507.png\";\nimport huobiLogo from \"@assets/images (1)_1755679363565.png\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n  const [adminClicks, setAdminClicks] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleLogoClick = async () => {\n    setAdminClicks(prev => prev + 1);\n    if (adminClicks + 1 === 5) {\n      const password = prompt(\"Enter admin password:\");\n      if (password) {\n        try {\n          const response = await fetch(\"/api/admin/access\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ password }),\n          });\n          \n          const result = await response.json();\n          \n          if (result.success) {\n            localStorage.setItem(\"admin_access\", \"true\");\n            localStorage.setItem(\"token\", result.token);\n            localStorage.setItem(\"user\", JSON.stringify(result.user));\n            setLocation(\"/admin\");\n          } else {\n            alert(\"Access Denied\");\n          }\n        } catch (error) {\n          console.error(\"Admin access error:\", error);\n          alert(\"Access Denied\");\n        }\n      }\n      setAdminClicks(0);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark relative overflow-hidden\">\n      {/* Animated Background */}\n      <div className=\"hero-3d-bg min-h-screen relative\">\n        \n        {/* Floating Elements */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-crypto-blue/20 to-transparent blur-xl\"></div>\n          <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-crypto-green/20 to-transparent blur-lg\"></div>\n          <div className=\"floating-3d absolute bottom-20 left-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-blue-500/10 to-purple-500/10 blur-2xl\"></div>\n        </div>\n\n        {/* Header */}\n        <header className=\"relative z-20 px-4 sm:px-6 py-4\">\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <BrandLogo \n              onClick={handleLogoClick}\n              data-testid=\"logo\"\n              className=\"flex-shrink-0\"\n            />\n            \n            <motion.div \n              className=\"hidden lg:flex items-center space-x-8\"\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : -20 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n            >\n              <a href=\"#features\" className=\"text-gray-300 hover:text-white transition-all duration-300 hover:scale-105\">Features</a>\n              <a href=\"#how-it-works\" className=\"text-gray-300 hover:text-white transition-all duration-300 hover:scale-105\">How It Works</a>\n              <a href=\"#plans\" className=\"text-gray-300 hover:text-white transition-all duration-300 hover:scale-105\">Plans</a>\n              <a href=\"#testimonials\" className=\"text-gray-300 hover:text-white transition-all duration-300 hover:scale-105\">Reviews</a>\n            </motion.div>\n            \n            <motion.div \n              className=\"flex items-center space-x-2 sm:space-x-4 flex-shrink-0\"\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 50 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n            >\n              <Button \n                variant=\"ghost\" \n                className=\"text-gray-300 hover:text-white transition-all duration-300 hover:scale-105 px-2 sm:px-4\"\n                onClick={() => setLocation(\"/login\")}\n                data-testid=\"button-login\"\n              >\n                Login\n              </Button>\n              <Button \n                className=\"crypto-gradient hover:opacity-90 transition-all duration-300 transform hover:scale-105 font-medium px-3 py-1.5 text-xs whitespace-nowrap\"\n                onClick={() => setLocation(\"/register\")}\n                data-testid=\"button-signup\"\n              >\n                Start Trading\n              </Button>\n            </motion.div>\n          </div>\n        </header>\n\n        {/* Hero Section */}\n        <section className=\"relative z-10 px-6 pt-16 pb-24\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n              \n              {/* Hero Content */}\n              <div className=\"space-y-8\">\n                <motion.div\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n                  transition={{ duration: 1, delay: 0.6 }}\n                >\n                  <span className=\"inline-flex items-center px-6 py-3 rounded-full bg-gradient-to-r from-crypto-blue/20 to-crypto-green/20 text-crypto-blue text-sm font-semibold border border-crypto-blue/30 backdrop-blur-sm shimmer\">\n                    🤖 Advanced AI Technology • Live Trading • 24/7 Automation\n                  </span>\n                </motion.div>\n                \n                <motion.h1 \n                  className=\"text-4xl md:text-6xl lg:text-7xl font-black leading-tight\"\n                  initial={{ opacity: 0, y: 50 }}\n                  animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}\n                  transition={{ duration: 1.2, delay: 0.8 }}\n                >\n                  <span className=\"text-white\">AI-Powered</span><br />\n                  <span className=\"bg-gradient-to-r from-crypto-blue via-crypto-green to-blue-400 bg-clip-text text-transparent\">\n                    Crypto Arbitrage\n                  </span><br />\n                  <span className=\"text-white\">Revolution</span>\n                </motion.h1>\n                \n                <motion.p \n                  className=\"text-xl md:text-2xl text-gray-300 leading-relaxed max-w-2xl\"\n                  initial={{ opacity: 0, x: -30 }}\n                  animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -30 }}\n                  transition={{ duration: 1, delay: 1.2 }}\n                >\n                  Unlock the power of artificial intelligence to maximize your cryptocurrency profits. Our cutting-edge algorithms scan <span className=\"text-crypto-green font-bold\">50+ exchanges</span> in real-time, identifying profitable arbitrage opportunities and executing trades automatically while you sleep.\n                </motion.p>\n                \n                <motion.div \n                  className=\"flex flex-col sm:flex-row gap-6 pt-4\"\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n                  transition={{ duration: 1, delay: 1.6 }}\n                >\n                  <Button \n                    className=\"crypto-gradient text-base font-bold px-6 py-3 rounded-xl hover:opacity-90 transition-all duration-300 transform hover:scale-105 shadow-xl w-full sm:w-auto\"\n                    onClick={() => setLocation(\"/register\")}\n                    data-testid=\"button-start-trading\"\n                  >\n                    Start Earning Today →\n                  </Button>\n                </motion.div>\n\n                {/* Stats */}\n                <motion.div \n                  className=\"grid grid-cols-3 gap-8 pt-8\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n                  transition={{ duration: 1, delay: 2 }}\n                >\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-crypto-green\">$2.5M+</div>\n                    <div className=\"text-sm text-gray-400\">Total Profits</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-crypto-blue\">15,000+</div>\n                    <div className=\"text-sm text-gray-400\">Active Traders</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-yellow-400\">98.7%</div>\n                    <div className=\"text-sm text-gray-400\">Success Rate</div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Hero Image */}\n              <motion.div \n                className=\"relative\"\n                initial={{ opacity: 0, scale: 0.8, rotateY: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.8, rotateY: isVisible ? 0 : 20 }}\n                transition={{ duration: 1.5, delay: 1 }}\n              >\n                <div className=\"floating-3d relative\">\n                  <img \n                    src={heroImage} \n                    alt=\"Advanced cryptocurrency trading platform interface\"\n                    className=\"w-full h-auto rounded-3xl shadow-2xl border border-crypto-blue/20\"\n                  />\n                  <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-tr from-crypto-blue/10 to-crypto-green/10\"></div>\n                </div>\n                \n                {/* Floating profit indicators */}\n                <motion.div \n                  className=\"absolute -top-4 -right-4 bg-crypto-green/90 backdrop-blur-sm text-white px-6 py-3 rounded-full text-sm font-bold shadow-lg\"\n                  animate={{ y: [-5, 5, -5] }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\" }}\n                >\n                  +24.7% Profit\n                </motion.div>\n                \n                <motion.div \n                  className=\"absolute -bottom-4 -left-4 bg-crypto-blue/90 backdrop-blur-sm text-white px-6 py-3 rounded-full text-sm font-bold shadow-lg\"\n                  animate={{ y: [5, -5, 5] }}\n                  transition={{ duration: 4, repeat: Infinity, ease: \"easeInOut\", delay: 1 }}\n                >\n                  Live Trading\n                </motion.div>\n              </motion.div>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-24 px-6 bg-crypto-card/50 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n              Why Choose <span className=\"bg-gradient-to-r from-crypto-blue to-crypto-green bg-clip-text text-transparent\">TradePilot</span>?\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Experience the future of cryptocurrency trading with our revolutionary AI-powered platform designed to maximize your profits while minimizing risks.\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            \n            {/* AI Automation Feature */}\n            <motion.div \n              className=\"bg-crypto-dark/80 backdrop-blur-sm p-8 rounded-2xl border border-crypto-blue/20 hover:border-crypto-blue/40 transition-all duration-300 group hover:scale-105\"\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.1 }}\n              viewport={{ once: true }}\n              data-testid=\"feature-ai-automation\"\n            >\n              <div className=\"mb-6\">\n                <img \n                  src={aiAutomationImage} \n                  alt=\"AI automation and machine learning algorithms\"\n                  className=\"w-full h-48 object-cover rounded-xl\"\n                />\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-crypto-blue transition-colors\">\n                Advanced AI Automation\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Our sophisticated machine learning algorithms continuously analyze market patterns, predict price movements, and execute profitable trades automatically. No manual intervention required – just sit back and watch your portfolio grow.\n              </p>\n            </motion.div>\n\n            {/* Real-time Monitoring */}\n            <motion.div \n              className=\"bg-crypto-dark/80 backdrop-blur-sm p-8 rounded-2xl border border-crypto-green/20 hover:border-crypto-green/40 transition-all duration-300 group hover:scale-105\"\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              viewport={{ once: true }}\n              data-testid=\"feature-realtime-monitoring\"\n            >\n              <div className=\"mb-6\">\n                <img \n                  src={portfolioImage} \n                  alt=\"Real-time portfolio monitoring and analytics dashboard\"\n                  className=\"w-full h-48 object-cover rounded-xl\"\n                />\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-crypto-green transition-colors\">\n                Real-time Monitoring\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Track your investments with our comprehensive dashboard featuring real-time profit tracking, detailed analytics, and instant notifications. Stay informed about every opportunity and transaction as it happens.\n              </p>\n            </motion.div>\n\n            {/* Security */}\n            <motion.div \n              className=\"bg-crypto-dark/80 backdrop-blur-sm p-8 rounded-2xl border border-yellow-500/20 hover:border-yellow-500/40 transition-all duration-300 group hover:scale-105\"\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.3 }}\n              viewport={{ once: true }}\n              data-testid=\"feature-security\"\n            >\n              <div className=\"mb-6\">\n                <img \n                  src={securityImage} \n                  alt=\"Advanced security and encryption protection\"\n                  className=\"w-full h-48 object-cover rounded-xl\"\n                />\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-yellow-400 transition-colors\">\n                Bank-Level Security\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Your funds and personal information are protected by military-grade encryption, multi-factor authentication, and cold storage security protocols. Trade with complete peace of mind knowing your assets are safe.\n              </p>\n            </motion.div>\n\n            {/* 24/7 Trading */}\n            <motion.div \n              className=\"bg-crypto-dark/80 backdrop-blur-sm p-8 rounded-2xl border border-purple-500/20 hover:border-purple-500/40 transition-all duration-300 group hover:scale-105\"\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n              viewport={{ once: true }}\n              data-testid=\"feature-24-7-trading\"\n            >\n              <div className=\"mb-6\">\n                <img \n                  src={tradingImage} \n                  alt=\"24/7 automated trading around the clock\"\n                  className=\"w-full h-48 object-cover rounded-xl\"\n                />\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-purple-400 transition-colors\">\n                24/7 Automated Trading\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Never miss a profitable opportunity again. Our AI works around the clock, scanning global markets and executing trades even while you sleep. The cryptocurrency market never stops, and neither do we.\n              </p>\n            </motion.div>\n\n            {/* Multi-Exchange */}\n            <motion.div \n              className=\"bg-crypto-dark/80 backdrop-blur-sm p-8 rounded-2xl border border-crypto-blue/20 hover:border-crypto-blue/40 transition-all duration-300 group hover:scale-105\"\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.5 }}\n              viewport={{ once: true }}\n              data-testid=\"feature-multi-exchange\"\n            >\n              <div className=\"mb-6 bg-gradient-to-br from-crypto-blue/20 to-crypto-green/20 rounded-xl p-6 text-center\">\n                <div className=\"text-5xl font-bold text-crypto-blue mb-2\">50+</div>\n                <div className=\"text-crypto-green font-semibold\">Exchanges</div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-crypto-blue transition-colors\">\n                Multi-Exchange Access\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Connect to over 50 major cryptocurrency exchanges worldwide including Binance, Coinbase, Kraken, and more. Maximize arbitrage opportunities by accessing the broadest market coverage available.\n              </p>\n            </motion.div>\n\n            {/* Instant Profits */}\n            <motion.div \n              className=\"bg-crypto-dark/80 backdrop-blur-sm p-8 rounded-2xl border border-crypto-green/20 hover:border-crypto-green/40 transition-all duration-300 group hover:scale-105\"\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n              viewport={{ once: true }}\n              data-testid=\"feature-instant-profits\"\n            >\n              <div className=\"mb-6 bg-gradient-to-br from-crypto-blue/20 to-blue-400/20 rounded-xl p-6 text-center\">\n                <div className=\"text-5xl font-bold text-crypto-blue mb-2\">24/7</div>\n                <div className=\"text-blue-400 font-semibold\">Active Trading</div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-crypto-green transition-colors\">\n                Advanced Market Analysis\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Our sophisticated algorithms continuously monitor global cryptocurrency markets, identifying optimal arbitrage opportunities across multiple exchanges. Advanced risk management ensures stable returns while protecting your investment capital.\n              </p>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-24 px-6 bg-crypto-dark\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n              How <span className=\"bg-gradient-to-r from-crypto-blue to-crypto-green bg-clip-text text-transparent\">TradePilot</span> Works\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Get started in minutes and begin earning passive income through automated cryptocurrency arbitrage trading.\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-3 gap-12\">\n            \n            {/* Step 1 */}\n            <motion.div \n              className=\"text-center group\"\n              initial={{ opacity: 0, x: -50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.1 }}\n              viewport={{ once: true }}\n              data-testid=\"step-1\"\n            >\n              <div className=\"w-24 h-24 mx-auto mb-6 rounded-full crypto-gradient flex items-center justify-center text-3xl font-bold text-white shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                1\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4\">Create Account</h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Sign up in under 2 minutes with just your email address. No complex verification processes or lengthy onboarding procedures required.\n              </p>\n            </motion.div>\n\n            {/* Step 2 */}\n            <motion.div \n              className=\"text-center group\"\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              viewport={{ once: true }}\n              data-testid=\"step-2\"\n            >\n              <div className=\"w-24 h-24 mx-auto mb-6 rounded-full crypto-gradient flex items-center justify-center text-3xl font-bold text-white shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                2\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4\">Choose Investment</h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Select from our carefully designed investment plans ranging from $50 to $10,000+. Each plan is optimized for different risk tolerance and profit targets.\n              </p>\n            </motion.div>\n\n            {/* Step 3 */}\n            <motion.div \n              className=\"text-center group\"\n              initial={{ opacity: 0, x: 50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.3 }}\n              viewport={{ once: true }}\n              data-testid=\"step-3\"\n            >\n              <div className=\"w-24 h-24 mx-auto mb-6 rounded-full crypto-gradient flex items-center justify-center text-3xl font-bold text-white shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                3\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4\">Watch Profits Grow</h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Sit back and watch as our AI automatically trades on your behalf, generating consistent profits while you focus on what matters most to you.\n              </p>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Partner Logos Section */}\n      <section className=\"py-16 px-6 bg-crypto-dark relative overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center mb-12\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-2xl md:text-3xl font-bold text-white mb-4\">\n              Trusted By Major <span className=\"bg-gradient-to-r from-crypto-blue to-crypto-green bg-clip-text text-transparent\">Exchanges</span>\n            </h2>\n            <p className=\"text-gray-400 max-w-2xl mx-auto\">\n              Connected to the world's leading cryptocurrency exchanges for maximum arbitrage opportunities\n            </p>\n          </motion.div>\n          \n          {/* Animated Partner Logos */}\n          <div className=\"relative\">\n            {/* Left shadow gradient */}\n            <div className=\"absolute left-0 top-0 bottom-0 w-32 bg-gradient-to-r from-crypto-dark to-transparent z-10 pointer-events-none\"></div>\n            \n            {/* Right shadow gradient */}\n            <div className=\"absolute right-0 top-0 bottom-0 w-32 bg-gradient-to-l from-crypto-dark to-transparent z-10 pointer-events-none\"></div>\n            \n            {/* Scrolling logos container */}\n            <div className=\"flex overflow-hidden\">\n              <motion.div \n                className=\"flex items-center space-x-20 whitespace-nowrap\"\n                animate={{ \n                  x: [-1600, -3200]\n                }}\n                transition={{\n                  duration: 30,\n                  repeat: Infinity,\n                  ease: \"linear\",\n                  repeatType: \"loop\"\n                }}\n              >\n                {/* First set of logos */}\n                <img src={binanceLogo} alt=\"Binance\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={coinbaseLogo} alt=\"Coinbase\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={kucoinLogo} alt=\"KuCoin\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={krakenLogo} alt=\"Kraken\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={okxLogo} alt=\"OKX\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={bybitLogo} alt=\"Bybit\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={gateLogo} alt=\"Gate.io\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={huobiLogo} alt=\"Huobi\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                \n                {/* Second set for seamless loop */}\n                <img src={binanceLogo} alt=\"Binance\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={coinbaseLogo} alt=\"Coinbase\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={kucoinLogo} alt=\"KuCoin\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={krakenLogo} alt=\"Kraken\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={okxLogo} alt=\"OKX\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={bybitLogo} alt=\"Bybit\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={gateLogo} alt=\"Gate.io\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={huobiLogo} alt=\"Huobi\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                \n                {/* Third set for extra smooth looping */}\n                <img src={binanceLogo} alt=\"Binance\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={coinbaseLogo} alt=\"Coinbase\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={kucoinLogo} alt=\"KuCoin\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={krakenLogo} alt=\"Kraken\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={okxLogo} alt=\"OKX\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={bybitLogo} alt=\"Bybit\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={gateLogo} alt=\"Gate.io\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n                <img src={huobiLogo} alt=\"Huobi\" className=\"h-20 md:h-24 object-contain opacity-80 hover:opacity-100 transition-opacity duration-300\" />\n              </motion.div>\n            </div>\n          </div>\n          \n          <motion.div \n            className=\"text-center mt-8\"\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            transition={{ duration: 1, delay: 0.5 }}\n            viewport={{ once: true }}\n          >\n            <p className=\"text-sm text-crypto-blue font-medium\">\n              + 40 More Global Exchanges\n            </p>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 px-6 bg-gradient-to-r from-crypto-blue/10 to-crypto-green/10 backdrop-blur-sm\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            whileInView={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 1 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n              Ready to Start Your <span className=\"bg-gradient-to-r from-crypto-blue to-crypto-green bg-clip-text text-transparent\">Crypto Journey</span>?\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n              Join thousands of successful traders who are already earning passive income with TradePilot's AI-powered arbitrage trading platform.\n            </p>\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <Button \n                className=\"crypto-gradient text-base font-bold px-8 py-3 rounded-xl hover:opacity-90 transition-all duration-300 shadow-xl w-full sm:w-auto max-w-xs mx-auto\"\n                onClick={() => setLocation(\"/register\")}\n                data-testid=\"button-final-cta\"\n              >\n                Start Trading Now →\n              </Button>\n            </motion.div>\n            <p className=\"text-sm text-gray-400 mt-4\">\n              Secure trading platform • Advanced AI technology • Professional support\n            </p>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":32029},"client/src/pages/messages.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Header from \"@/components/layout/header\";\n\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { fetchWithAuth, markMessageAsRead } from \"@/lib/crypto-api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { \n  Mail, \n  MailOpen, \n  Info, \n  CheckCircle, \n  AlertTriangle, \n  AlertCircle \n} from \"lucide-react\";\n\nexport default function Messages() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: messages, isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/messages\"],\n    queryFn: () => fetchWithAuth(\"/messages\"),\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: markMessageAsRead,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleMarkAsRead = (messageId: string) => {\n    markAsReadMutation.mutate(messageId);\n  };\n\n  const getMessageIcon = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return CheckCircle;\n      case \"warning\":\n        return AlertTriangle;\n      case \"error\":\n        return AlertCircle;\n      default:\n        return Info;\n    }\n  };\n\n  const getMessageColor = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return \"text-crypto-green\";\n      case \"warning\":\n        return \"text-yellow-500\";\n      case \"error\":\n        return \"text-red-500\";\n      default:\n        return \"text-crypto-blue\";\n    }\n  };\n\n  const getMessageBadgeColor = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return \"bg-crypto-green\";\n      case \"warning\":\n        return \"bg-yellow-500\";\n      case \"error\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-crypto-blue\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-crypto-dark flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const unreadCount = messages?.filter((msg: any) => !msg.isRead).length || 0;\n  const sortedMessages = messages?.sort((a: any, b: any) => \n    new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark\">\n      <Header />\n      <main className=\"p-6 overflow-y-auto pb-20\">\n        <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Messages</h1>\n              <p className=\"text-gray-400 mt-1\">\n                System notifications and important updates\n              </p>\n            </div>\n            {unreadCount > 0 && (\n              <Badge className=\"bg-red-500 text-white\" data-testid=\"unread-count\">\n                {unreadCount} unread\n              </Badge>\n            )}\n          </div>\n\n          <div className=\"max-w-4xl\">\n            {messagesLoading ? (\n              <div className=\"text-center text-gray-400 py-12\">\n                <div className=\"animate-spin w-8 h-8 border-2 border-crypto-blue border-t-transparent rounded-full mx-auto mb-4\"></div>\n                Loading messages...\n              </div>\n            ) : sortedMessages.length > 0 ? (\n              <div className=\"space-y-4\">\n                {sortedMessages.map((message: any) => {\n                  const MessageIcon = getMessageIcon(message.type);\n                  const isUnread = !message.isRead;\n                  \n                  return (\n                    <Card \n                      key={message.id} \n                      className={`bg-crypto-card border-gray-700 ${\n                        isUnread ? \"border-crypto-blue border-opacity-50\" : \"\"\n                      }`}\n                      data-testid={`message-${message.id}`}\n                    >\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className=\"flex-shrink-0\">\n                            {isUnread ? (\n                              <Mail className=\"w-6 h-6 text-crypto-blue\" />\n                            ) : (\n                              <MailOpen className=\"w-6 h-6 text-gray-400\" />\n                            )}\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div className=\"flex items-center space-x-3\">\n                                <h3 className={`font-semibold ${isUnread ? \"text-white\" : \"text-gray-300\"}`} data-testid=\"message-title\">\n                                  {message.title}\n                                </h3>\n                                <div className=\"flex items-center space-x-2\">\n                                  <MessageIcon className={`w-4 h-4 ${getMessageColor(message.type)}`} />\n                                  <Badge className={`${getMessageBadgeColor(message.type)} text-white text-xs`} data-testid=\"message-type\">\n                                    {message.type}\n                                  </Badge>\n                                  {isUnread && (\n                                    <Badge className=\"bg-red-500 text-white text-xs\" data-testid=\"unread-badge\">\n                                      New\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"text-sm text-gray-400 flex-shrink-0\" data-testid=\"message-date\">\n                                {new Date(message.createdAt).toLocaleDateString()} {new Date(message.createdAt).toLocaleTimeString()}\n                              </div>\n                            </div>\n                            \n                            <div className={`text-sm mb-4 ${isUnread ? \"text-gray-200\" : \"text-gray-400\"}`} data-testid=\"message-content\">\n                              {message.content}\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"text-xs text-gray-500\">\n                                {message.userId ? \"Personal message\" : \"System-wide message\"}\n                              </div>\n                              {isUnread && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"text-crypto-blue border-crypto-blue hover:bg-crypto-blue hover:text-white\"\n                                  onClick={() => handleMarkAsRead(message.id)}\n                                  disabled={markAsReadMutation.isPending}\n                                  data-testid={`button-mark-read-${message.id}`}\n                                >\n                                  Mark as Read\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            ) : (\n              <Card className=\"bg-crypto-card border-gray-700\">\n                <CardContent className=\"p-12 text-center\">\n                  <Mail className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <div className=\"text-xl font-semibold text-gray-300 mb-2\">\n                    No messages yet\n                  </div>\n                  <div className=\"text-gray-400\">\n                    System notifications and important updates will appear here\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n      </main>\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":8438},"client/src/pages/not-found.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { AlertCircle, Home, ArrowLeft } from \"lucide-react\";\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-crypto-dark\">\n      <Card className=\"w-full max-w-md mx-4 bg-crypto-card border-gray-700\">\n        <CardContent className=\"pt-8 pb-6 text-center\">\n          <div className=\"mb-6\">\n            <AlertCircle className=\"h-16 w-16 text-crypto-blue mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-white mb-2\">404</h1>\n            <h2 className=\"text-xl text-gray-300 mb-4\">Page Not Found</h2>\n            <p className=\"text-gray-400\">\n              The page you're looking for doesn't exist or has been moved.\n            </p>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Button \n              className=\"w-full crypto-gradient\"\n              onClick={() => setLocation(\"/dashboard\")}\n              data-testid=\"button-dashboard\"\n            >\n              <Home className=\"w-4 h-4 mr-2\" />\n              Go to Dashboard\n            </Button>\n            <Button \n              variant=\"outline\"\n              className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700\"\n              onClick={() => window.history.back()}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Go Back\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1664},"client/src/pages/referrals.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport { \n  Users, \n  DollarSign, \n  Copy, \n  Share2, \n  TrendingUp,\n  UserPlus \n} from \"lucide-react\";\n\nexport default function Referrals() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: referralData, isLoading: referralLoading } = useQuery({\n    queryKey: [\"/api/referrals\"],\n    queryFn: () => fetchWithAuth(\"/referrals\"),\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleCopyReferralCode = () => {\n    if (user?.referralCode) {\n      navigator.clipboard.writeText(user.referralCode);\n      toast({\n        title: \"Referral Code Copied\",\n        description: \"Your referral code has been copied to clipboard\",\n      });\n    }\n  };\n\n  const handleCopyReferralLink = () => {\n    const referralLink = `${window.location.origin}/register?ref=${user?.referralCode}`;\n    navigator.clipboard.writeText(referralLink);\n    toast({\n      title: \"Referral Link Copied\",\n      description: \"Your referral link has been copied to clipboard\",\n    });\n  };\n\n  const handleShareReferral = () => {\n    const referralLink = `${window.location.origin}/register?ref=${user?.referralCode}`;\n    const text = `Join TradePilot and start earning with AI-powered crypto arbitrage trading! Use my referral code: ${user?.referralCode}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: \"Join TradePilot\",\n        text: text,\n        url: referralLink,\n      });\n    } else {\n      navigator.clipboard.writeText(`${text}\\n${referralLink}`);\n      toast({\n        title: \"Referral Info Copied\",\n        description: \"Referral text and link copied to clipboard\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-crypto-dark flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const totalEarnings = referralData?.totalEarnings || 0;\n  const totalReferrals = referralData?.totalReferrals || 0;\n  const referredUsers = referralData?.referredUsers || [];\n  const earnings = referralData?.earnings || [];\n\n  return (\n    <MainLayout>\n      <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"page-title\">\n              Referral Program\n            </h1>\n            <p className=\"text-gray-400\">\n              Earn rewards by inviting friends to TradePilot\n            </p>\n          </div>\n\n          <div className=\"max-w-6xl space-y-6\">\n            {/* Stats Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card className=\"bg-crypto-card border-gray-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-sm font-medium text-gray-400\">Total Referrals</h3>\n                    <Users className=\"w-5 h-5 text-crypto-blue\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-white mb-2\" data-testid=\"total-referrals\">\n                    {totalReferrals}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">Active users referred</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-crypto-card border-gray-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-sm font-medium text-gray-400\">Total Earnings</h3>\n                    <DollarSign className=\"w-5 h-5 text-crypto-green\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-crypto-green mb-2\" data-testid=\"total-earnings\">\n                    ${totalEarnings.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-crypto-green\">All-time earnings</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-crypto-card border-gray-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-sm font-medium text-gray-400\">Commission Rate</h3>\n                    <TrendingUp className=\"w-5 h-5 text-yellow-500\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-white mb-2\">10%</div>\n                  <div className=\"text-sm text-gray-400\">On referred user deposits</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-crypto-card border-gray-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-sm font-medium text-gray-400\">This Month</h3>\n                    <UserPlus className=\"w-5 h-5 text-purple-500\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-white mb-2\">\n                    {referredUsers.filter((user: any) => {\n                      const userDate = new Date(user.createdAt);\n                      const now = new Date();\n                      return userDate.getMonth() === now.getMonth() && userDate.getFullYear() === now.getFullYear();\n                    }).length}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">New referrals</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Referral Tools */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-6\">Your Referral Tools</h3>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Referral Code */}\n                  <div>\n                    <div className=\"text-sm text-gray-400 mb-2\">Your Referral Code</div>\n                    <div className=\"bg-crypto-dark rounded-lg p-4 mb-4\">\n                      <div className=\"text-2xl font-bold text-crypto-blue mb-2\" data-testid=\"referral-code\">\n                        {user.referralCode}\n                      </div>\n                      <div className=\"text-sm text-gray-400\">\n                        Share this code with friends to earn commissions\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"flex-1 border-crypto-blue text-crypto-blue hover:bg-crypto-blue hover:text-white\"\n                        onClick={handleCopyReferralCode}\n                        data-testid=\"button-copy-code\"\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy Code\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        className=\"flex-1 crypto-gradient\"\n                        onClick={handleShareReferral}\n                        data-testid=\"button-share\"\n                      >\n                        <Share2 className=\"w-4 h-4 mr-2\" />\n                        Share\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Referral Link */}\n                  <div>\n                    <div className=\"text-sm text-gray-400 mb-2\">Your Referral Link</div>\n                    <div className=\"bg-crypto-dark rounded-lg p-4 mb-4\">\n                      <div className=\"text-sm text-white break-all mb-2\" data-testid=\"referral-link\">\n                        {window.location.origin}/register?ref={user.referralCode}\n                      </div>\n                      <div className=\"text-sm text-gray-400\">\n                        Direct link for easy sharing\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full border-crypto-green text-crypto-green hover:bg-crypto-green hover:text-white\"\n                      onClick={handleCopyReferralLink}\n                      data-testid=\"button-copy-link\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy Link\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Referred Users */}\n              <Card className=\"bg-crypto-card border-gray-700\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Referred Users</h3>\n                  {referredUsers.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {referredUsers.slice(0, 10).map((referredUser: any) => (\n                        <div key={referredUser.id} className=\"flex items-center justify-between p-3 bg-crypto-dark rounded-lg\" data-testid={`referred-user-${referredUser.id}`}>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 rounded-full bg-crypto-blue flex items-center justify-center\">\n                              <span className=\"text-sm font-medium text-white\">\n                                {referredUser.username.charAt(0).toUpperCase()}\n                              </span>\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-white\" data-testid=\"referred-username\">\n                                {referredUser.username}\n                              </div>\n                              <div className=\"text-sm text-gray-400\" data-testid=\"referred-date\">\n                                Joined {new Date(referredUser.createdAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-crypto-green text-white\" data-testid=\"active-badge\">\n                            Active\n                          </Badge>\n                        </div>\n                      ))}\n                      {referredUsers.length > 10 && (\n                        <div className=\"text-center text-sm text-gray-400 pt-2\">\n                          And {referredUsers.length - 10} more users\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-gray-400 py-8\">\n                      <Users className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                      <div className=\"text-sm\">No referrals yet</div>\n                      <div className=\"text-xs\">Start sharing your referral code to earn commissions</div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Earnings History */}\n              <Card className=\"bg-crypto-card border-gray-700\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Earnings History</h3>\n                  {earnings.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {earnings.slice(0, 10).map((earning: any) => (\n                        <div key={earning.id} className=\"flex items-center justify-between p-3 bg-crypto-dark rounded-lg\" data-testid={`earning-${earning.id}`}>\n                          <div>\n                            <div className=\"font-semibold text-crypto-green\" data-testid=\"earning-amount\">\n                              +${parseFloat(earning.amount).toFixed(2)}\n                            </div>\n                            <div className=\"text-sm text-gray-400\" data-testid=\"earning-type\">\n                              {earning.type === 'deposit' ? 'Deposit commission' : 'Investment commission'}\n                            </div>\n                          </div>\n                          <div className=\"text-sm text-gray-400\" data-testid=\"earning-date\">\n                            {new Date(earning.createdAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                      ))}\n                      {earnings.length > 10 && (\n                        <div className=\"text-center text-sm text-gray-400 pt-2\">\n                          And {earnings.length - 10} more earnings\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-gray-400 py-8\">\n                      <DollarSign className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                      <div className=\"text-sm\">No earnings yet</div>\n                      <div className=\"text-xs\">Earnings will appear when your referrals make deposits or investments</div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* How It Works */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">How the Referral Program Works</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 rounded-full bg-crypto-blue bg-opacity-20 flex items-center justify-center mx-auto mb-3\">\n                      <Share2 className=\"w-6 h-6 text-crypto-blue\" />\n                    </div>\n                    <h4 className=\"font-semibold mb-2\">1. Share Your Code</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      Share your unique referral code or link with friends and family\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 rounded-full bg-crypto-green bg-opacity-20 flex items-center justify-center mx-auto mb-3\">\n                      <UserPlus className=\"w-6 h-6 text-crypto-green\" />\n                    </div>\n                    <h4 className=\"font-semibold mb-2\">2. They Join & Invest</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      When they sign up and start investing, you earn commission\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 rounded-full bg-yellow-500 bg-opacity-20 flex items-center justify-center mx-auto mb-3\">\n                      <DollarSign className=\"w-6 h-6 text-yellow-500\" />\n                    </div>\n                    <h4 className=\"font-semibold mb-2\">3. Earn Rewards</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      Receive 10% commission on their deposits and investments\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":15858},"client/src/pages/settings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Header from \"@/components/layout/header\";\n\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  User, \n  Mail, \n  Lock, \n  Shield, \n  Settings as SettingsIcon,\n  Eye,\n  EyeOff \n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const [profileData, setProfileData] = useState({\n    username: \"\",\n    email: \"\",\n  });\n\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n    if (user) {\n      setProfileData({\n        username: user.username,\n        email: user.email,\n      });\n    }\n  }, [user, isLoading, setLocation]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { username: string; email: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/password\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Changed\",\n        description: \"Your password has been successfully updated\",\n      });\n      setPasswordData({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Password Change Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateProfile = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handleChangePassword = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"New passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    changePasswordMutation.mutate({\n      currentPassword: passwordData.currentPassword,\n      newPassword: passwordData.newPassword,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-crypto-dark flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark\">\n      <Header />\n      <main className=\"p-6 overflow-y-auto pb-20\">\n        <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"page-title\">\n              Account Settings\n            </h1>\n            <p className=\"text-gray-400\">\n              Manage your account preferences and security settings\n            </p>\n          </div>\n\n          <div className=\"max-w-4xl space-y-6\">\n            {/* Account Information */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <User className=\"w-5 h-5 text-crypto-blue\" />\n                  <h3 className=\"text-lg font-semibold\">Account Information</h3>\n                </div>\n\n                <form onSubmit={handleUpdateProfile} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label className=\"text-gray-300\">Username</Label>\n                      <Input\n                        type=\"text\"\n                        value={profileData.username}\n                        onChange={(e) => setProfileData({ ...profileData, username: e.target.value })}\n                        className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue\"\n                        required\n                        data-testid=\"input-username\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Email Address</Label>\n                      <Input\n                        type=\"email\"\n                        value={profileData.email}\n                        onChange={(e) => setProfileData({ ...profileData, email: e.target.value })}\n                        className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue\"\n                        required\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"bg-crypto-dark rounded-lg p-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <div className=\"text-gray-400\">Referral Code</div>\n                        <div className=\"text-crypto-blue font-semibold\" data-testid=\"referral-code\">\n                          {user.referralCode}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-400\">Account Status</div>\n                        <div className=\"text-crypto-green font-semibold\" data-testid=\"account-status\">\n                          Active\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-400\">Member Since</div>\n                        <div className=\"text-white\" data-testid=\"member-since\">\n                          {new Date().toLocaleDateString()} {/* Would be user.createdAt in real data */}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-400\">Account Type</div>\n                        <div className=\"text-white\" data-testid=\"account-type\">\n                          {user.isAdmin ? \"Administrator\" : \"Standard User\"}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"crypto-gradient\"\n                    disabled={updateProfileMutation.isPending}\n                    data-testid=\"button-update-profile\"\n                  >\n                    {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Security Settings */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <Shield className=\"w-5 h-5 text-crypto-green\" />\n                  <h3 className=\"text-lg font-semibold\">Security Settings</h3>\n                </div>\n\n                <form onSubmit={handleChangePassword} className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-gray-300\">Current Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        type={showCurrentPassword ? \"text\" : \"password\"}\n                        value={passwordData.currentPassword}\n                        onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}\n                        className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue pr-10\"\n                        placeholder=\"Enter current password\"\n                        required\n                        data-testid=\"input-current-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                        onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                        data-testid=\"toggle-current-password\"\n                      >\n                        {showCurrentPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Separator className=\"bg-gray-600\" />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label className=\"text-gray-300\">New Password</Label>\n                      <div className=\"relative\">\n                        <Input\n                          type={showNewPassword ? \"text\" : \"password\"}\n                          value={passwordData.newPassword}\n                          onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}\n                          className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue pr-10\"\n                          placeholder=\"Enter new password\"\n                          required\n                          minLength={6}\n                          data-testid=\"input-new-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                          onClick={() => setShowNewPassword(!showNewPassword)}\n                          data-testid=\"toggle-new-password\"\n                        >\n                          {showNewPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Confirm New Password</Label>\n                      <div className=\"relative\">\n                        <Input\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          value={passwordData.confirmPassword}\n                          onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}\n                          className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue pr-10\"\n                          placeholder=\"Confirm new password\"\n                          required\n                          minLength={6}\n                          data-testid=\"input-confirm-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          data-testid=\"toggle-confirm-password\"\n                        >\n                          {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  {passwordData.newPassword && passwordData.confirmPassword && passwordData.newPassword !== passwordData.confirmPassword && (\n                    <div className=\"text-sm text-red-400\" data-testid=\"password-mismatch\">\n                      Passwords do not match\n                    </div>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    variant=\"outline\"\n                    className=\"border-crypto-green text-crypto-green hover:bg-crypto-green hover:text-white\"\n                    disabled={changePasswordMutation.isPending || passwordData.newPassword !== passwordData.confirmPassword}\n                    data-testid=\"button-change-password\"\n                  >\n                    {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Additional Settings */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <SettingsIcon className=\"w-5 h-5 text-yellow-500\" />\n                  <h3 className=\"text-lg font-semibold\">Additional Settings</h3>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-crypto-dark rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">Two-Factor Authentication</div>\n                      <div className=\"text-sm text-gray-400\">Add an extra layer of security to your account</div>\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"border-gray-600 text-gray-400\"\n                      disabled\n                      data-testid=\"button-2fa\"\n                    >\n                      Coming Soon\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-crypto-dark rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">API Access</div>\n                      <div className=\"text-sm text-gray-400\">Generate API keys for programmatic access</div>\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"border-gray-600 text-gray-400\"\n                      disabled\n                      data-testid=\"button-api-access\"\n                    >\n                      Coming Soon\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-crypto-dark rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">Notification Preferences</div>\n                      <div className=\"text-sm text-gray-400\">Manage how you receive notifications</div>\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"border-gray-600 text-gray-400\"\n                      disabled\n                      data-testid=\"button-notifications\"\n                    >\n                      Coming Soon\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Account Actions */}\n            <Card className=\"bg-crypto-card border-red-700 border-opacity-50\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-red-400 mb-4\">Danger Zone</h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-red-900 bg-opacity-20 rounded-lg border border-red-700 border-opacity-30\">\n                    <div>\n                      <div className=\"font-medium text-red-300\">Delete Account</div>\n                      <div className=\"text-sm text-gray-400\">\n                        Permanently delete your account and all associated data\n                      </div>\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"border-red-600 text-red-400 hover:bg-red-600 hover:text-white\"\n                      disabled\n                      data-testid=\"button-delete-account\"\n                    >\n                      Delete Account\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n        </div>\n      </main>\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":17633},"client/src/pages/support.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { fetchWithAuth, createSupportTicket } from \"@/lib/crypto-api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { \n  MessageCircle, \n  Plus, \n  Clock, \n  MessageSquare, \n  CheckCircle,\n  HelpCircle,\n  Mail,\n  Phone\n} from \"lucide-react\";\n\nconst supportCategories = [\n  { value: \"account\", label: \"Account Issues\", icon: \"👤\" },\n  { value: \"deposit\", label: \"Deposit Problems\", icon: \"💳\" },\n  { value: \"withdrawal\", label: \"Withdrawal Issues\", icon: \"💰\" },\n  { value: \"investment\", label: \"Investment Plans\", icon: \"📈\" },\n  { value: \"technical\", label: \"Technical Support\", icon: \"🔧\" },\n  { value: \"other\", label: \"Other\", icon: \"❓\" },\n];\n\nexport default function Support() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    subject: \"\",\n    message: \"\",\n  });\n\n  const { data: tickets, isLoading: ticketsLoading } = useQuery({\n    queryKey: [\"/api/support-tickets\"],\n    queryFn: () => fetchWithAuth(\"/support-tickets\"),\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: createSupportTicket,\n    onSuccess: () => {\n      toast({\n        title: \"Support Ticket Created\",\n        description: \"Your support ticket has been submitted successfully\",\n      });\n      setIsDialogOpen(false);\n      setFormData({ subject: \"\", message: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/support-tickets\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Create Ticket\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleSubmitTicket = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Client-side validation\n    if (formData.subject.length < 5) {\n      toast({\n        title: \"Invalid Subject\",\n        description: \"Subject must be at least 5 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (formData.message.length < 10) {\n      toast({\n        title: \"Invalid Message\",\n        description: \"Message must be at least 10 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    console.log(\"Submitting ticket:\", formData);\n    createTicketMutation.mutate(formData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-yellow-500\";\n      case \"replied\":\n        return \"bg-crypto-blue\";\n      case \"closed\":\n        return \"bg-gray-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return Clock;\n      case \"replied\":\n        return MessageSquare;\n      case \"closed\":\n        return CheckCircle;\n      default:\n        return HelpCircle;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-crypto-dark flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const openTickets = tickets?.filter((ticket: any) => ticket.status === \"open\") || [];\n  const sortedTickets = tickets?.sort((a: any, b: any) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark flex\">\n      {/* We don't use Sidebar here as support page doesn't need it */}\n      <div className=\"flex-1 flex flex-col\">\n        <Header />\n        <main className=\"flex-1 p-6 overflow-y-auto pb-20 md:pb-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Support Center</h1>\n              <p className=\"text-gray-400 mt-1\">Get help with your TradePilot account</p>\n            </div>\n            \n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"crypto-gradient\" data-testid=\"button-new-ticket\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Ticket\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"bg-crypto-card border-gray-700 text-white max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create Support Ticket</DialogTitle>\n                  <DialogDescription className=\"text-gray-400\">\n                    Describe your issue and we'll get back to you as soon as possible\n                  </DialogDescription>\n                </DialogHeader>\n\n                <form onSubmit={handleSubmitTicket} className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-gray-300\">Subject</Label>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Brief description of your issue (minimum 5 characters)\"\n                      value={formData.subject}\n                      onChange={(e) => setFormData({ ...formData, subject: e.target.value })}\n                      className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue\"\n                      required\n                      minLength={5}\n                      data-testid=\"input-subject\"\n                    />\n                    {formData.subject.length > 0 && formData.subject.length < 5 && (\n                      <p className=\"text-red-400 text-xs mt-1\">Subject must be at least 5 characters long</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label className=\"text-gray-300\">Message</Label>\n                    <Textarea\n                      placeholder=\"Please provide detailed information about your issue (minimum 10 characters)...\"\n                      value={formData.message}\n                      onChange={(e) => setFormData({ ...formData, message: e.target.value })}\n                      className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue min-h-[120px]\"\n                      required\n                      minLength={10}\n                      data-testid=\"textarea-message\"\n                    />\n                    {formData.message.length > 0 && formData.message.length < 10 && (\n                      <p className=\"text-red-400 text-xs mt-1\">Message must be at least 10 characters long</p>\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"flex-1 border-gray-600\"\n                      onClick={() => setIsDialogOpen(false)}\n                      data-testid=\"button-cancel-ticket\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      className=\"flex-1 crypto-gradient\"\n                      disabled={createTicketMutation.isPending}\n                      data-testid=\"button-submit-ticket\"\n                    >\n                      {createTicketMutation.isPending ? \"Submitting...\" : \"Submit Ticket\"}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"max-w-4xl space-y-6\">\n\n            {/* Support Tickets */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Your Support Tickets</h3>\n                {ticketsLoading ? (\n                  <div className=\"text-center text-gray-400 py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-2 border-crypto-blue border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    Loading tickets...\n                  </div>\n                ) : sortedTickets.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {sortedTickets.map((ticket: any) => {\n                      const StatusIcon = getStatusIcon(ticket.status);\n                      \n                      return (\n                        <div key={ticket.id} className=\"p-4 bg-crypto-dark rounded-lg border border-gray-600\" data-testid={`ticket-${ticket.id}`}>\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-3 mb-2\">\n                                <h4 className=\"font-semibold text-white\" data-testid=\"ticket-subject\">\n                                  {ticket.subject}\n                                </h4>\n                                <div className=\"flex items-center space-x-2\">\n                                  <StatusIcon className=\"w-4 h-4\" />\n                                  <Badge className={`${getStatusColor(ticket.status || 'open')} text-white`} data-testid=\"ticket-status\">\n                                    {ticket.status ? ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1) : 'Open'}\n                                  </Badge>\n                                </div>\n                              </div>\n                              <p className=\"text-sm text-gray-400 mb-3\" data-testid=\"ticket-message\">\n                                {ticket.message}\n                              </p>\n                              {ticket.status === \"replied\" && (\n                                <div className=\"mt-3 p-3 bg-green-600 bg-opacity-10 border-l-4 border-green-500 rounded\">\n                                  <div className=\"text-sm font-medium text-green-400 mb-1\">\n                                    Admin has replied to your ticket - check your inbox for the response\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"text-sm text-gray-400 ml-4\" data-testid=\"ticket-date\">\n                              {new Date(ticket.created_at).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-gray-400 py-8\">\n                    <MessageCircle className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                    <div className=\"text-lg mb-2\">No support tickets yet</div>\n                    <div className=\"text-sm\">Create a ticket if you need help with anything</div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    </div>\n  );\n}\n","size_bytes":11990},"client/src/pages/withdraw.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { fetchWithAuth, createWithdrawal } from \"@/lib/crypto-api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { CheckCircle, Clock, XCircle, AlertTriangle } from \"lucide-react\";\n\nconst cryptoOptions = [\n  { \n    value: \"BTC\", \n    label: \"Bitcoin (BTC)\", \n    networkFee: 0,\n    logoUrl: \"https://assets.coincap.io/assets/icons/btc@2x.png\"\n  },\n  { \n    value: \"ETH\", \n    label: \"Ethereum (ETH)\", \n    networkFee: 0,\n    logoUrl: \"https://assets.coincap.io/assets/icons/eth@2x.png\"\n  },\n  { \n    value: \"USDT\", \n    label: \"Tether USDT-TRC20\", \n    networkFee: 0,\n    logoUrl: \"https://assets.coincap.io/assets/icons/usdt@2x.png\"\n  },\n];\n\nexport default function Withdraw() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    cryptocurrency: \"\",\n    walletAddress: \"\",\n    amount: \"\",\n  });\n\n  const { data: withdrawals } = useQuery({\n    queryKey: [\"/api/withdrawals\"],\n    queryFn: () => fetchWithAuth(\"/withdrawals\"),\n  });\n\n  const withdrawMutation = useMutation({\n    mutationFn: createWithdrawal,\n    onSuccess: () => {\n      toast({\n        title: \"Withdrawal Request Submitted\",\n        description: \"Your withdrawal request has been submitted and is being processed.\",\n      });\n      setFormData({ cryptocurrency: \"\", walletAddress: \"\", amount: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/withdrawals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Withdrawal Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const amount = parseFloat(formData.amount);\n    const selectedCrypto = cryptoOptions.find(c => c.value === formData.cryptocurrency);\n    const networkFee = selectedCrypto?.networkFee || 0;\n    const userBalance = parseFloat(user?.balance?.toString() || \"0\");\n\n    if (amount < 10) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Minimum withdrawal amount is $10\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (amount > userBalance) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: `You only have $${userBalance.toLocaleString()} available for withdrawal`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (amount > userBalance) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: \"You don't have enough balance for this withdrawal\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    withdrawMutation.mutate({\n      cryptocurrency: formData.cryptocurrency,\n      amount: \"0\", // Will be calculated on backend\n      usdValue: formData.amount,\n      walletAddress: formData.walletAddress,\n      networkFee: networkFee.toString(),\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-crypto-green\";\n      case \"approved\":\n        return \"bg-blue-500\";\n      case \"pending\":\n        return \"bg-yellow-500\";\n      case \"rejected\":\n        return \"bg-red-600\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return CheckCircle;\n      case \"approved\":\n        return CheckCircle;\n      case \"pending\":\n        return Clock;\n      case \"rejected\":\n        return XCircle;\n      default:\n        return AlertTriangle;\n    }\n  };\n\n  const selectedCrypto = cryptoOptions.find(c => c.value === formData.cryptocurrency);\n  const networkFee = selectedCrypto?.networkFee || 0;\n  const amount = parseFloat(formData.amount) || 0;\n  const youReceive = Math.max(0, amount - networkFee);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-crypto-dark flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <MainLayout>\n      <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"page-title\">\n        Withdraw Funds\n      </h1>\n\n          <div className=\"max-w-4xl space-y-6\">\n            {/* Balance Overview */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Available Balance</h3>\n                <div className=\"text-3xl font-bold text-crypto-green mb-2\" data-testid=\"available-balance\">\n                  ${parseFloat(user.balance?.toString() || \"0\").toLocaleString()}\n                </div>\n                {parseFloat(user.balance?.toString() || \"0\") < 10 ? (\n                  <div className=\"text-sm text-red-400\">\n                    Insufficient balance for withdrawal (minimum $10 required)\n                  </div>\n                ) : (\n                  <div className=\"text-sm text-gray-400\">Ready for withdrawal</div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Withdrawal Form */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Request Withdrawal</h3>\n\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-gray-300\">Cryptocurrency</Label>\n                    <Select\n                      value={formData.cryptocurrency}\n                      onValueChange={(value) => setFormData({ ...formData, cryptocurrency: value })}\n                    >\n                      <SelectTrigger className=\"bg-crypto-dark border-gray-600 text-white focus:border-crypto-blue\" data-testid=\"select-cryptocurrency\">\n                        <SelectValue placeholder=\"Select cryptocurrency\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-crypto-dark border-gray-600\">\n                        {cryptoOptions.map((crypto) => (\n                          <SelectItem \n                            key={crypto.value} \n                            value={crypto.value}\n                            className=\"text-white hover:bg-gray-700 hover:text-white focus:bg-gray-700 focus:text-white data-[highlighted]:bg-gray-700 data-[highlighted]:text-white\"\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              <img \n                                src={crypto.logoUrl} \n                                alt={`${crypto.value} logo`} \n                                className=\"w-5 h-5 rounded-full\"\n                                onError={(e) => {\n                                  const target = e.target as HTMLImageElement;\n                                  target.src = \"https://assets.coincap.io/assets/icons/btc@2x.png\";\n                                }}\n                              />\n                              <span className=\"text-white\">{crypto.label}</span>\n                              {formData.cryptocurrency === crypto.value && (\n                                <span className=\"ml-auto text-green-500 text-lg\">✓</span>\n                              )}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-gray-300\">Wallet Address</Label>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Enter your wallet address\"\n                      value={formData.walletAddress}\n                      onChange={(e) => setFormData({ ...formData, walletAddress: e.target.value })}\n                      className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue\"\n                      required\n                      data-testid=\"input-wallet-address\"\n                    />\n                    <div className=\"text-sm text-gray-400 mt-1\">\n                      Make sure this address is correct. Transactions cannot be reversed.\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-gray-300\">Amount (USD)</Label>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Enter amount\"\n                      value={formData.amount}\n                      onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n                      className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue\"\n                      required\n                      min=\"10\"\n                      step=\"0.01\"\n                      data-testid=\"input-amount\"\n                    />\n                    <div className=\"text-sm text-gray-400 mt-2\">\n                      Minimum withdrawal: $10 • Available balance: ${parseFloat(user.balance?.toString() || \"0\").toLocaleString()}\n                    </div>\n                  </div>\n\n                  {formData.cryptocurrency && formData.amount && (\n                    <div className=\"bg-crypto-dark rounded-lg p-4\">\n                      <Label className=\"text-gray-300 block mb-3\">Transaction Summary</Label>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Withdrawal Amount:</span>\n                          <span className=\"text-white\" data-testid=\"summary-amount\">${amount.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Network Fee:</span>\n                          <span className=\"text-white\" data-testid=\"summary-fee\">${networkFee.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between border-t border-gray-600 pt-2\">\n                          <span className=\"text-gray-400\">You'll receive:</span>\n                          <span className=\"text-crypto-green font-semibold\" data-testid=\"summary-receive\">\n                            ${youReceive.toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full crypto-gradient\"\n                    disabled={\n                      withdrawMutation.isPending || \n                      !formData.cryptocurrency || \n                      !formData.walletAddress || \n                      !formData.amount ||\n                      parseFloat(user.balance?.toString() || \"0\") < 10 ||\n                      parseFloat(formData.amount || \"0\") > parseFloat(user.balance?.toString() || \"0\")\n                    }\n                    data-testid=\"button-request-withdrawal\"\n                  >\n                    {withdrawMutation.isPending ? \"Processing...\" : \n                     parseFloat(user.balance?.toString() || \"0\") < 10 ? \"Insufficient Balance\" :\n                     \"Request Withdrawal\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Withdrawal History */}\n            <Card className=\"bg-crypto-card border-gray-700\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Withdrawal History</h3>\n                {withdrawals && withdrawals.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {withdrawals.map((withdrawal: any) => {\n                      const StatusIcon = getStatusIcon(withdrawal.status);\n                      \n                      return (\n                        <div key={withdrawal.id} className=\"p-4 bg-crypto-dark rounded-lg\" data-testid={`withdrawal-${withdrawal.id}`}>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-12 h-12 rounded-full bg-white/10 border border-gray-600 flex items-center justify-center p-1\">\n                                <img \n                                  src={cryptoOptions.find(c => c.value === withdrawal.cryptocurrency)?.logoUrl || \"https://assets.coincap.io/assets/icons/btc@2x.png\"} \n                                  alt={`${withdrawal.cryptocurrency} logo`}\n                                  className=\"w-8 h-8 object-contain\"\n                                />\n                              </div>\n                              <div>\n                                <div className=\"font-semibold\" data-testid=\"withdrawal-amount\">\n                                  Amount: ${parseFloat(withdrawal.amount || withdrawal.usd_value || withdrawal.usdValue || \"0\").toLocaleString()}\n                                </div>\n                                <div className=\"text-sm text-gray-400\" data-testid=\"withdrawal-crypto\">\n                                  Currency: {withdrawal.cryptocurrency} • Date: {(withdrawal.created_at || withdrawal.createdAt) && !isNaN(new Date(withdrawal.created_at || withdrawal.createdAt).getTime()) ? \n                                    new Date(withdrawal.created_at || withdrawal.createdAt).toLocaleString() : \n                                    \"Processing\"}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <StatusIcon className=\"w-4 h-4\" />\n                              <Badge className={`${getStatusColor(withdrawal.status)} text-white`} data-testid=\"withdrawal-status\">\n                                Status: {withdrawal.status ? withdrawal.status.charAt(0).toUpperCase() + withdrawal.status.slice(1) : 'Pending'}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"text-xs text-gray-500 truncate\" data-testid=\"withdrawal-address\">\n                            Withdrawal Address: {withdrawal.wallet_address || withdrawal.walletAddress || \"Not specified\"}\n                          </div>\n                          {withdrawal.adminNotes && (\n                            <div className=\"text-sm text-gray-400 mt-2\" data-testid=\"admin-notes\">\n                              Note: {withdrawal.adminNotes}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-gray-400 py-8\">\n                    <div className=\"text-lg mb-2\">No withdrawal history</div>\n                    <div className=\"text-sm\">Your withdrawal requests will appear here</div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":16191},"client/src/components/admin/APIKeyManagement.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Edit, Trash2, Key, Activity, Clock, TrendingUp } from 'lucide-react';\n\ninterface APIKey {\n  id: string;\n  name: string;\n  key: string; // Partially masked\n  status: 'active' | 'inactive' | 'failed';\n  usage_count: number;\n  last_used: string | null;\n  created_at: string;\n}\n\ninterface APIKeys {\n  reply_keys: APIKey[];\n  summary_keys: APIKey[];\n}\n\nexport default function APIKeyManagement() {\n  const [addKeyDialog, setAddKeyDialog] = useState(false);\n  const [editKeyDialog, setEditKeyDialog] = useState(false);\n  const [selectedKey, setSelectedKey] = useState<APIKey | null>(null);\n  const [selectedKeyType, setSelectedKeyType] = useState<'reply' | 'summary'>('reply');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: apiKeys, isLoading } = useQuery({\n    queryKey: ['/api/admin/ai-chat/api-keys'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/ai-chat/api-keys', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch API keys');\n      return response.json() as Promise<APIKeys>;\n    }\n  });\n\n  const addKeyMutation = useMutation({\n    mutationFn: async (data: { name: string; key: string; type: 'reply' | 'summary' }) => {\n      const response = await fetch('/api/admin/ai-chat/api-keys', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to add API key');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/ai-chat/api-keys'] });\n      setAddKeyDialog(false);\n      toast({\n        title: \"Success\",\n        description: \"API key added successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add API key\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateKeyMutation = useMutation({\n    mutationFn: async (data: { id: string; type: 'reply' | 'summary'; name?: string; status?: 'active' | 'inactive' }) => {\n      const response = await fetch(`/api/admin/ai-chat/api-keys/${data.id}?type=${data.type}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ name: data.name, status: data.status })\n      });\n      if (!response.ok) throw new Error('Failed to update API key');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/ai-chat/api-keys'] });\n      setEditKeyDialog(false);\n      setSelectedKey(null);\n      toast({\n        title: \"Success\",\n        description: \"API key updated successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update API key\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteKeyMutation = useMutation({\n    mutationFn: async (data: { id: string; type: 'reply' | 'summary' }) => {\n      const response = await fetch(`/api/admin/ai-chat/api-keys/${data.id}?type=${data.type}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to delete API key');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/ai-chat/api-keys'] });\n      toast({\n        title: \"Success\",\n        description: \"API key deleted successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete API key\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleAddKey = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get('name') as string;\n    const key = formData.get('key') as string;\n    const type = formData.get('type') as 'reply' | 'summary';\n\n    if (!name || !key || !type) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    addKeyMutation.mutate({ name, key, type });\n  };\n\n  const handleEditKey = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!selectedKey) return;\n\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get('name') as string;\n    const status = formData.get('status') as 'active' | 'inactive';\n\n    updateKeyMutation.mutate({\n      id: selectedKey.id,\n      type: selectedKeyType,\n      name,\n      status\n    });\n  };\n\n  const handleDeleteKey = (key: APIKey, type: 'reply' | 'summary') => {\n    deleteKeyMutation.mutate({ id: key.id, type });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, any> = {\n      active: \"default\",\n      inactive: \"secondary\",\n      failed: \"destructive\"\n    };\n    return <Badge variant={variants[status] || \"secondary\"}>{status}</Badge>;\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return 'Never';\n    return new Date(dateString).toLocaleString();\n  };\n\n  const KeyCard = ({ keyItem, type }: { keyItem: APIKey; type: 'reply' | 'summary' }) => (\n    <Card className=\"mb-4\" data-testid={`api-key-card-${keyItem.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Key className=\"h-4 w-4\" />\n            <CardTitle className=\"text-sm\">{keyItem.name}</CardTitle>\n            {getStatusBadge(keyItem.status)}\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                setSelectedKey(keyItem);\n                setSelectedKeyType(type);\n                setEditKeyDialog(true);\n              }}\n              data-testid={`edit-key-${keyItem.id}`}\n            >\n              <Edit className=\"h-3 w-3\" />\n            </Button>\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" data-testid={`delete-key-${keyItem.id}`}>\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Delete API Key</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    Are you sure you want to delete \"{keyItem.name}\"? This action cannot be undone.\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction onClick={() => handleDeleteKey(keyItem, type)}>\n                    Delete\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <Label className=\"text-xs text-muted-foreground\">Key</Label>\n            <p className=\"font-mono\">{keyItem.key}</p>\n          </div>\n          <div>\n            <Label className=\"text-xs text-muted-foreground flex items-center\">\n              <Activity className=\"h-3 w-3 mr-1\" />\n              Usage Count\n            </Label>\n            <p>{keyItem.usage_count.toLocaleString()}</p>\n          </div>\n          <div>\n            <Label className=\"text-xs text-muted-foreground flex items-center\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              Last Used\n            </Label>\n            <p>{formatDate(keyItem.last_used)}</p>\n          </div>\n          <div>\n            <Label className=\"text-xs text-muted-foreground\">Created</Label>\n            <p>{formatDate(keyItem.created_at)}</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-8 bg-muted animate-pulse rounded\"></div>\n        <div className=\"grid gap-4\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"h-32 bg-muted animate-pulse rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const totalKeys = (apiKeys?.reply_keys.length || 0) + (apiKeys?.summary_keys.length || 0);\n  const activeKeys = (apiKeys?.reply_keys.filter(k => k.status === 'active').length || 0) + \n                    (apiKeys?.summary_keys.filter(k => k.status === 'active').length || 0);\n  const totalUsage = (apiKeys?.reply_keys.reduce((sum, k) => sum + k.usage_count, 0) || 0) + \n                     (apiKeys?.summary_keys.reduce((sum, k) => sum + k.usage_count, 0) || 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">API Key Management</h2>\n          <p className=\"text-muted-foreground\">Manage Cerebras API keys for AI chat system</p>\n        </div>\n        <Dialog open={addKeyDialog} onOpenChange={setAddKeyDialog}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"add-api-key-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add API Key\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <form onSubmit={handleAddKey}>\n              <DialogHeader>\n                <DialogTitle>Add New API Key</DialogTitle>\n                <DialogDescription>\n                  Add a new Cerebras API key for the AI chat system\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"name\">Key Name</Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"e.g., Primary Reply Key\"\n                    required\n                    data-testid=\"key-name-input\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"key\">API Key</Label>\n                  <Input\n                    id=\"key\"\n                    name=\"key\"\n                    type=\"password\"\n                    placeholder=\"Enter Cerebras API key\"\n                    required\n                    data-testid=\"api-key-input\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"type\">Key Type</Label>\n                  <Select name=\"type\" defaultValue=\"reply\" required>\n                    <SelectTrigger data-testid=\"key-type-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"reply\">Reply Keys (Chat responses)</SelectItem>\n                      <SelectItem value=\"summary\">Summary Keys (Conversation summaries)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setAddKeyDialog(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={addKeyMutation.isPending} data-testid=\"submit-add-key\">\n                  {addKeyMutation.isPending ? 'Adding...' : 'Add Key'}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total API Keys</CardTitle>\n            <Key className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalKeys}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {activeKeys} active keys\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Usage</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalUsage.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              API calls made\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Keys</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeKeys}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready for rotation\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* API Key Lists */}\n      <Tabs defaultValue=\"reply\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"reply\" data-testid=\"reply-keys-tab\">\n            Reply Keys ({apiKeys?.reply_keys.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"summary\" data-testid=\"summary-keys-tab\">\n            Summary Keys ({apiKeys?.summary_keys.length || 0})\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"reply\" className=\"space-y-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            Keys used for generating AI responses to user messages\n          </div>\n          {apiKeys?.reply_keys.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex items-center justify-center h-32\">\n                <p className=\"text-muted-foreground\">No reply keys configured</p>\n              </CardContent>\n            </Card>\n          ) : (\n            apiKeys?.reply_keys.map((key) => (\n              <KeyCard key={key.id} keyItem={key} type=\"reply\" />\n            ))\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"summary\" className=\"space-y-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            Keys used for generating conversation summaries\n          </div>\n          {apiKeys?.summary_keys.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex items-center justify-center h-32\">\n                <p className=\"text-muted-foreground\">No summary keys configured</p>\n              </CardContent>\n            </Card>\n          ) : (\n            apiKeys?.summary_keys.map((key) => (\n              <KeyCard key={key.id} keyItem={key} type=\"summary\" />\n            ))\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Key Dialog */}\n      <Dialog open={editKeyDialog} onOpenChange={setEditKeyDialog}>\n        <DialogContent>\n          <form onSubmit={handleEditKey}>\n            <DialogHeader>\n              <DialogTitle>Edit API Key</DialogTitle>\n              <DialogDescription>\n                Update the name or status of this API key\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-name\">Key Name</Label>\n                <Input\n                  id=\"edit-name\"\n                  name=\"name\"\n                  defaultValue={selectedKey?.name || ''}\n                  required\n                  data-testid=\"edit-key-name-input\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-status\">Status</Label>\n                <Select name=\"status\" defaultValue={selectedKey?.status || 'active'} required>\n                  <SelectTrigger data-testid=\"edit-key-status-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setEditKeyDialog(false)}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateKeyMutation.isPending} data-testid=\"submit-edit-key\">\n                {updateKeyMutation.isPending ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18710},"client/src/components/admin/BalanceManagement.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Plus, Minus, DollarSign, Users } from \"lucide-react\";\n\nconst fetchWithAuth = async (endpoint: string, options: RequestInit = {}) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`/api${endpoint}`, {\n    ...options,\n    headers: {\n      ...options.headers,\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Request failed\");\n  }\n\n  return response.json();\n};\n\ninterface BalanceManagementProps {\n  onClose?: () => void;\n}\n\nexport default function BalanceManagement({ onClose }: BalanceManagementProps) {\n  const { toast } = useToast();\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [adjustmentType, setAdjustmentType] = useState<\"add\" | \"subtract\">(\"add\");\n  const [amount, setAmount] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n\n  // Fetch all users\n  const { data: users, isLoading } = useQuery({\n    queryKey: [\"/admin/users\"],\n    queryFn: () => fetchWithAuth(\"/admin/users\"),\n  });\n\n  const adjustBalanceMutation = useMutation({\n    mutationFn: (data: { userId: string; amount: number; type: string; notes: string }) =>\n      fetchWithAuth(`/admin/users/${data.userId}/balance`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          amount: data.amount,\n          type: data.type,\n          notes: data.notes,\n        }),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/admin/users\"] });\n      toast({ title: \"Balance adjusted successfully\" });\n      setIsDialogOpen(false);\n      setSelectedUser(null);\n      setAmount(\"\");\n      setNotes(\"\");\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error adjusting balance\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleAdjustment = () => {\n    if (!selectedUser || !amount || isNaN(Number(amount))) return;\n    \n    adjustBalanceMutation.mutate({\n      userId: selectedUser.id,\n      amount: Number(amount),\n      type: adjustmentType,\n      notes: notes,\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center p-8\">Loading users...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Balance Management</h2>\n        {onClose && (\n          <Button variant=\"outline\" onClick={onClose}>\n            Back to Dashboard\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            User Balance Management\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Current Balance</TableHead>\n                  <TableHead>Country</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users?.map((user: any) => (\n                  <TableRow key={user.id}>\n                    <TableCell>\n                      <div className=\"font-medium\">{user.username}</div>\n                    </TableCell>\n                    <TableCell>{user.email}</TableCell>\n                    <TableCell>\n                      <div className=\"font-medium text-green-600\">\n                        ${user.balance.toFixed(2)}\n                      </div>\n                    </TableCell>\n                    <TableCell>{user.country || \"Unknown\"}</TableCell>\n                    <TableCell>\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        user.isActive \n                          ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\" \n                          : \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\"\n                      }`}>\n                        {user.isActive ? \"Active\" : \"Blocked\"}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setSelectedUser(user);\n                          setIsDialogOpen(true);\n                        }}\n                        data-testid={`button-adjust-balance-${user.id}`}\n                      >\n                        <DollarSign className=\"w-4 h-4 mr-1\" />\n                        Adjust Balance\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {(!users || users.length === 0) && (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8 text-gray-500\">\n                      No users found\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Adjust User Balance</DialogTitle>\n            <DialogDescription>\n              Add or subtract funds from {selectedUser?.username}'s account\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedUser && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 dark:bg-gray-900 p-4 rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Current Balance:</span>\n                  <span className=\"font-bold text-green-600\">${selectedUser.balance.toFixed(2)}</span>\n                </div>\n              </div>\n\n              <div>\n                <Label>Action Type</Label>\n                <Select value={adjustmentType} onValueChange={(value: \"add\" | \"subtract\") => setAdjustmentType(value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"add\">Add Funds</SelectItem>\n                    <SelectItem value=\"subtract\">Subtract Funds</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Amount ($USD)</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0.00\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  data-testid=\"input-adjustment-amount\"\n                />\n              </div>\n\n              <div>\n                <Label>Notes (Optional)</Label>\n                <Textarea\n                  placeholder=\"Reason for balance adjustment...\"\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  data-testid=\"textarea-adjustment-notes\"\n                />\n              </div>\n\n              {amount && !isNaN(Number(amount)) && (\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">New Balance:</span>\n                    <span className=\"font-bold\">\n                      ${adjustmentType === \"add\" \n                        ? (selectedUser.balance + Number(amount)).toFixed(2)\n                        : Math.max(0, selectedUser.balance - Number(amount)).toFixed(2)\n                      }\n                    </span>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={handleAdjustment}\n                  disabled={adjustBalanceMutation.isPending || !amount || isNaN(Number(amount))}\n                  variant={adjustmentType === \"add\" ? \"default\" : \"destructive\"}\n                  data-testid=\"button-confirm-adjustment\"\n                >\n                  {adjustmentType === \"add\" ? (\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                  ) : (\n                    <Minus className=\"w-4 h-4 mr-2\" />\n                  )}\n                  {adjustBalanceMutation.isPending ? \"Processing...\" : `${adjustmentType === \"add\" ? \"Add\" : \"Subtract\"} $${amount || \"0\"}`}\n                </Button>\n                <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":10010},"client/src/components/admin/LogoManagement.tsx":{"content":"import React, { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, Image, Trash2, Eye } from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface LogoSettings {\n  logoUrl?: string;\n  logoName?: string;\n  uploadedAt?: string;\n}\n\nexport default function LogoManagement() {\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Fetch current logo settings\n  const { data: logoSettings, isLoading } = useQuery<LogoSettings>({\n    queryKey: ['/api/admin/logo-settings'],\n    retry: 1\n  });\n\n  // Upload logo mutation\n  const uploadLogoMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('logo', file);\n\n      const response = await fetch('/api/admin/upload-logo', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to upload logo');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/logo-settings'] });\n      toast({\n        title: \"Success\",\n        description: \"Logo uploaded successfully! The new logo will appear across all pages.\",\n        variant: \"default\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n    onSettled: () => {\n      setIsUploading(false);\n    }\n  });\n\n  // Delete logo mutation\n  const deleteLogoMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/admin/delete-logo', {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete logo');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/logo-settings'] });\n      toast({\n        title: \"Success\",\n        description: \"Logo deleted successfully! The default logo will be restored.\",\n        variant: \"default\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please select an image file (PNG, JPG, GIF, SVG)\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Validate file size (5MB max)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Please select an image smaller than 5MB\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    uploadLogoMutation.mutate(file);\n  };\n\n  const handleUploadClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleDeleteLogo = () => {\n    if (window.confirm('Are you sure you want to delete the current logo? This will restore the default logo.')) {\n      deleteLogoMutation.mutate();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Image className=\"w-5 h-5\" />\n            Website Logo Management\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">Loading...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Image className=\"w-5 h-5\" />\n          Website Logo Management\n        </CardTitle>\n        <CardDescription>\n          Upload a custom logo that will appear on the homepage, login, and register pages.\n          Recommended size: 200x200px or larger. Supported formats: PNG, JPG, GIF, SVG.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Current Logo Display */}\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium\">Current Logo</Label>\n          <div className=\"flex items-center gap-4 p-4 border rounded-lg bg-muted/50\">\n            {logoSettings?.logoUrl ? (\n              <>\n                <div className=\"flex items-center justify-center w-16 h-16 border rounded-lg bg-white\">\n                  <img \n                    src={logoSettings.logoUrl} \n                    alt=\"Current logo\" \n                    className=\"max-w-full max-h-full object-contain\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-sm\">Custom Logo Uploaded</p>\n                  {logoSettings.logoName && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      File: {logoSettings.logoName}\n                    </p>\n                  )}\n                  {logoSettings.uploadedAt && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Uploaded: {new Date(logoSettings.uploadedAt).toLocaleDateString()}\n                    </p>\n                  )}\n                </div>\n                <Button \n                  variant=\"destructive\" \n                  size=\"sm\"\n                  onClick={handleDeleteLogo}\n                  disabled={deleteLogoMutation.isPending}\n                  data-testid=\"button-delete-logo\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-1\" />\n                  Delete\n                </Button>\n              </>\n            ) : (\n              <>\n                <div className=\"flex items-center justify-center w-16 h-16 border rounded-lg bg-gradient-to-r from-blue-500 to-purple-600\">\n                  <span className=\"text-2xl font-bold text-white\">T</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-sm\">Default Logo (Placeholder)</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Upload a custom logo to replace the default \"T\" icon\n                  </p>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Upload Section */}\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium\">Upload New Logo</Label>\n          <div className=\"flex flex-col gap-3\">\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              data-testid=\"input-logo-file\"\n            />\n            <Button\n              onClick={handleUploadClick}\n              disabled={isUploading}\n              className=\"w-full\"\n              data-testid=\"button-upload-logo\"\n            >\n              <Upload className=\"w-4 h-4 mr-2\" />\n              {isUploading ? \"Uploading...\" : \"Choose Logo File\"}\n            </Button>\n          </div>\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <p>• Supported formats: PNG, JPG, GIF, SVG</p>\n            <p>• Maximum file size: 5MB</p>\n            <p>• Recommended dimensions: 200x200px or larger</p>\n            <p>• Logo will automatically replace the \"T\" icon across all pages</p>\n          </div>\n        </div>\n\n        {/* Preview Information */}\n        <div className=\"bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Eye className=\"w-4 h-4 text-blue-600\" />\n            <span className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n              Preview Information\n            </span>\n          </div>\n          <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n            Once uploaded, your logo will immediately replace the placeholder \"T\" icon on:\n            Homepage header, Login page, Register page, and all other TradePilot branding locations.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8970},"client/src/components/admin/ReCaptchaSettings.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\n// Helper function to make authenticated admin requests\nconst fetchWithAuth = async (endpoint: string, options: RequestInit = {}) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`/api${endpoint}`, {\n    ...options,\n    headers: {\n      ...options.headers,\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Request failed\");\n  }\n\n  return response.json();\n};\n\nimport { Shield, Key, AlertCircle, Save, ExternalLink } from \"lucide-react\";\n\ninterface ReCaptchaSettings {\n  recaptcha: {\n    enabled: boolean;\n    site_key: string;\n    secret_key: string;\n  };\n}\n\nexport default function ReCaptchaSettings() {\n  const { toast } = useToast();\n  \n  const [settings, setSettings] = useState<ReCaptchaSettings>({\n    recaptcha: {\n      enabled: false,\n      site_key: \"\",\n      secret_key: \"\",\n    },\n  });\n\n  const [localInputs, setLocalInputs] = useState({\n    enabled: false,\n    siteKey: \"\",\n    secretKey: \"\",\n  });\n\n  // Fetch current settings\n  const { data: currentSettings, isLoading } = useQuery({\n    queryKey: [\"/api/admin/settings\"],\n    queryFn: () => fetchWithAuth(\"/admin/settings\"),\n  });\n\n  // Update settings when data is fetched\n  useEffect(() => {\n    if (currentSettings?.recaptcha) {\n      setSettings({ recaptcha: currentSettings.recaptcha });\n      setLocalInputs({\n        enabled: currentSettings.recaptcha.enabled || false,\n        siteKey: currentSettings.recaptcha.site_key || \"\",\n        secretKey: currentSettings.recaptcha.secret_key || \"\",\n      });\n    }\n  }, [currentSettings]);\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: (updates: Partial<ReCaptchaSettings>) => \n      fetchWithAuth(\"/admin/settings\", {\n        method: \"PATCH\",\n        body: JSON.stringify(updates),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"reCAPTCHA Settings Updated\",\n        description: \"Security settings have been applied successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error instanceof Error ? error.message : \"Failed to update reCAPTCHA settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    const updates = {\n      recaptcha: {\n        enabled: localInputs.enabled,\n        site_key: localInputs.siteKey.trim(),\n        secret_key: localInputs.secretKey.trim(),\n      },\n    };\n\n    updateSettingsMutation.mutate(updates);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setLocalInputs(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-crypto-blue\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-white\">reCAPTCHA Security Settings</h2>\n        <Button\n          onClick={handleSave}\n          disabled={updateSettingsMutation.isPending}\n          className=\"crypto-gradient\"\n          data-testid=\"button-save-recaptcha\"\n        >\n          <Save className=\"w-4 h-4 mr-2\" />\n          {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n        </Button>\n      </div>\n\n      <Card className=\"bg-crypto-card border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-white\">\n            <Shield className=\"w-5 h-5 mr-3 text-crypto-blue\" />\n            Google reCAPTCHA v2 Configuration\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Enable/Disable Toggle */}\n          <div className=\"flex items-center justify-between p-4 bg-crypto-dark rounded-lg\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-white font-medium\">Enable reCAPTCHA</Label>\n              <p className=\"text-sm text-gray-400\">\n                Protect login and registration forms with Google reCAPTCHA verification\n              </p>\n            </div>\n            <Switch\n              checked={localInputs.enabled}\n              onCheckedChange={(checked) => handleInputChange(\"enabled\", checked)}\n              data-testid=\"switch-recaptcha-enabled\"\n            />\n          </div>\n\n          {/* Site Key Input */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300 flex items-center\">\n              <Key className=\"w-4 h-4 mr-2\" />\n              Site Key (Public)\n            </Label>\n            <Input\n              type=\"text\"\n              placeholder=\"6LcXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n              value={localInputs.siteKey}\n              onChange={(e) => handleInputChange(\"siteKey\", e.target.value)}\n              className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue\"\n              data-testid=\"input-site-key\"\n            />\n            <p className=\"text-xs text-gray-500\">\n              This key will be visible in your HTML code and used by the frontend\n            </p>\n          </div>\n\n          {/* Secret Key Input */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300 flex items-center\">\n              <Key className=\"w-4 h-4 mr-2\" />\n              Secret Key (Private)\n            </Label>\n            <Input\n              type=\"password\"\n              placeholder=\"6LcXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n              value={localInputs.secretKey}\n              onChange={(e) => handleInputChange(\"secretKey\", e.target.value)}\n              className=\"bg-crypto-dark border-gray-600 text-white placeholder-gray-400 focus:border-crypto-blue\"\n              data-testid=\"input-secret-key\"\n            />\n            <p className=\"text-xs text-gray-500\">\n              This key is used for server-side verification and must be kept secure\n            </p>\n          </div>\n\n          {/* Setup Instructions */}\n          <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400 mt-0.5\" />\n              <div className=\"space-y-2\">\n                <h4 className=\"text-blue-400 font-medium\">How to get reCAPTCHA keys:</h4>\n                <ol className=\"text-sm text-gray-300 space-y-1 list-decimal list-inside\">\n                  <li>Visit the Google reCAPTCHA Admin Console</li>\n                  <li>Create a new site with reCAPTCHA v2 \"I'm not a robot\" checkbox</li>\n                  <li>Add your domain to the authorized domains list</li>\n                  <li>Copy the Site Key and Secret Key to the fields above</li>\n                  <li>Enable reCAPTCHA and save your settings</li>\n                </ol>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"mt-2 border-blue-500 text-blue-400 hover:bg-blue-500/20\"\n                  onClick={() => window.open(\"https://www.google.com/recaptcha/admin\", \"_blank\")}\n                  data-testid=\"button-recaptcha-console\"\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Open reCAPTCHA Console\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Current Status */}\n          <div className=\"border-t border-gray-600 pt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-gray-400 text-sm\">Current Status</Label>\n                <div className={`mt-1 px-3 py-1 rounded-full text-sm inline-block ${\n                  localInputs.enabled \n                    ? \"bg-green-500/20 text-green-400\" \n                    : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {localInputs.enabled ? \"Active\" : \"Disabled\"}\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-gray-400 text-sm\">Configuration</Label>\n                <div className={`mt-1 px-3 py-1 rounded-full text-sm inline-block ${\n                  localInputs.siteKey && localInputs.secretKey\n                    ? \"bg-green-500/20 text-green-400\" \n                    : \"bg-yellow-500/20 text-yellow-400\"\n                }`}>\n                  {localInputs.siteKey && localInputs.secretKey ? \"Complete\" : \"Incomplete\"}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9340},"client/src/components/admin/ReferralSettings.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users,\n  Percent,\n  Save,\n  RefreshCw,\n  TrendingUp,\n  DollarSign,\n  Eye,\n  Target\n} from \"lucide-react\";\n\ninterface ReferralSettings {\n  referralBonusPercent: number;\n  minReferralPayout: number;\n  maxReferralPayout: number;\n  referralLevels: {\n    level1: number;\n    level2: number;\n    level3: number;\n  };\n}\n\ninterface ReferralStats {\n  totalReferrals: number;\n  totalCommissionsPaid: number;\n  activeReferrers: number;\n  averageCommissionPerReferral: number;\n  topReferrers: Array<{\n    id: string;\n    username: string;\n    referralCount: number;\n    totalEarnings: number;\n  }>;\n}\n\nexport default function ReferralSettings() {\n  const { toast } = useToast();\n  \n  const [settings, setSettings] = useState<ReferralSettings>({\n    referralBonusPercent: 10,\n    minReferralPayout: 1,\n    maxReferralPayout: 1000,\n    referralLevels: {\n      level1: 10,\n      level2: 5,\n      level3: 2,\n    },\n  });\n\n  // Local input state for free typing\n  const [localReferralInput, setLocalReferralInput] = useState(\"10\");\n\n  // Fetch current referral settings\n  const { data: currentSettings, isLoading } = useQuery({\n    queryKey: [\"/api/admin/settings\"],\n    queryFn: () => fetchWithAuth(\"/admin/settings\"),\n  });\n\n  // Fetch referral statistics\n  const { data: referralStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/referral-stats\"],\n    queryFn: () => fetchWithAuth(\"/admin/referrals\"),\n  });\n\n  // Update settings when data is fetched\n  useEffect(() => {\n    if (currentSettings?.system) {\n      const referralPercent = currentSettings.system.referral_bonus_percentage || 10;\n      setSettings(prev => ({\n        ...prev,\n        referralBonusPercent: referralPercent,\n      }));\n      setLocalReferralInput(referralPercent.toString());\n    }\n  }, [currentSettings]);\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: (updatedSettings: any) =>\n      apiRequest(\"PATCH\", \"/api/admin/settings\", {\n        system: {\n          referral_bonus_percentage: updatedSettings.referralBonusPercent,\n        }\n      }).then(res => res.json()),\n    onSuccess: () => {\n      toast({\n        title: \"Referral Settings Updated\",\n        description: \"Changes will be applied to all future referral earnings\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/referrals\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update referral settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateReferralSettings = () => {\n    const value = parseFloat(localReferralInput);\n    if (isNaN(value) || value < 0 || value > 50) {\n      toast({\n        title: \"Invalid Percentage\",\n        description: \"Referral commission must be between 0% and 50%\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateSettingsMutation.mutate({\n      ...settings,\n      referralBonusPercent: value\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  const stats = referralStats ? {\n    totalReferrals: referralStats.length || 0,\n    totalCommissionsPaid: referralStats.reduce((sum: number, ref: any) => sum + (ref.balance * 0.1), 0),\n    activeReferrers: new Set(referralStats.map((ref: any) => ref.referredBy)).size,\n    averageCommissionPerReferral: referralStats.length > 0 ? \n      (referralStats.reduce((sum: number, ref: any) => sum + (ref.balance * 0.1), 0) / referralStats.length) : 0,\n  } : {\n    totalReferrals: 0,\n    totalCommissionsPaid: 0,\n    activeReferrers: 0,\n    averageCommissionPerReferral: 0,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white\">Referral Commission Settings</h2>\n        <p className=\"text-gray-400\">Configure global referral commission rates and limits</p>\n      </div>\n\n      {/* Current Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-400 text-sm\">Total Referrals</p>\n                <p className=\"text-2xl font-bold text-white\">{stats.totalReferrals}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-400 text-sm\">Active Referrers</p>\n                <p className=\"text-2xl font-bold text-white\">{stats.activeReferrers}</p>\n              </div>\n              <Target className=\"h-8 w-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-400 text-sm\">Commissions Paid</p>\n                <p className=\"text-2xl font-bold text-white\">${stats.totalCommissionsPaid.toFixed(2)}</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-yellow-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-400 text-sm\">Avg per Referral</p>\n                <p className=\"text-2xl font-bold text-white\">${stats.averageCommissionPerReferral.toFixed(2)}</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Global Referral Commission */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Percent className=\"h-5 w-5 mr-2\" />\n            Global Referral Commission\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"bg-blue-900/20 border border-blue-500/30 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Percent className=\"h-4 w-4 text-blue-400\" />\n              <span className=\"text-blue-400 font-semibold\">Current Commission Rate</span>\n            </div>\n            <div className=\"text-3xl font-bold text-white mb-2\">\n              {settings.referralBonusPercent}%\n            </div>\n            <p className=\"text-sm text-gray-400\">\n              This percentage is applied to all deposits and investments made by referred users\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-gray-300\">Referral Commission (%)</Label>\n                <div className=\"flex items-center space-x-2 mt-2\">\n                  <Input\n                    data-testid=\"input-referral-commission\"\n                    type=\"text\"\n                    value={localReferralInput}\n                    onChange={(e) => setLocalReferralInput(e.target.value)}\n                    onBlur={(e) => {\n                      const value = e.target.value.trim();\n                      if (value === '' || isNaN(Number(value)) || Number(value) < 0 || Number(value) > 50) {\n                        setLocalReferralInput(settings.referralBonusPercent.toString());\n                        if (value !== '' && (isNaN(Number(value)) || Number(value) < 0 || Number(value) > 50)) {\n                          toast({\n                            title: \"Invalid Value\",\n                            description: \"Referral commission must be between 0% and 50%\",\n                            variant: \"destructive\",\n                          });\n                        }\n                      } else {\n                        setSettings({\n                          ...settings,\n                          referralBonusPercent: parseFloat(value)\n                        });\n                      }\n                    }}\n                    className=\"bg-gray-700 border-gray-600 text-white\"\n                    placeholder=\"0-50\"\n                  />\n                  <Button\n                    data-testid=\"button-update-referral\"\n                    onClick={handleUpdateReferralSettings}\n                    disabled={updateSettingsMutation.isPending}\n                    className=\"bg-green-600 hover:bg-green-700 min-w-[100px]\"\n                  >\n                    {updateSettingsMutation.isPending ? (\n                      <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      <>\n                        <Save className=\"h-4 w-4 mr-1\" />\n                        Update\n                      </>\n                    )}\n                  </Button>\n                </div>\n                <p className=\"text-xs text-gray-400 mt-1\">\n                  Recommended: 5% - 15%. Higher rates may impact platform profitability.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-900 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-white mb-3\">Impact Preview</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">On $100 deposit:</span>\n                    <span className=\"text-green-400\">${(100 * settings.referralBonusPercent / 100).toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">On $500 investment:</span>\n                    <span className=\"text-green-400\">${(500 * settings.referralBonusPercent / 100).toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">On $1000 investment:</span>\n                    <span className=\"text-green-400\">${(1000 * settings.referralBonusPercent / 100).toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <RefreshCw className=\"h-4 w-4 text-yellow-400\" />\n              <span className=\"text-yellow-400 font-semibold\">Live Updates</span>\n            </div>\n            <p className=\"text-sm text-gray-300\">\n              Changes to referral commission rates will be applied immediately across the platform:\n            </p>\n            <ul className=\"text-xs text-gray-400 mt-2 space-y-1 list-disc list-inside\">\n              <li>User referral pages will show new rates</li>\n              <li>Future referral earnings will use new percentage</li>\n              <li>Admin reports will reflect updated commission structure</li>\n              <li>Existing referral links remain valid</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Referrals */}\n      {referralStats && referralStats.length > 0 && (\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Eye className=\"h-5 w-5 mr-2\" />\n              Recent Referrals\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {referralStats.slice(0, 5).map((referral: any, index: number) => (\n                <div key={referral.id || index} className=\"flex items-center justify-between p-3 bg-gray-900 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white text-sm font-semibold\">\n                      {referral.username.charAt(0).toUpperCase()}\n                    </div>\n                    <div>\n                      <div className=\"text-white font-medium\">{referral.username}</div>\n                      <div className=\"text-gray-400 text-sm\">{referral.email}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-white font-semibold\">${referral.balance.toFixed(2)}</div>\n                    <div className=\"text-green-400 text-sm\">\n                      +${(referral.balance * settings.referralBonusPercent / 100).toFixed(2)} earned\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":13924},"client/src/components/admin/SystemSettings.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Settings,\n  DollarSign,\n  Users,\n  Percent,\n  Clock,\n  Save,\n  RefreshCw,\n  Bot,\n  Mail\n} from \"lucide-react\";\n\ninterface SystemSettings {\n  system: {\n    maintenance_mode: boolean;\n    global_profit_multiplier: number;\n    referral_bonus_percentage: number;\n    arbitrage_refresh_rate: number;\n  };\n  withdrawal_limits: {\n    min_withdrawal: number;\n    max_daily_withdrawal: number;\n    processing_time_hours: number;\n  };\n  recaptcha?: {\n    enabled: boolean;\n    site_key: string;\n    secret_key: string;\n  };\n  ai_chat?: {\n    enabled: boolean;\n    personality: string;\n    api_keys: {\n      reply_keys: any[];\n      summary_keys: any[];\n      current_reply_index: number;\n      current_summary_index: number;\n    };\n  };\n  welcome_message?: {\n    title: string;\n    content: string;\n  };\n}\n\nexport default function SystemSettings() {\n  const { toast } = useToast();\n  \n  const [settings, setSettings] = useState<SystemSettings>({\n    system: {\n      maintenance_mode: false,\n      global_profit_multiplier: 1.0,\n      referral_bonus_percentage: 10,\n      arbitrage_refresh_rate: 30,\n    },\n    withdrawal_limits: {\n      min_withdrawal: 10,\n      max_daily_withdrawal: 10000,\n      processing_time_hours: 24,\n    },\n  });\n\n  // Local input states to allow free typing\n  const [localInputs, setLocalInputs] = useState({\n    referralCommission: \"10\",\n    minWithdrawal: \"10\",\n    maxWithdrawal: \"10000\",\n    processingTime: \"24\",\n    profitMultiplier: \"1.0\",\n    refreshRate: \"30\",\n    aiPersonality: \"You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities.\",\n    welcomeTitle: \"🎉 Welcome to TradePilot!\",\n    welcomeContent: `Welcome to TradePilot! We're excited to have you join our community of successful crypto investors.\n\nHere's what you can expect:\n• Daily profits from automated arbitrage trading\n• Real-time market opportunities\n• 24/7 professional support\n• Active investor community\n\nYour journey to financial freedom starts now. Join our chatroom to connect with other investors and share your success!\n\nBest regards,\nThe TradePilot Team 🚀`\n  });\n\n  // Fetch current settings\n  const { data: currentSettings, isLoading } = useQuery({\n    queryKey: [\"/api/admin/settings\"],\n    queryFn: () => fetchWithAuth(\"/admin/settings\"),\n  });\n\n  // Update settings when data is fetched\n  useEffect(() => {\n    if (currentSettings) {\n      setSettings(currentSettings);\n      setLocalInputs({\n        referralCommission: currentSettings.system?.referral_bonus_percentage?.toString() || \"10\",\n        minWithdrawal: currentSettings.withdrawal_limits?.min_withdrawal?.toString() || \"10\",\n        maxWithdrawal: currentSettings.withdrawal_limits?.max_daily_withdrawal?.toString() || \"10000\",\n        processingTime: currentSettings.withdrawal_limits?.processing_time_hours?.toString() || \"24\",\n        profitMultiplier: currentSettings.system?.global_profit_multiplier?.toString() || \"1.0\",\n        refreshRate: currentSettings.system?.arbitrage_refresh_rate?.toString() || \"30\",\n        aiPersonality: currentSettings.ai_chat?.personality || \"You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities.\",\n        welcomeTitle: currentSettings.welcome_message?.title || \"🎉 Welcome to TradePilot!\",\n        welcomeContent: currentSettings.welcome_message?.content || `Welcome to TradePilot! We're excited to have you join our community of successful crypto investors.\n\nHere's what you can expect:\n• Daily profits from automated arbitrage trading\n• Real-time market opportunities\n• 24/7 professional support\n• Active investor community\n\nYour journey to financial freedom starts now. Join our chatroom to connect with other investors and share your success!\n\nBest regards,\nThe TradePilot Team 🚀`\n      });\n    }\n  }, [currentSettings]);\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: (updatedSettings: Partial<SystemSettings>) =>\n      apiRequest(\"PATCH\", \"/api/admin/settings\", updatedSettings).then(res => res.json()),\n    onSuccess: (data) => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"System settings have been updated successfully\",\n      });\n      // Update local state with the returned data\n      setSettings(data);\n      setLocalInputs({\n        referralCommission: data.system?.referral_bonus_percentage?.toString() || \"10\",\n        minWithdrawal: data.withdrawal_limits?.min_withdrawal?.toString() || \"10\",\n        maxWithdrawal: data.withdrawal_limits?.max_daily_withdrawal?.toString() || \"10000\",\n        processingTime: data.withdrawal_limits?.processing_time_hours?.toString() || \"24\",\n        profitMultiplier: data.system?.global_profit_multiplier?.toString() || \"1.0\",\n        refreshRate: data.system?.arbitrage_refresh_rate?.toString() || \"30\",\n        aiPersonality: data.ai_chat?.personality || \"You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities.\",\n        welcomeTitle: data.welcome_message?.title || \"🎉 Welcome to TradePilot!\",\n        welcomeContent: data.welcome_message?.content || `Welcome to TradePilot! We're excited to have you join our community of successful crypto investors.\n\nHere's what you can expect:\n• Daily profits from automated arbitrage trading\n• Real-time market opportunities\n• 24/7 professional support\n• Active investor community\n\nYour journey to financial freedom starts now. Join our chatroom to connect with other investors and share your success!\n\nBest regards,\nThe TradePilot Team 🚀`\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update system settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateReferralCommission = () => {\n    updateSettingsMutation.mutate({\n      system: {\n        ...settings.system,\n        referral_bonus_percentage: settings.system.referral_bonus_percentage,\n      },\n    });\n  };\n\n  const handleUpdateMinWithdrawal = () => {\n    updateSettingsMutation.mutate({\n      withdrawal_limits: {\n        ...settings.withdrawal_limits,\n        min_withdrawal: settings.withdrawal_limits.min_withdrawal,\n      },\n    });\n  };\n\n  const handleUpdateAllSettings = () => {\n    // Update the main settings state with current local inputs first\n    const finalSettings = {\n      ...settings,\n      system: {\n        ...settings.system,\n        referral_bonus_percentage: parseFloat(localInputs.referralCommission) || 10,\n        global_profit_multiplier: parseFloat(localInputs.profitMultiplier) || 1.0,\n        arbitrage_refresh_rate: parseFloat(localInputs.refreshRate) || 30,\n      },\n      withdrawal_limits: {\n        ...settings.withdrawal_limits,\n        min_withdrawal: parseFloat(localInputs.minWithdrawal) || 10,\n        max_daily_withdrawal: parseFloat(localInputs.maxWithdrawal) || 10000,\n        processing_time_hours: parseFloat(localInputs.processingTime) || 24,\n      },\n      ai_chat: {\n        ...settings.ai_chat,\n        enabled: true,\n        personality: localInputs.aiPersonality.trim() || \"You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities.\",\n        api_keys: settings.ai_chat?.api_keys || {\n          reply_keys: [],\n          summary_keys: [],\n          current_reply_index: 0,\n          current_summary_index: 0,\n        }\n      },\n      welcome_message: {\n        title: localInputs.welcomeTitle.trim() || \"🎉 Welcome to TradePilot!\",\n        content: localInputs.welcomeContent.trim() || `Welcome to TradePilot! We're excited to have you join our community of successful crypto investors.\n\nHere's what you can expect:\n• Daily profits from automated arbitrage trading\n• Real-time market opportunities\n• 24/7 professional support\n• Active investor community\n\nYour journey to financial freedom starts now. Join our chatroom to connect with other investors and share your success!\n\nBest regards,\nThe TradePilot Team 🚀`\n      }\n    };\n    \n    // Update the local settings state as well\n    setSettings(finalSettings);\n    \n    // Send the mutation\n    updateSettingsMutation.mutate(finalSettings);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white\">System Settings</h2>\n        <p className=\"text-gray-400\">Configure system-wide settings and limits</p>\n      </div>\n\n      {/* Referral Commission Settings */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            Referral Commission Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-gray-300\">Referral Commission (%)</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  data-testid=\"input-referral-commission\"\n                  type=\"text\"\n                  value={localInputs.referralCommission}\n                  onChange={(e) => {\n                    setLocalInputs({\n                      ...localInputs,\n                      referralCommission: e.target.value\n                    });\n                  }}\n                  onBlur={(e) => {\n                    const value = e.target.value.trim();\n                    if (value === '' || isNaN(Number(value)) || Number(value) < 0 || Number(value) > 100) {\n                      setLocalInputs({\n                        ...localInputs,\n                        referralCommission: settings.system.referral_bonus_percentage.toString()\n                      });\n                      if (value !== '' && (isNaN(Number(value)) || Number(value) < 0 || Number(value) > 100)) {\n                        toast({\n                          title: \"Invalid Value\",\n                          description: \"Referral commission must be between 0 and 100\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    } else {\n                      setSettings({\n                        ...settings,\n                        system: {\n                          ...settings.system,\n                          referral_bonus_percentage: parseFloat(value)\n                        }\n                      });\n                    }\n                  }}\n                  className=\"bg-gray-700 border-gray-600 text-white\"\n                  placeholder=\"0-100\"\n                />\n                <Button\n                  data-testid=\"button-update-referral\"\n                  onClick={handleUpdateReferralCommission}\n                  disabled={updateSettingsMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Percent className=\"h-4 w-4 mr-1\" />\n                  Update\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-400\">\n                Percentage of deposit/investment earned by referrer\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Withdrawal Limits */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <DollarSign className=\"h-5 w-5 mr-2\" />\n            Withdrawal Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-gray-300\">Minimum Withdrawal ($)</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  data-testid=\"input-min-withdrawal\"\n                  type=\"text\"\n                  value={localInputs.minWithdrawal}\n                  onChange={(e) => {\n                    setLocalInputs({\n                      ...localInputs,\n                      minWithdrawal: e.target.value\n                    });\n                  }}\n                  onBlur={(e) => {\n                    const value = e.target.value.trim();\n                    if (value === '' || isNaN(Number(value)) || Number(value) < 1) {\n                      setLocalInputs({\n                        ...localInputs,\n                        minWithdrawal: settings.withdrawal_limits.min_withdrawal.toString()\n                      });\n                      if (value !== '' && (isNaN(Number(value)) || Number(value) < 1)) {\n                        toast({\n                          title: \"Invalid Value\",\n                          description: \"Minimum withdrawal must be at least $1\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    } else {\n                      setSettings({\n                        ...settings,\n                        withdrawal_limits: {\n                          ...settings.withdrawal_limits,\n                          min_withdrawal: parseFloat(value)\n                        }\n                      });\n                    }\n                  }}\n                  className=\"bg-gray-700 border-gray-600 text-white\"\n                  placeholder=\"Minimum amount\"\n                />\n                <Button\n                  data-testid=\"button-update-min-withdrawal\"\n                  onClick={handleUpdateMinWithdrawal}\n                  disabled={updateSettingsMutation.isPending}\n                  size=\"sm\"\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  Update\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-gray-300\">Max Daily Withdrawal ($)</Label>\n              <Input\n                data-testid=\"input-max-withdrawal\"\n                type=\"text\"\n                value={localInputs.maxWithdrawal}\n                onChange={(e) => {\n                  setLocalInputs({\n                    ...localInputs,\n                    maxWithdrawal: e.target.value\n                  });\n                }}\n                onBlur={(e) => {\n                  const value = e.target.value.trim();\n                  if (value === '' || isNaN(Number(value)) || Number(value) < 1) {\n                    setLocalInputs({\n                      ...localInputs,\n                      maxWithdrawal: settings.withdrawal_limits.max_daily_withdrawal.toString()\n                    });\n                    if (value !== '' && (isNaN(Number(value)) || Number(value) < 1)) {\n                      toast({\n                        title: \"Invalid Value\",\n                        description: \"Maximum daily withdrawal must be at least $1\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  } else {\n                    setSettings({\n                      ...settings,\n                      withdrawal_limits: {\n                        ...settings.withdrawal_limits,\n                        max_daily_withdrawal: parseFloat(value)\n                      }\n                    });\n                  }\n                }}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"Maximum daily amount\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-gray-300\">Processing Time (hours)</Label>\n              <Input\n                data-testid=\"input-processing-time\"\n                type=\"text\"\n                value={localInputs.processingTime}\n                onChange={(e) => {\n                  setLocalInputs({\n                    ...localInputs,\n                    processingTime: e.target.value\n                  });\n                }}\n                onBlur={(e) => {\n                  const value = e.target.value.trim();\n                  if (value === '' || isNaN(Number(value)) || Number(value) < 1) {\n                    setLocalInputs({\n                      ...localInputs,\n                      processingTime: settings.withdrawal_limits.processing_time_hours.toString()\n                    });\n                    if (value !== '' && (isNaN(Number(value)) || Number(value) < 1)) {\n                      toast({\n                        title: \"Invalid Value\",\n                        description: \"Processing time must be at least 1 hour\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  } else {\n                    setSettings({\n                      ...settings,\n                      withdrawal_limits: {\n                        ...settings.withdrawal_limits,\n                        processing_time_hours: parseFloat(value)\n                      }\n                    });\n                  }\n                }}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"Hours\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* System Configuration */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Settings className=\"h-5 w-5 mr-2\" />\n            System Configuration\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-gray-300\">Global Profit Multiplier</Label>\n              <Input\n                data-testid=\"input-profit-multiplier\"\n                type=\"text\"\n                value={localInputs.profitMultiplier}\n                onChange={(e) => {\n                  setLocalInputs({\n                    ...localInputs,\n                    profitMultiplier: e.target.value\n                  });\n                }}\n                onBlur={(e) => {\n                  const value = e.target.value.trim();\n                  if (value === '' || isNaN(Number(value)) || Number(value) < 0.1 || Number(value) > 10) {\n                    setLocalInputs({\n                      ...localInputs,\n                      profitMultiplier: settings.system.global_profit_multiplier.toString()\n                    });\n                    if (value !== '' && (isNaN(Number(value)) || Number(value) < 0.1 || Number(value) > 10)) {\n                      toast({\n                        title: \"Invalid Value\",\n                        description: \"Profit multiplier must be between 0.1 and 10\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  } else {\n                    setSettings({\n                      ...settings,\n                      system: {\n                        ...settings.system,\n                        global_profit_multiplier: parseFloat(value)\n                      }\n                    });\n                  }\n                }}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"0.1 - 10\"\n              />\n              <p className=\"text-xs text-gray-400\">Multiplier for all investment returns</p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-gray-300\">Arbitrage Refresh Rate (seconds)</Label>\n              <Input\n                data-testid=\"input-refresh-rate\"\n                type=\"text\"\n                value={localInputs.refreshRate}\n                onChange={(e) => {\n                  setLocalInputs({\n                    ...localInputs,\n                    refreshRate: e.target.value\n                  });\n                }}\n                onBlur={(e) => {\n                  const value = e.target.value.trim();\n                  if (value === '' || isNaN(Number(value)) || Number(value) < 10 || Number(value) > 300) {\n                    setLocalInputs({\n                      ...localInputs,\n                      refreshRate: settings.system.arbitrage_refresh_rate.toString()\n                    });\n                    if (value !== '' && (isNaN(Number(value)) || Number(value) < 10 || Number(value) > 300)) {\n                      toast({\n                        title: \"Invalid Value\",\n                        description: \"Refresh rate must be between 10 and 300 seconds\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  } else {\n                    setSettings({\n                      ...settings,\n                      system: {\n                        ...settings.system,\n                        arbitrage_refresh_rate: parseFloat(value)\n                      }\n                    });\n                  }\n                }}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"10 - 300 seconds\"\n              />\n              <p className=\"text-xs text-gray-400\">How often arbitrage data refreshes</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Welcome Message Configuration */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Mail className=\"h-5 w-5 mr-2\" />\n            Welcome Message Configuration\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Welcome Message Title</Label>\n            <Input\n              data-testid=\"input-welcome-title\"\n              type=\"text\"\n              value={localInputs.welcomeTitle}\n              onChange={(e) => {\n                setLocalInputs({\n                  ...localInputs,\n                  welcomeTitle: e.target.value\n                });\n              }}\n              onBlur={(e) => {\n                const value = e.target.value.trim();\n                if (value === '') {\n                  setLocalInputs({\n                    ...localInputs,\n                    welcomeTitle: settings.welcome_message?.title || '🎉 Welcome to TradePilot!'\n                  });\n                } else {\n                  setSettings({\n                    ...settings,\n                    welcome_message: {\n                      title: value,\n                      content: settings.welcome_message?.content || `Welcome to TradePilot! We're excited to have you join our community of successful crypto investors.\n\nHere's what you can expect:\n• Daily profits from automated arbitrage trading\n• Real-time market opportunities\n• 24/7 professional support\n• Active investor community\n\nYour journey to financial freedom starts now. Join our chatroom to connect with other investors and share your success!\n\nBest regards,\nThe TradePilot Team 🚀`\n                    }\n                  });\n                }\n              }}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"Enter the welcome message title...\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Welcome Message Content</Label>\n            <textarea\n              data-testid=\"textarea-welcome-content\"\n              value={localInputs.welcomeContent}\n              onChange={(e) => {\n                setLocalInputs({\n                  ...localInputs,\n                  welcomeContent: e.target.value\n                });\n              }}\n              onBlur={(e) => {\n                const value = e.target.value.trim();\n                if (value === '') {\n                  setLocalInputs({\n                    ...localInputs,\n                    welcomeContent: settings.welcome_message?.content || `Welcome to TradePilot! We're excited to have you join our community of successful crypto investors.\n\nHere's what you can expect:\n• Daily profits from automated arbitrage trading\n• Real-time market opportunities\n• 24/7 professional support\n• Active investor community\n\nYour journey to financial freedom starts now. Join our chatroom to connect with other investors and share your success!\n\nBest regards,\nThe TradePilot Team 🚀`\n                  });\n                } else {\n                  setSettings({\n                    ...settings,\n                    welcome_message: {\n                      title: settings.welcome_message?.title || '🎉 Welcome to TradePilot!',\n                      content: value\n                    }\n                  });\n                }\n              }}\n              className=\"bg-gray-700 border-gray-600 text-white min-h-[200px] resize-vertical\"\n              placeholder=\"Enter the welcome message content that new users will receive...\"\n            />\n            <p className=\"text-xs text-gray-400\">\n              This message will be sent to new users when they verify their account. You can use emojis and line breaks.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Chat Configuration */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Bot className=\"h-5 w-5 mr-2\" />\n            AI Chat Configuration\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">AI Personality Prompt</Label>\n            <textarea\n              data-testid=\"textarea-ai-personality\"\n              value={localInputs.aiPersonality}\n              onChange={(e) => {\n                setLocalInputs({\n                  ...localInputs,\n                  aiPersonality: e.target.value\n                });\n              }}\n              onBlur={(e) => {\n                const value = e.target.value.trim();\n                if (value === '') {\n                  setLocalInputs({\n                    ...localInputs,\n                    aiPersonality: settings.ai_chat?.personality || 'You are a helpful TradePilot AI assistant specializing in cryptocurrency trading and arbitrage opportunities.'\n                  });\n                } else {\n                  setSettings({\n                    ...settings,\n                    ai_chat: {\n                      ...settings.ai_chat,\n                      personality: value,\n                      enabled: true,\n                      api_keys: settings.ai_chat?.api_keys || {\n                        reply_keys: [],\n                        summary_keys: [],\n                        current_reply_index: 0,\n                        current_summary_index: 0,\n                      }\n                    }\n                  });\n                }\n              }}\n              className=\"bg-gray-700 border-gray-600 text-white min-h-[120px] resize-vertical\"\n              placeholder=\"Enter the AI personality prompt that defines how the AI should behave and respond...\"\n            />\n            <p className=\"text-xs text-gray-400\">\n              This prompt defines the AI's personality and behavior. Be specific about trading expertise, communication style, and helpful traits.\n            </p>\n          </div>\n\n\n        </CardContent>\n      </Card>\n\n      {/* Save All Settings */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardContent className=\"p-4\">\n          <Button\n            data-testid=\"button-save-all-settings\"\n            onClick={handleUpdateAllSettings}\n            disabled={updateSettingsMutation.isPending}\n            className=\"w-full bg-green-600 hover:bg-green-700\"\n            size=\"lg\"\n          >\n            {updateSettingsMutation.isPending ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Save className=\"h-4 w-4 mr-2\" />\n            )}\n            Save All Settings\n          </Button>\n          <p className=\"text-center text-xs text-gray-400 mt-2\">\n            Changes will be applied immediately and affect all users\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":29221},"client/src/components/admin/UserManagement.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { fetchWithAuth } from \"@/lib/crypto-api\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users,\n  Mail,\n  DollarSign,\n  Shield,\n  ShieldOff,\n  Eye,\n  Trash2,\n  UserPlus,\n  Search,\n  Settings2\n} from \"lucide-react\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  balance: number;\n  isActive: boolean;\n  isAdmin: boolean;\n  referralCode: string;\n  referredBy?: string;\n  createdAt: string;\n}\n\ninterface UserInvestment {\n  id: string;\n  user_id: string;\n  plan_id: string;\n  amount: number;\n  is_active: boolean;\n  plan_name?: string;\n}\n\ninterface ReferralStats {\n  totalReferrals: number;\n  totalEarnings: number;\n  referredUsers: User[];\n}\n\ninterface UserManagementProps {\n  onUserSelect?: (user: User) => void;\n}\n\nexport default function UserManagement({ onUserSelect }: UserManagementProps) {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const [userInvestments, setUserInvestments] = useState<UserInvestment[]>([]);\n  const [referralStats, setReferralStats] = useState<ReferralStats | null>(null);\n  \n  // Fetch users\n  const { data: users, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: () => fetchWithAuth(\"/admin/users\"),\n  });\n\n  // Fetch user investments when a user is selected\n  const { data: investments } = useQuery({\n    queryKey: [\"/api/admin/investments\", selectedUser?.id],\n    queryFn: () => fetchWithAuth(`/admin/investments?userId=${selectedUser?.id}`),\n    enabled: !!selectedUser,\n  });\n\n  // Fetch referral stats for selected user\n  const { data: referrals } = useQuery({\n    queryKey: [\"/api/admin/referrals\", selectedUser?.id],\n    queryFn: () => fetchWithAuth(`/admin/referrals?userId=${selectedUser?.id}`),\n    enabled: !!selectedUser,\n  });\n\n  // Filter users based on search\n  const filteredUsers = users?.filter((user: User) =>\n    user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: any }) =>\n      apiRequest(\"PATCH\", `/api/admin/users/${id}`, updates).then(res => res.json()),\n    onSuccess: () => {\n      toast({\n        title: \"User Updated\",\n        description: \"User information has been updated successfully\",\n      });\n      refetch();\n      setSelectedUser(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/admin/users/${id}`).then(res => res.json()),\n    onSuccess: () => {\n      toast({\n        title: \"User Deleted\",\n        description: \"User has been deleted successfully\",\n      });\n      refetch();\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUserClick = (user: User) => {\n    setSelectedUser(user);\n    setEditingUser({ ...user });\n    if (onUserSelect) {\n      onUserSelect(user);\n    }\n  };\n\n\n  const handleToggleActive = (user: User) => {\n    updateUserMutation.mutate({ \n      id: user.id, \n      updates: { isActive: !user.isActive } \n    });\n  };\n\n  const handleToggleAdmin = (user: User) => {\n    updateUserMutation.mutate({ \n      id: user.id, \n      updates: { isAdmin: !user.isAdmin } \n    });\n  };\n\n\n  const handleUpdateUserDetails = () => {\n    if (!editingUser || !selectedUser) return;\n    \n    const updates: any = {};\n    if (editingUser.username !== selectedUser.username) updates.username = editingUser.username;\n    if (editingUser.email !== selectedUser.email) updates.email = editingUser.email;\n    \n    if (Object.keys(updates).length > 0) {\n      updateUserMutation.mutate({ \n        id: selectedUser.id, \n        updates \n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">User Management</h2>\n          <p className=\"text-gray-400\">Manage all registered users and their settings</p>\n        </div>\n        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n          {filteredUsers.length} Users\n        </Badge>\n      </div>\n\n      {/* Search */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n        <Input\n          data-testid=\"input-search-users\"\n          placeholder=\"Search by username or email...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10 bg-gray-800 border-gray-700 text-white\"\n        />\n      </div>\n\n      {/* Users Grid */}\n      <div className=\"grid gap-4\">\n        {filteredUsers.map((user: User) => (\n          <Card \n            key={user.id} \n            className=\"bg-gray-800 border-gray-700 hover:bg-gray-750 cursor-pointer transition-colors\"\n            onClick={() => handleUserClick(user)}\n            data-testid={`card-user-${user.id}`}\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center\">\n                    <Users className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-white\">{user.username}</h3>\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n                      <Mail className=\"h-3 w-3\" />\n                      <span>{user.email}</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant={user.isActive ? \"default\" : \"destructive\"}>\n                    {user.isActive ? \"Active\" : \"Blocked\"}\n                  </Badge>\n                  {user.isAdmin && (\n                    <Badge variant=\"outline\" className=\"border-yellow-500 text-yellow-500\">\n                      Admin\n                    </Badge>\n                  )}\n                  <div className=\"text-right space-y-1\">\n                    <div className=\"font-semibold text-white\">${user.balance.toFixed(2)}</div>\n                    <div className=\"text-xs text-gray-400\">Balance</div>\n                    <div className=\"text-xs text-blue-400\">\n                      Referrals: {users?.filter((u: User) => u.referredBy === user.referralCode).length || 0}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* User Details Modal */}\n      {selectedUser && (\n        <Dialog open={!!selectedUser} onOpenChange={() => setSelectedUser(null)}>\n          <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>User Management - {selectedUser.username}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n              {/* User Profile */}\n              <div className=\"bg-gray-900 p-4 rounded-lg\">\n                <h3 className=\"text-lg font-semibold text-white mb-3\">Full Profile</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>ID</Label>\n                    <div className=\"text-gray-300 text-xs font-mono\">{selectedUser.id}</div>\n                  </div>\n                  <div>\n                    <Label>Current Balance</Label>\n                    <div className=\"text-green-400 font-semibold\">${selectedUser.balance.toFixed(2)}</div>\n                  </div>\n                  <div>\n                    <Label>Username</Label>\n                    <div className=\"text-gray-300\">{selectedUser.username}</div>\n                  </div>\n                  <div>\n                    <Label>Email</Label>\n                    <div className=\"text-gray-300\">{selectedUser.email}</div>\n                  </div>\n                  <div>\n                    <Label>Referral Code</Label>\n                    <div className=\"text-blue-400 font-mono\">{selectedUser.referralCode}</div>\n                  </div>\n                  <div>\n                    <Label>Joined Date</Label>\n                    <div className=\"text-gray-300\">\n                      {new Date(selectedUser.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                  <div>\n                    <Label>Total Referrals</Label>\n                    <div className=\"text-cyan-400\">\n                      {users?.filter((u: User) => u.referredBy === selectedUser.referralCode).length || 0}\n                    </div>\n                  </div>\n                  <div>\n                    <Label>Active Plans</Label>\n                    <div className=\"text-purple-400\">\n                      {investments?.filter((inv: UserInvestment) => inv.is_active).length || 0}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Balance Management Notice */}\n              <div className=\"bg-blue-900/20 border border-blue-500/30 p-4 rounded-lg\">\n                <h3 className=\"text-lg font-semibold text-blue-400 mb-2\">Balance Management</h3>\n                <p className=\"text-blue-300 text-sm\">\n                  To adjust user balances, please use the dedicated <strong>Balance Management</strong> section. \n                  This ensures proper tracking of all balance changes as deposit records.\n                </p>\n              </div>\n\n              {/* Edit User Details */}\n              <div className=\"bg-gray-900 p-4 rounded-lg space-y-4\">\n                <h3 className=\"text-lg font-semibold text-white\">Edit User Details</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Username</Label>\n                    <Input\n                      data-testid=\"input-edit-username\"\n                      value={editingUser?.username || \"\"}\n                      onChange={(e) => setEditingUser({...editingUser, username: e.target.value})}\n                      className=\"bg-gray-700 border-gray-600\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Email</Label>\n                    <Input\n                      data-testid=\"input-edit-email\"\n                      type=\"email\"\n                      value={editingUser?.email || \"\"}\n                      onChange={(e) => setEditingUser({...editingUser, email: e.target.value})}\n                      className=\"bg-gray-700 border-gray-600\"\n                    />\n                  </div>\n                </div>\n                <Button\n                  data-testid=\"button-update-details\"\n                  onClick={handleUpdateUserDetails}\n                  disabled={updateUserMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Settings2 className=\"h-4 w-4 mr-1\" />\n                  Update Details\n                </Button>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  data-testid=\"button-toggle-status\"\n                  variant={selectedUser.isActive ? \"destructive\" : \"default\"}\n                  onClick={() => handleToggleActive(selectedUser)}\n                  disabled={updateUserMutation.isPending}\n                >\n                  {selectedUser.isActive ? (\n                    <>\n                      <ShieldOff className=\"h-4 w-4 mr-1\" />\n                      Block User\n                    </>\n                  ) : (\n                    <>\n                      <Shield className=\"h-4 w-4 mr-1\" />\n                      Unblock User\n                    </>\n                  )}\n                </Button>\n                \n                <Button\n                  data-testid=\"button-toggle-admin\"\n                  variant={selectedUser.isAdmin ? \"outline\" : \"secondary\"}\n                  onClick={() => handleToggleAdmin(selectedUser)}\n                  disabled={updateUserMutation.isPending}\n                >\n                  {selectedUser.isAdmin ? \"Remove Admin\" : \"Make Admin\"}\n                </Button>\n\n                <Button\n                  data-testid=\"button-delete-user\"\n                  variant=\"destructive\"\n                  onClick={() => {\n                    if (confirm(`⚠️ PERMANENT DELETION WARNING ⚠️\\n\\nThis will permanently delete user \"${selectedUser.username}\" and ALL their data:\\n• User account & profile\\n• All investments & earnings\\n• Deposit & withdrawal history\\n• Messages & support tickets\\n• Login logs & activity\\n\\nAfter deletion, they can register again with the same email/username.\\n\\nThis action CANNOT be undone. Are you absolutely sure?`)) {\n                      deleteUserMutation.mutate(selectedUser.id);\n                    }\n                  }}\n                  disabled={deleteUserMutation.isPending}\n                  className=\"bg-red-600 hover:bg-red-700 border-red-500\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                  {deleteUserMutation.isPending ? \"Deleting...\" : \"🗑️ Permanently Delete User\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {filteredUsers.length === 0 && (\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-8 text-center\">\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-white mb-2\">No Users Found</h3>\n            <p className=\"text-gray-400\">\n              {searchTerm ? \"No users match your search criteria\" : \"No users have registered yet\"}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":15565},"client/src/components/admin/WithdrawalManagement.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { CheckCircle, XCircle, Eye, DollarSign } from \"lucide-react\";\n\nconst fetchWithAuth = async (endpoint: string, options: RequestInit = {}) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`/api${endpoint}`, {\n    ...options,\n    headers: {\n      ...options.headers,\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Request failed\");\n  }\n\n  return response.json();\n};\n\ninterface WithdrawalManagementProps {\n  onClose?: () => void;\n}\n\nexport default function WithdrawalManagement({ onClose }: WithdrawalManagementProps) {\n  const { toast } = useToast();\n  const [selectedWithdrawal, setSelectedWithdrawal] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [approvalStatus, setApprovalStatus] = useState<\"approved\" | \"rejected\">(\"approved\");\n  const [adminNotes, setAdminNotes] = useState(\"\");\n\n  // Fetch all withdrawals for admin\n  const { data: withdrawals, isLoading } = useQuery({\n    queryKey: [\"/admin/withdrawals\"],\n    queryFn: () => fetchWithAuth(\"/admin/withdrawals\"),\n  });\n\n  const approveWithdrawalMutation = useMutation({\n    mutationFn: (data: { id: string; status: string; admin_notes: string }) =>\n      fetchWithAuth(`/admin/withdrawals/${data.id}/approve`, {\n        method: \"POST\",\n        body: JSON.stringify({ \n          status: data.status, \n          admin_notes: data.admin_notes \n        }),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/admin/withdrawals\"] });\n      toast({ title: \"Withdrawal processed successfully\" });\n      setIsDialogOpen(false);\n      setSelectedWithdrawal(null);\n      setAdminNotes(\"\");\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error processing withdrawal\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleApproval = () => {\n    if (!selectedWithdrawal) return;\n    \n    approveWithdrawalMutation.mutate({\n      id: selectedWithdrawal.id,\n      status: approvalStatus,\n      admin_notes: adminNotes,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"approved\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"rejected\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center p-8\">Loading withdrawals...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Withdrawal Management</h2>\n        {onClose && (\n          <Button variant=\"outline\" onClick={onClose}>\n            Back to Dashboard\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5\" />\n            All Withdrawal Requests\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Cryptocurrency</TableHead>\n                  <TableHead>Wallet Address</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {withdrawals?.map((withdrawal: any) => (\n                  <TableRow key={withdrawal.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{withdrawal.user?.username}</div>\n                        <div className=\"text-sm text-gray-500\">{withdrawal.user?.email}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{withdrawal.amount} {withdrawal.cryptocurrency}</div>\n                        <div className=\"text-sm text-gray-500\">${withdrawal.usd_value || withdrawal.usdValue}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>{withdrawal.cryptocurrency}</TableCell>\n                    <TableCell>\n                      <div className=\"max-w-[150px] truncate\" title={withdrawal.wallet_address || withdrawal.walletAddress}>\n                        {withdrawal.wallet_address || withdrawal.walletAddress}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(withdrawal.status)}>\n                        {withdrawal.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {withdrawal.created_at || withdrawal.createdAt ? \n                        new Date(withdrawal.created_at || withdrawal.createdAt).toLocaleString() :\n                        \"Processing\"\n                      }\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setSelectedWithdrawal(withdrawal);\n                          setIsDialogOpen(true);\n                        }}\n                        data-testid={`button-review-withdrawal-${withdrawal.id}`}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        Review\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {(!withdrawals || withdrawals.length === 0) && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                      No withdrawal requests found\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Review Withdrawal Request</DialogTitle>\n            <DialogDescription>\n              Review and approve or reject this withdrawal request\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedWithdrawal && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">User</Label>\n                  <p className=\"text-sm\">{selectedWithdrawal.user?.username} ({selectedWithdrawal.user?.email})</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Amount</Label>\n                  <p className=\"text-sm\">{selectedWithdrawal.amount} {selectedWithdrawal.cryptocurrency} (${selectedWithdrawal.usd_value || selectedWithdrawal.usdValue})</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Wallet Address</Label>\n                  <p className=\"text-sm break-all\">{selectedWithdrawal.wallet_address || selectedWithdrawal.walletAddress}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Current Status</Label>\n                  <Badge className={getStatusColor(selectedWithdrawal.status)}>\n                    {selectedWithdrawal.status}\n                  </Badge>\n                </div>\n              </div>\n\n              {selectedWithdrawal.status === \"pending\" && (\n                <div className=\"space-y-4 border-t pt-4\">\n                  <div>\n                    <Label>Action</Label>\n                    <Select value={approvalStatus} onValueChange={(value: \"approved\" | \"rejected\") => setApprovalStatus(value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"approved\">Approve Withdrawal</SelectItem>\n                        <SelectItem value=\"rejected\">Reject Withdrawal</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label>Admin Notes</Label>\n                    <Textarea\n                      placeholder=\"Add any notes about this withdrawal...\"\n                      value={adminNotes}\n                      onChange={(e) => setAdminNotes(e.target.value)}\n                      data-testid=\"textarea-admin-notes\"\n                    />\n                  </div>\n\n                  <div className=\"flex gap-2 pt-4\">\n                    <Button\n                      onClick={handleApproval}\n                      disabled={approveWithdrawalMutation.isPending}\n                      variant={approvalStatus === \"approved\" ? \"default\" : \"destructive\"}\n                      data-testid=\"button-process-withdrawal\"\n                    >\n                      {approvalStatus === \"approved\" ? (\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      ) : (\n                        <XCircle className=\"w-4 h-4 mr-2\" />\n                      )}\n                      {approveWithdrawalMutation.isPending ? \"Processing...\" : `${approvalStatus === \"approved\" ? \"Approve\" : \"Reject\"} Withdrawal`}\n                    </Button>\n                    <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {(selectedWithdrawal.admin_notes || selectedWithdrawal.adminNotes) && (\n                <div className=\"border-t pt-4\">\n                  <Label className=\"text-sm font-medium\">Previous Admin Notes</Label>\n                  <p className=\"text-sm mt-1 bg-gray-50 dark:bg-gray-900 p-3 rounded\">\n                    {selectedWithdrawal.admin_notes || selectedWithdrawal.adminNotes}\n                  </p>\n                </div>\n              )}\n\n              <div className=\"border-t pt-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Request Date</Label>\n                    <p className=\"text-sm\">{selectedWithdrawal.created_at || selectedWithdrawal.createdAt ? \n                      new Date(selectedWithdrawal.created_at || selectedWithdrawal.createdAt).toLocaleString() :\n                      \"Processing\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">User Country</Label>\n                    <p className=\"text-sm\">{selectedWithdrawal.user?.country || \"Not specified\"}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12480},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { User } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n// Add 3D pulse animation for the logo text\nconst logoStyles = `\n  @keyframes pulse3d {\n    0%, 100% { \n      transform: perspective(600px) rotateX(20deg) rotateY(-5deg) scale(1); \n      filter: drop-shadow(0 4px 8px rgba(0,255,255,0.3)) drop-shadow(0 8px 16px rgba(65,105,225,0.2));\n    }\n    50% { \n      transform: perspective(600px) rotateX(20deg) rotateY(-5deg) scale(1.05); \n      filter: drop-shadow(0 6px 12px rgba(0,255,255,0.5)) drop-shadow(0 12px 24px rgba(65,105,225,0.3));\n    }\n  }\n`;\n\ninterface HeaderProps {\n  onMenuClick?: () => void;\n}\n\nexport default function Header({ onMenuClick }: HeaderProps) {\n  const { user } = useAuth();\n\n  // Get unread inbox count for profile icon notification\n  const { data: unreadData } = useQuery<{ count: number }>({\n    queryKey: ['/api/inbox/unread-count'],\n    refetchInterval: 5000, // Check every 5 seconds for faster updates\n    enabled: !!user,\n  });\n\n  const unreadCount = unreadData?.count || 0;\n\n  return (\n    <>\n      <style>{logoStyles}</style>\n      <header className=\"bg-crypto-card border-b border-gray-700 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n        {/* Left side - 3D TradePilot Ai text */}\n        <div className=\"flex items-center space-x-2\">\n          <span \n            className=\"text-xl font-bold relative select-none cursor-pointer text-white\"\n          >\n            TradePilot AI\n          </span>\n        </div>\n\n        {/* Right side - 3D Profile icon */}\n        <div className=\"relative\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            onClick={onMenuClick}\n            className=\"w-12 h-12 rounded-full bg-gradient-to-br from-slate-700 via-slate-600 to-slate-500 hover:from-slate-600 hover:via-slate-500 hover:to-slate-400 shadow-2xl border-2 border-slate-400/30 transform hover:scale-110 hover:-translate-y-1 transition-all duration-300 active:scale-95\"\n            style={{\n              boxShadow: 'inset 0 1px 0 rgba(255,255,255,0.2), 0 4px 8px rgba(0,0,0,0.3), 0 8px 16px rgba(0,0,0,0.15)'\n            }}\n            data-testid=\"button-profile-menu\"\n          >\n            {/* 3D Profile Avatar */}\n            <div className=\"relative w-8 h-8 rounded-full bg-gradient-to-br from-gray-300 to-gray-600 shadow-inner border border-gray-400/50\">\n              {/* Face */}\n              <div className=\"absolute inset-0 rounded-full bg-gradient-to-br from-white to-gray-200\">\n                {/* Head */}\n                <div className=\"absolute top-1.5 left-1/2 transform -translate-x-1/2 w-3 h-3 rounded-full bg-gradient-to-br from-gray-100 to-gray-300 shadow-sm\"></div>\n                {/* Body */}\n                <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-5 h-3 rounded-t-full bg-gradient-to-br from-gray-500 to-gray-700\"></div>\n                {/* Inner shadow for depth */}\n                <div className=\"absolute inset-0 rounded-full shadow-inner bg-gradient-to-br from-transparent via-transparent to-black/10\"></div>\n              </div>\n              {/* Outer ring highlight */}\n              <div className=\"absolute -inset-0.5 rounded-full bg-gradient-to-tr from-white/30 via-transparent to-transparent\"></div>\n            </div>\n          </Button>\n          \n          {/* Red notification dot for profile icon */}\n          <AnimatePresence>\n            {unreadCount > 0 && (\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                exit={{ scale: 0 }}\n                className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold shadow-lg border-2 border-gray-800\"\n                data-testid=\"profile-notification-dot\"\n              >\n                {unreadCount > 9 ? '9+' : unreadCount}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </header>\n    </>\n  );\n}\n","size_bytes":4262},"client/src/components/layout/main-layout.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"./header\";\nimport Sidebar from \"./sidebar\";\nimport MobileNav from \"./mobile-nav\";\nimport { FloatingContactButton } from \"@/components/floating-contact-button\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const handleMenuClick = () => {\n    setSidebarOpen(true);\n  };\n\n  const handleSidebarClose = () => {\n    setSidebarOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-crypto-dark overflow-x-hidden\">\n      <div className=\"flex min-w-0\">\n        {/* Sidebar */}\n        <Sidebar isOpen={sidebarOpen} onClose={handleSidebarClose} />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col min-w-0\">\n          <Header onMenuClick={handleMenuClick} />\n          <main className=\"flex-1 p-3 sm:p-6 overflow-y-auto overflow-x-hidden pb-24 md:pb-6 max-w-full\">\n            <div className=\"max-w-full overflow-x-hidden\">\n              {children}\n            </div>\n          </main>\n        </div>\n      </div>\n      \n      {/* Mobile Navigation */}\n      <MobileNav />\n      \n      {/* Floating Contact Button */}\n      <FloatingContactButton />\n    </div>\n  );\n}","size_bytes":1299},"client/src/components/layout/mobile-nav.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  LayoutDashboard,\n  PlusCircle,\n  MinusCircle,\n  Bot,\n  Users,\n} from \"lucide-react\";\n\nconst mobileNavItems = [\n  { path: \"/dashboard\", label: \"Dashboard\", icon: LayoutDashboard },\n  { path: \"/deposit\", label: \"Deposit\", icon: PlusCircle },\n  { path: \"/withdraw\", label: \"Withdraw\", icon: MinusCircle },\n  { path: \"/plans\", label: \"AI Plans\", icon: Bot },\n  { path: \"/referrals\", label: \"Referrals\", icon: Users },\n];\n\nexport default function MobileNav() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-crypto-card border-t border-gray-700 px-6 py-2 z-50 md:hidden\">\n      <div className=\"flex items-center justify-around\">\n        {mobileNavItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Button\n              key={item.path}\n              variant=\"ghost\"\n              size=\"sm\"\n              className={`flex flex-col items-center py-2 relative ${\n                isActive ? \"text-crypto-blue\" : \"text-gray-400\"\n              }`}\n              onClick={() => setLocation(item.path)}\n              data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n            >\n              <Icon className=\"w-5 h-5 mb-1\" />\n              <span className=\"text-xs\">{item.label}</span>\n\n            </Button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1523},"client/src/components/layout/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Inbox,\n  Settings,\n  User,\n  LogOut,\n} from \"lucide-react\";\n\nconst sidebarMenuItems = [\n  { path: \"/inbox\", label: \"Inbox\", icon: Inbox },\n  { path: \"/settings\", label: \"Settings\", icon: Settings },\n];\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n\n  // Get unread inbox count\n  const { data: unreadData } = useQuery<{ count: number }>({\n    queryKey: ['/api/inbox/unread-count'],\n    refetchInterval: 30000,\n    enabled: !!user,\n  });\n\n  const unreadCount = unreadData?.count || 0;\n\n  const handleNavigation = (path: string) => {\n    setLocation(path);\n    onClose();\n  };\n\n  const handleLogout = () => {\n    logout();\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n        onClick={onClose}\n      />\n      \n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed top-0 left-0 h-full w-80 bg-slate-900 border-r border-slate-700 z-50 transform transition-transform duration-300 ease-in-out\",\n        \"lg:relative lg:translate-x-0\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        <div className=\"flex flex-col h-full\">\n          {/* Profile Section */}\n          <div className=\"p-4 border-b border-slate-700\">\n            <div className=\"flex items-center gap-3 p-3\">\n              <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-green-500 flex items-center justify-center\">\n                <User className=\"w-5 h-5 text-white\" />\n              </div>\n              <div className=\"text-left\">\n                <div className=\"text-white font-medium\" data-testid=\"text-username\">\n                  {user?.username}\n                </div>\n                <div className=\"text-sm text-gray-400\" data-testid=\"text-balance\">\n                  ${user?.balance.toFixed(2)}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Sidebar Menu Items */}\n          <div className=\"p-4 space-y-2\">\n            {sidebarMenuItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.path;\n              \n              return (\n                <Button\n                  key={item.path}\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start text-gray-300 hover:text-white hover:bg-slate-800\",\n                    isActive && \"bg-slate-800 text-white\"\n                  )}\n                  onClick={() => handleNavigation(item.path)}\n                  data-testid={`sidebar-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Icon className=\"w-5 h-5 mr-3\" />\n                  {item.label}\n                  {item.path === \"/inbox\" && unreadCount > 0 && (\n                    <Badge variant=\"destructive\" className=\"ml-auto h-5 text-xs\" data-testid=\"badge-sidebar-inbox-count\">\n                      {unreadCount}\n                    </Badge>\n                  )}\n                </Button>\n              );\n            })}\n          </div>\n\n          {/* Spacer */}\n          <div className=\"flex-1\"></div>\n          \n          {/* Logout at bottom */}\n          <div className=\"p-4 border-t border-slate-700\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-3\" />\n              Logout\n            </Button>\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4\">\n            <div className=\"text-center text-xs text-gray-500\">\n              TradePilot v2.0\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":4288},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/balance-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface BalanceCardProps {\n  title: string;\n  value: string;\n  change?: string;\n  icon: LucideIcon;\n  iconColor?: string;\n  changeColor?: string;\n}\n\nexport default function BalanceCard({\n  title,\n  value,\n  change,\n  icon: Icon,\n  iconColor = \"text-crypto-green\",\n  changeColor = \"text-crypto-green\",\n}: BalanceCardProps) {\n  return (\n    <Card className=\"bg-crypto-card border-gray-700\" data-testid=\"balance-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-400\" data-testid=\"card-title\">{title}</h3>\n          <Icon className={`w-5 h-5 ${iconColor}`} />\n        </div>\n        <div className=\"text-2xl font-bold text-white mb-2\" data-testid=\"card-value\">{value}</div>\n        {change && (\n          <div className={`text-sm ${changeColor}`} data-testid=\"card-change\">{change}</div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1052},"client/src/components/ui/brand-logo.tsx":{"content":"import React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface BrandLogoProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  showText?: boolean;\n  textClassName?: string;\n  onClick?: () => void;\n}\n\ninterface LogoSettings {\n  logoUrl?: string;\n  logoName?: string;\n  uploadedAt?: string;\n}\n\nexport default function BrandLogo({ \n  size = \"md\", \n  className = \"\", \n  showText = true,\n  textClassName = \"\",\n  onClick \n}: BrandLogoProps) {\n  // Fetch logo settings from public API\n  const { data: logoSettings } = useQuery<LogoSettings>({\n    queryKey: ['/api/logo'],\n    retry: 1,\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  const sizeClasses = {\n    sm: \"w-8 h-8\",\n    md: \"w-12 h-12\",\n    lg: \"w-16 h-16\"\n  };\n\n  const textSizeClasses = {\n    sm: \"text-lg\",\n    md: \"text-2xl\",\n    lg: \"text-3xl\"\n  };\n\n  return (\n    <div \n      className={`flex items-center space-x-3 ${onClick ? 'cursor-pointer' : ''} ${className}`}\n      onClick={onClick}\n    >\n      {/* Logo */}\n      <div className={`${sizeClasses[size]} rounded-xl flex items-center justify-center overflow-hidden ${!logoSettings?.logoUrl ? 'crypto-gradient shadow-lg glow-pulse' : 'bg-white shadow-lg border border-gray-200'}`}>\n        {logoSettings?.logoUrl ? (\n          <img \n            src={logoSettings.logoUrl} \n            alt=\"TradePilot Logo\" \n            className=\"w-full h-full object-contain\"\n            onError={(e) => {\n              // Fallback to default logo if custom logo fails to load\n              const target = e.target as HTMLImageElement;\n              target.style.display = 'none';\n              const parent = target.parentElement;\n              if (parent) {\n                parent.className = `${sizeClasses[size]} rounded-xl crypto-gradient flex items-center justify-center shadow-lg glow-pulse`;\n                parent.innerHTML = `<span class=\"${textSizeClasses[size]} font-bold text-white\">T</span>`;\n              }\n            }}\n          />\n        ) : (\n          <span className={`${textSizeClasses[size]} font-bold text-white`}>T</span>\n        )}\n      </div>\n\n      {/* Brand Text */}\n      {showText && (\n        <div className=\"flex flex-col\">\n          <span className={`${textSizeClasses[size]} font-bold text-white ${textClassName}`}>\n            TradePilot AI\n          </span>\n          <span className=\"text-xs text-crypto-blue font-medium\">\n            AI Arbitrage Trading\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2498},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50 text-black\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4896},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/crypto-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport huobiLogo from \"@assets/images_1755525575253.png\";\nimport okxLogo from \"@assets/images (2)_1755525575365.png\";\nimport gateioLogo from \"@assets/images (1)_1755525575418.png\";\n\ninterface CryptoCardProps {\n  symbol: string;\n  name: string;\n  buyExchange: string;\n  sellExchange: string;\n  buyPrice: number;\n  sellPrice: number;\n  profitPercentage: number;\n  volume: number;\n  isProfitable?: boolean;\n}\n\nexport default function CryptoCard({\n  symbol,\n  name,\n  buyExchange,\n  sellExchange,\n  buyPrice,\n  sellPrice,\n  profitPercentage,\n  volume,\n  isProfitable = false,\n}: CryptoCardProps) {\n  // Calculate profit in dollars (absolute difference)\n  const profitInDollars = sellPrice - buyPrice;\n\n  const getCryptoIcon = (symbol: string) => {\n    const baseSymbol = symbol.split('/')[0].toLowerCase();\n    const iconUrl = `https://assets.coincap.io/assets/icons/${baseSymbol}@2x.png`;\n    \n    return (\n      <div className=\"w-10 h-10 rounded-full bg-white p-1 flex items-center justify-center\">\n        <img \n          src={iconUrl} \n          alt={`${symbol} logo`}\n          className=\"w-8 h-8 rounded-full\"\n          onError={(e) => {\n            // Fallback to a generic crypto icon if the specific one fails\n            const target = e.target as HTMLImageElement;\n            target.src = \"https://assets.coincap.io/assets/icons/btc@2x.png\";\n          }}\n        />\n      </div>\n    );\n  };\n\n  const getExchangeIcon = (exchangeName: string) => {\n    // Real exchange logo URLs with your provided authentic assets\n    const exchangeLogos: { [key: string]: string } = {\n      'Binance': 'https://assets.coingecko.com/markets/images/52/small/binance.jpg',\n      'Coinbase': 'https://assets.coingecko.com/markets/images/23/small/Coinbase_Coin_Primary.png',\n      'Kraken': 'https://assets.coingecko.com/markets/images/29/small/kraken.jpg',\n      'Bitfinex': 'https://assets.coingecko.com/markets/images/4/small/BItfinex.png',\n      'Huobi': huobiLogo,\n      'KuCoin': 'https://assets.coingecko.com/markets/images/61/small/kucoin.jpg',\n      'Bybit': 'https://assets.coingecko.com/markets/images/698/small/bybit.jpg',\n      'OKX': okxLogo,\n      'Gate.io': gateioLogo,\n      'Bitget': 'https://assets.coingecko.com/markets/images/540/small/2023-07-25_21.47.16.jpg'\n    };\n\n    const logoUrl = exchangeLogos[exchangeName];\n\n    return (\n      <div className=\"w-6 h-6 rounded-full bg-white p-0.5 flex items-center justify-center\">\n        <img \n          src={logoUrl || `data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20'><rect width='20' height='20' fill='%23007DFF' rx='10'/><text x='50%' y='50%' font-family='Arial' font-size='12' fill='white' text-anchor='middle' dy='4'>${exchangeName.charAt(0)}</text></svg>`}\n          alt={`${exchangeName} logo`}\n          className=\"w-5 h-5 object-contain rounded-full\"\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Card \n      className={`${\n        isProfitable \n          ? \"border-crypto-green border-opacity-30 bg-crypto-green bg-opacity-5 profit-flash\" \n          : \"border-gray-700\"\n      } bg-crypto-card`}\n      data-testid=\"crypto-card\"\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            {getCryptoIcon(symbol)}\n            <div>\n              <div className=\"font-semibold\" data-testid=\"crypto-symbol\">{symbol}</div>\n              <div className=\"text-sm text-gray-400\" data-testid=\"crypto-name\">{name}</div>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-crypto-green font-bold text-lg\" data-testid=\"profit-dollars\">\n              +${profitInDollars.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-gray-400\">Profit</div>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <div className=\"text-gray-400\">Buy from</div>\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {getExchangeIcon(buyExchange)}\n              <div className=\"font-semibold\" data-testid=\"buy-exchange\">{buyExchange}</div>\n            </div>\n            <div className=\"text-white\" data-testid=\"buy-price\">${buyPrice.toLocaleString()}</div>\n          </div>\n          <div>\n            <div className=\"text-gray-400\">Sell to</div>\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {getExchangeIcon(sellExchange)}\n              <div className=\"font-semibold\" data-testid=\"sell-exchange\">{sellExchange}</div>\n            </div>\n            <div className=\"text-crypto-green\" data-testid=\"sell-price\">${sellPrice.toLocaleString()}</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4899},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm text-black\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":802},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/plan-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface PlanCardProps {\n  id: string;\n  name: string;\n  description: string;\n  dailyReturn: string;\n  duration: number;\n  minInvestment: string;\n  maxInvestment: string;\n  totalReturn: string;\n  icon: LucideIcon;\n  isPopular?: boolean;\n  isPremium?: boolean;\n  onInvest: (planId: string) => void;\n}\n\nexport default function PlanCard({\n  id,\n  name,\n  description,\n  dailyReturn,\n  duration,\n  minInvestment,\n  maxInvestment,\n  totalReturn,\n  icon: Icon,\n  isPopular = false,\n  isPremium = false,\n  onInvest,\n}: PlanCardProps) {\n  const getBorderColor = () => {\n    if (isPremium) return \"border-yellow-500\";\n    if (isPopular) return \"border-crypto-green\";\n    return \"border-gray-700\";\n  };\n\n  const getIconBgColor = () => {\n    if (isPremium) return \"bg-yellow-500 bg-opacity-20 text-yellow-500\";\n    if (isPopular) return \"bg-crypto-green bg-opacity-20 text-crypto-green\";\n    return \"bg-crypto-blue bg-opacity-20 text-crypto-blue\";\n  };\n\n  const getButtonStyle = () => {\n    if (isPremium) return \"bg-yellow-500 text-black hover:opacity-90\";\n    if (isPopular) return \"crypto-gradient\";\n    return \"bg-crypto-blue hover:opacity-90\";\n  };\n\n  return (\n    <Card className={`bg-crypto-card ${getBorderColor()} relative overflow-hidden`} data-testid=\"plan-card\">\n      {isPopular && (\n        <div className=\"absolute top-0 right-0 bg-crypto-green text-white text-xs px-3 py-1\" data-testid=\"popular-badge\">\n          Popular\n        </div>\n      )}\n      \n      <CardContent className=\"p-6\">\n        <div className=\"text-center mb-6\">\n          <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${getIconBgColor()}`}>\n            <Icon className=\"w-8 h-8\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2\" data-testid=\"plan-name\">{name}</h3>\n          <p className=\"text-gray-400\" data-testid=\"plan-description\">{description}</p>\n        </div>\n        \n        <div className=\"space-y-4 mb-6\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">Daily Return</span>\n            <span className=\"text-crypto-green font-semibold\" data-testid=\"daily-return\">{dailyReturn}%</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">Duration</span>\n            <span data-testid=\"duration\">{duration} days</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">Minimum</span>\n            <span data-testid=\"min-investment\">${minInvestment}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">Maximum</span>\n            <span data-testid=\"max-investment\">${maxInvestment}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">Total Return</span>\n            <span className=\"text-crypto-green font-semibold\" data-testid=\"total-return\">{totalReturn}%</span>\n          </div>\n        </div>\n        \n        <Button \n          className={`w-full transition-opacity ${getButtonStyle()}`}\n          onClick={() => onInvest(id)}\n          data-testid=\"button-invest\"\n        >\n          Invest Now\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3444},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 text-black\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold text-black\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 text-black\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5775},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm text-black\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":700},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/auth/forgot-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { forgotPasswordSchema, type ForgotPasswordData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nexport default function ForgotPassword() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const form = useForm<ForgotPasswordData>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ForgotPasswordData) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/auth/forgot-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Reset Code Sent!\",\n          description: result.message,\n        });\n        setLocation(`/auth/reset-password?email=${encodeURIComponent(data.email)}`);\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to send reset code.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen hero-3d-bg flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Floating Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-orange-500/10 to-transparent blur-xl\"></div>\n        <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-red-500/10 to-transparent blur-lg\"></div>\n        <div className=\"floating-3d absolute bottom-20 left-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-yellow-500/5 to-orange-500/5 blur-2xl\"></div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9, y: 50 }}\n        animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9, y: isVisible ? 0 : 50 }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"w-full max-w-md relative z-10\"\n      >\n        <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-orange-500/20 shadow-2xl card-float\">\n          <CardHeader className=\"text-center relative\">\n            <motion.button\n              className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-all duration-300 hover:scale-110 z-10\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-close\"\n              whileHover={{ rotate: 90 }}\n              whileTap={{ scale: 0.9 }}\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </motion.button>\n\n            <motion.div \n              className=\"flex justify-center mb-4\"\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.5 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <motion.div \n                className=\"rounded-full bg-gradient-to-r from-orange-500 to-red-500 p-3 shadow-lg\"\n                animate={{ \n                  boxShadow: [\n                    \"0 0 20px hsl(20, 100%, 50%, 0.3)\",\n                    \"0 0 30px hsl(20, 100%, 50%, 0.5)\",\n                    \"0 0 20px hsl(20, 100%, 50%, 0.3)\"\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              >\n                <svg className=\"h-8 w-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z\" />\n                </svg>\n              </motion.div>\n            </motion.div>\n            \n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent\">\n                Reset Password\n              </CardTitle>\n              <CardDescription className=\"text-gray-400 mt-2\">\n                Enter your email address and we'll send you a reset code\n              </CardDescription>\n            </motion.div>\n          </CardHeader>\n          \n          <CardContent>\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n            >\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                    transition={{ duration: 0.6, delay: 0.8 }}\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300 font-medium\">Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter your email address\"\n                              {...field}\n                              className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-orange-500/50 input-focus-glow transition-all duration-300\"\n                              data-testid=\"input-email\"\n                            />\n                          </FormControl>\n                          <FormMessage className=\"text-red-400\" />\n                        </FormItem>\n                      )}\n                    />\n                  </motion.div>\n\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n                    transition={{ duration: 0.6, delay: 1 }}\n                  >\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:opacity-90 transition-all duration-300 button-hover-lift font-medium py-3 text-lg\"\n                      disabled={isSubmitting}\n                      data-testid=\"button-send-reset\"\n                    >\n                      {isSubmitting ? (\n                        <motion.div \n                          className=\"flex items-center justify-center space-x-2\"\n                          animate={{ opacity: [1, 0.5, 1] }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        >\n                          <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                          <span>Sending Reset Code...</span>\n                        </motion.div>\n                      ) : (\n                        <>\n                          <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                          </svg>\n                          Send Reset Code\n                        </>\n                      )}\n                    </Button>\n                  </motion.div>\n                </form>\n              </Form>\n            </motion.div>\n            \n            <motion.div \n              className=\"mt-6 text-center\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: isVisible ? 1 : 0 }}\n              transition={{ duration: 0.6, delay: 1.2 }}\n            >\n              <Button\n                variant=\"link\"\n                className=\"text-gray-400 hover:text-white transition-all duration-300 hover:scale-105\"\n                onClick={() => setLocation(\"/login\")}\n                data-testid=\"link-back-to-login\"\n              >\n                <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                </svg>\n                Back to Login\n              </Button>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":9954},"client/src/pages/auth/login.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRecaptcha } from \"@/hooks/use-recaptcha\";\nimport { motion } from \"framer-motion\";\nimport BrandLogo from \"@/components/ui/brand-logo\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const { isEnabled: recaptchaEnabled, siteKey } = useRecaptcha();\n  const recaptchaRef = useRef<ReCAPTCHA>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const [recaptchaCompleted, setRecaptchaCompleted] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      let recaptchaToken = \"\";\n      \n      if (recaptchaEnabled && recaptchaRef.current) {\n        recaptchaToken = recaptchaRef.current.getValue() || \"\";\n        if (!recaptchaToken) {\n          toast({\n            title: \"reCAPTCHA Required\",\n            description: \"Please complete the reCAPTCHA verification.\",\n            variant: \"destructive\",\n          });\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      await login(formData.email, formData.password, recaptchaToken);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n        duration: 3000, // Show for 3 seconds only\n      });\n      setLocation(\"/dashboard\");\n    } catch (error) {\n      if (recaptchaRef.current) {\n        recaptchaRef.current.reset();\n      }\n      \n      toast({\n        title: \"Login failed\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen hero-3d-bg flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Floating Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-crypto-blue/10 to-transparent blur-xl\"></div>\n        <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-crypto-green/10 to-transparent blur-lg\"></div>\n        <div className=\"floating-3d absolute bottom-20 left-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-blue-500/5 to-purple-500/5 blur-2xl\"></div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9, y: 50 }}\n        animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9, y: isVisible ? 0 : 50 }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"w-full max-w-md relative z-10\"\n      >\n        <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-crypto-blue/20 shadow-2xl card-float\">\n          <CardHeader className=\"relative\">\n            <motion.button\n              className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-all duration-300 hover:scale-110 z-10\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-close\"\n              whileHover={{ rotate: 90 }}\n              whileTap={{ scale: 0.9 }}\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </motion.button>\n            \n            <motion.div \n              className=\"text-center\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <div className=\"flex items-center justify-center mb-4\">\n                <motion.div\n                  animate={{ \n                    boxShadow: [\n                      \"0 0 20px hsl(217, 91%, 60%, 0.3)\",\n                      \"0 0 30px hsl(217, 91%, 60%, 0.5)\",\n                      \"0 0 20px hsl(217, 91%, 60%, 0.3)\"\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <BrandLogo size=\"md\" showText={false} />\n                </motion.div>\n              </div>\n              <motion.h2 \n                className=\"text-3xl font-bold text-white mb-2\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                transition={{ duration: 0.6, delay: 0.4 }}\n              >\n                Welcome Back\n              </motion.h2>\n              <motion.p \n                className=\"text-gray-400\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 0.6 }}\n              >\n                Sign in to your TradePilot account\n              </motion.p>\n            </motion.div>\n          </CardHeader>\n          \n          <CardContent>\n            <motion.form \n              onSubmit={handleSubmit} \n              className=\"space-y-6\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n              transition={{ duration: 0.8, delay: 0.8 }}\n            >\n              <motion.div\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                transition={{ duration: 0.6, delay: 1 }}\n              >\n                <Label className=\"text-gray-300 font-medium\">Email</Label>\n                <Input\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-crypto-blue/50 input-focus-glow transition-all duration-300 mt-2\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </motion.div>\n              \n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 1.2 }}\n              >\n                <Label className=\"text-gray-300 font-medium\">Password</Label>\n                <Input\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-crypto-blue/50 input-focus-glow transition-all duration-300 mt-2\"\n                  required\n                  data-testid=\"input-password\"\n                />\n              </motion.div>\n              \n              {recaptchaEnabled && siteKey && (\n                <motion.div \n                  className=\"flex flex-col items-center space-y-2\"\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n                  transition={{ duration: 0.6, delay: 1.4 }}\n                >\n                  <ReCAPTCHA\n                    ref={recaptchaRef}\n                    sitekey={siteKey}\n                    theme=\"dark\"\n                    onChange={(value) => {\n                      setRecaptchaCompleted(!!value);\n                    }}\n                    onExpired={() => setRecaptchaCompleted(false)}\n                    data-testid=\"recaptcha-login\"\n                  />\n                  {!recaptchaCompleted && (\n                    <p className=\"text-xs text-amber-400 text-center\">\n                      Please complete the reCAPTCHA to enable login\n                    </p>\n                  )}\n                </motion.div>\n              )}\n              \n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 1.6 }}\n              >\n                <Button \n                  type=\"submit\" \n                  className={`w-full transition-all duration-300 button-hover-lift font-medium py-3 text-lg ${\n                    (recaptchaEnabled && !recaptchaCompleted) || isLoading\n                      ? \"bg-gray-600 cursor-not-allowed opacity-50\" \n                      : \"crypto-gradient hover:opacity-90\"\n                  }`}\n                  disabled={isLoading || (recaptchaEnabled && !recaptchaCompleted)}\n                  data-testid=\"button-signin\"\n                >\n                  {isLoading ? (\n                    <motion.div \n                      className=\"flex items-center justify-center space-x-2\"\n                      animate={{ opacity: [1, 0.5, 1] }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <span>Signing in...</span>\n                      <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                    </motion.div>\n                  ) : (\n                    \"Sign In →\"\n                  )}\n                </Button>\n              </motion.div>\n            </motion.form>\n            \n            <motion.div \n              className=\"mt-6 text-center space-y-4\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: isVisible ? 1 : 0 }}\n              transition={{ duration: 0.6, delay: 1.8 }}\n            >\n              <Button\n                variant=\"link\"\n                className=\"text-orange-400 hover:text-orange-300 hover:underline p-0 transition-all duration-300 hover:scale-105\"\n                onClick={() => setLocation(\"/auth/forgot-password\")}\n                data-testid=\"link-forgot-password\"\n              >\n                Forgot Password?\n              </Button>\n              \n              <p className=\"text-gray-400\">\n                Don't have an account?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"text-crypto-blue hover:text-crypto-green hover:underline p-0 transition-all duration-300\"\n                  onClick={() => setLocation(\"/register\")}\n                  data-testid=\"link-signup\"\n                >\n                  Sign up\n                </Button>\n              </p>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":11412},"client/src/pages/auth/register.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRecaptcha } from \"@/hooks/use-recaptcha\";\nimport { motion } from \"framer-motion\";\nimport BrandLogo from \"@/components/ui/brand-logo\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const { isEnabled: recaptchaEnabled, siteKey } = useRecaptcha();\n  const recaptchaRef = useRef<ReCAPTCHA>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [referralCode, setReferralCode] = useState(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n  const [recaptchaCompleted, setRecaptchaCompleted] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    country: \"\",\n  });\n\n  useEffect(() => {\n    setIsVisible(true);\n    const urlParams = new URLSearchParams(window.location.search);\n    const refCode = urlParams.get(\"ref\");\n    if (refCode) {\n      setReferralCode(refCode);\n    }\n\n    // Auto-detect country based on IP\n    const detectCountry = async () => {\n      try {\n        const response = await fetch('/api/detect-country');\n        if (response.ok) {\n          const data = await response.json();\n          setFormData(prev => ({ ...prev, country: data.country || \"\" }));\n        }\n      } catch (error) {\n        console.log('Country detection failed:', error);\n      }\n    };\n    \n    detectCountry();\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      let recaptchaToken = \"\";\n      \n      if (recaptchaEnabled && recaptchaRef.current) {\n        recaptchaToken = recaptchaRef.current.getValue() || \"\";\n        if (!recaptchaToken) {\n          toast({\n            title: \"reCAPTCHA Required\",\n            description: \"Please complete the reCAPTCHA verification.\",\n            variant: \"destructive\",\n          });\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      const result = await register({\n        ...formData,\n        referralCode: referralCode || undefined,\n        recaptchaToken,\n      });\n      \n      toast({\n        title: \"Registration Successful!\",\n        description: \"Please check your email for a verification code to activate your account.\",\n        variant: \"default\",\n      });\n      \n      setLocation(`/auth/verify?email=${encodeURIComponent(formData.email)}`);\n    } catch (error) {\n      if (recaptchaRef.current) {\n        recaptchaRef.current.reset();\n      }\n      \n      toast({\n        title: \"Registration failed\",\n        description: error instanceof Error ? error.message : \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen hero-3d-bg flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Floating Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-crypto-green/10 to-transparent blur-xl\"></div>\n        <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-crypto-blue/10 to-transparent blur-lg\"></div>\n        <div className=\"floating-3d absolute bottom-20 right-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-purple-500/5 to-blue-500/5 blur-2xl\"></div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9, y: 50 }}\n        animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9, y: isVisible ? 0 : 50 }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"w-full max-w-lg relative z-10\"\n      >\n        <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-crypto-green/20 shadow-2xl card-float\">\n          <CardHeader className=\"relative pb-0\">\n            <motion.button\n              className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-all duration-300 hover:scale-110 z-10\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-close\"\n              whileHover={{ rotate: 90 }}\n              whileTap={{ scale: 0.9 }}\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </motion.button>\n            \n            <motion.div \n              className=\"text-center pt-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <div className=\"flex items-center justify-center mb-4\">\n                <motion.div\n                  animate={{ \n                    boxShadow: [\n                      \"0 0 20px hsl(160, 84%, 39%, 0.3)\",\n                      \"0 0 30px hsl(160, 84%, 39%, 0.5)\",\n                      \"0 0 20px hsl(160, 84%, 39%, 0.3)\"\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <BrandLogo size=\"md\" showText={false} />\n                </motion.div>\n              </div>\n              <motion.h2 \n                className=\"text-3xl font-bold text-white mb-2\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                transition={{ duration: 0.6, delay: 0.4 }}\n              >\n                Join TradePilot\n              </motion.h2>\n              <motion.p \n                className=\"text-gray-400\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 0.6 }}\n              >\n                Start your AI arbitrage trading journey\n              </motion.p>\n            </motion.div>\n            \n            {referralCode && (\n              <motion.div \n                className=\"mt-6 p-4 rounded-xl bg-gradient-to-r from-crypto-green/20 to-green-600/20 border border-crypto-green/30\"\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n                transition={{ duration: 0.6, delay: 0.8 }}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-5 h-5 text-crypto-green\">🎁</div>\n                  <div>\n                    <p className=\"text-crypto-green font-semibold text-sm\">Referral Bonus!</p>\n                    <p className=\"text-gray-300 text-xs\">You'll earn a bonus when you make your first deposit</p>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </CardHeader>\n          \n          <CardContent className=\"pt-6\">\n            <motion.form \n              onSubmit={handleSubmit} \n              className=\"space-y-5\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n              transition={{ duration: 0.8, delay: 1 }}\n            >\n              <motion.div\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                transition={{ duration: 0.6, delay: 1.2 }}\n              >\n                <Label className=\"text-gray-300 font-medium\">Username</Label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                  className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-crypto-green/50 input-focus-glow transition-all duration-300 mt-2\"\n                  required\n                  minLength={3}\n                  maxLength={20}\n                  data-testid=\"input-username\"\n                />\n              </motion.div>\n              \n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 1.4 }}\n              >\n                <Label className=\"text-gray-300 font-medium\">Email Address</Label>\n                <Input\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-crypto-green/50 input-focus-glow transition-all duration-300 mt-2\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </motion.div>\n              \n              <motion.div\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                transition={{ duration: 0.6, delay: 1.6 }}\n              >\n                <Label className=\"text-gray-300 font-medium\">Password</Label>\n                <Input\n                  type=\"password\"\n                  placeholder=\"Create a strong password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-crypto-green/50 input-focus-glow transition-all duration-300 mt-2\"\n                  required\n                  minLength={6}\n                  data-testid=\"input-password\"\n                />\n              </motion.div>\n              \n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 1.8 }}\n              >\n                <Label className=\"text-gray-300 font-medium\">Confirm Password</Label>\n                <Input\n                  type=\"password\"\n                  placeholder=\"Confirm your password\"\n                  value={formData.confirmPassword}\n                  onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\n                  className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-crypto-green/50 input-focus-glow transition-all duration-300 mt-2\"\n                  required\n                  minLength={6}\n                  data-testid=\"input-confirm-password\"\n                />\n              </motion.div>\n              \n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 2 }}\n              >\n                <Label className=\"text-gray-300 font-medium\">Referral Code (Optional)</Label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter referral code if you have one\"\n                  value={referralCode}\n                  onChange={(e) => setReferralCode(e.target.value)}\n                  className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-crypto-green/50 input-focus-glow transition-all duration-300 mt-2\"\n                  data-testid=\"input-referral\"\n                />\n                {referralCode && (\n                  <motion.p \n                    className=\"text-xs text-crypto-green mt-1 flex items-center\"\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <span className=\"w-3 h-3 mr-1\">✓</span>\n                    Referral code applied\n                  </motion.p>\n                )}\n              </motion.div>\n\n              {recaptchaEnabled && siteKey && (\n                <motion.div \n                  className=\"flex flex-col items-center space-y-2\"\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9 }}\n                  transition={{ duration: 0.6, delay: 2.2 }}\n                >\n                  <ReCAPTCHA\n                    ref={recaptchaRef}\n                    sitekey={siteKey}\n                    theme=\"dark\"\n                    onChange={(value) => {\n                      setRecaptchaCompleted(!!value);\n                    }}\n                    onExpired={() => setRecaptchaCompleted(false)}\n                    data-testid=\"recaptcha-register\"\n                  />\n                  {!recaptchaCompleted && (\n                    <p className=\"text-xs text-amber-400 text-center\">\n                      Please complete the reCAPTCHA to enable registration\n                    </p>\n                  )}\n                </motion.div>\n              )}\n\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n                transition={{ duration: 0.6, delay: 2.4 }}\n              >\n                <Button \n                  type=\"submit\" \n                  className={`w-full text-lg font-semibold py-6 rounded-xl transition-all duration-300 button-hover-lift ${\n                    (recaptchaEnabled && !recaptchaCompleted) || isLoading\n                      ? \"bg-gray-600 cursor-not-allowed opacity-50\" \n                      : \"crypto-gradient hover:opacity-90\"\n                  }`}\n                  disabled={isLoading || (recaptchaEnabled && !recaptchaCompleted)}\n                  data-testid=\"button-create-account\"\n                >\n                  {isLoading ? (\n                    <motion.div \n                      className=\"flex items-center justify-center space-x-2\"\n                      animate={{ opacity: [1, 0.5, 1] }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                      <span>Creating Account...</span>\n                    </motion.div>\n                  ) : (\n                    \"Create Account & Start Trading →\"\n                  )}\n                </Button>\n              </motion.div>\n            </motion.form>\n\n            <motion.div \n              className=\"mt-8 space-y-4\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: isVisible ? 1 : 0 }}\n              transition={{ duration: 0.6, delay: 2.6 }}\n            >\n              <motion.div \n                className=\"flex items-center space-x-4 p-4 rounded-xl bg-crypto-blue/10 border border-crypto-blue/20\"\n                whileHover={{ scale: 1.02, borderColor: \"hsl(217, 91%, 60%, 0.4)\" }}\n                transition={{ duration: 0.2 }}\n              >\n                <div className=\"w-5 h-5 text-crypto-blue\">👥</div>\n                <div>\n                  <p className=\"text-white text-sm font-medium\">Join 15,000+ Traders</p>\n                  <p className=\"text-gray-400 text-xs\">Earning passive income with AI arbitrage</p>\n                </div>\n              </motion.div>\n              \n              <div className=\"text-center\">\n                <p className=\"text-gray-400 text-sm\">\n                  Already have an account?{\" \"}\n                  <Button\n                    variant=\"link\"\n                    className=\"text-crypto-blue hover:text-crypto-green hover:underline p-0 font-semibold transition-all duration-300\"\n                    onClick={() => setLocation(\"/login\")}\n                    data-testid=\"link-signin\"\n                  >\n                    Sign in here\n                  </Button>\n                </p>\n              </div>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":17323},"client/src/pages/auth/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { resetPasswordSchema, type ResetPasswordData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const form = useForm<ResetPasswordData>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      email: \"\",\n      resetCode: \"\",\n      newPassword: \"\",\n    },\n  });\n\n  useEffect(() => {\n    setIsVisible(true);\n    const urlParams = new URLSearchParams(window.location.search);\n    const email = urlParams.get('email');\n    if (email) {\n      form.setValue('email', email);\n    }\n  }, [form]);\n\n  const onSubmit = async (data: ResetPasswordData) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/auth/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Password Reset Successful!\",\n          description: result.message,\n        });\n        setLocation(\"/auth/login\");\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Reset Failed\",\n          description: error.message || \"Please check your reset code and try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen hero-3d-bg flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Floating Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-purple-500/10 to-transparent blur-xl\"></div>\n        <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-blue-600/10 to-transparent blur-lg\"></div>\n        <div className=\"floating-3d absolute bottom-20 left-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-indigo-500/5 to-purple-500/5 blur-2xl\"></div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9, y: 50 }}\n        animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9, y: isVisible ? 0 : 50 }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"w-full max-w-md relative z-10\"\n      >\n        <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-purple-500/20 shadow-2xl card-float\">\n          <CardHeader className=\"text-center relative\">\n            <motion.button\n              className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-all duration-300 hover:scale-110 z-10\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-close\"\n              whileHover={{ rotate: 90 }}\n              whileTap={{ scale: 0.9 }}\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </motion.button>\n\n            <motion.div \n              className=\"flex justify-center mb-4\"\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.5 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <motion.div \n                className=\"rounded-full bg-gradient-to-r from-purple-500 to-indigo-500 p-3 shadow-lg\"\n                animate={{ \n                  boxShadow: [\n                    \"0 0 20px hsl(262, 83%, 58%, 0.3)\",\n                    \"0 0 30px hsl(262, 83%, 58%, 0.5)\",\n                    \"0 0 20px hsl(262, 83%, 58%, 0.3)\"\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              >\n                <svg className=\"h-8 w-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                </svg>\n              </motion.div>\n            </motion.div>\n            \n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent\">\n                Create New Password\n              </CardTitle>\n              <CardDescription className=\"text-gray-400 mt-2\">\n                Enter your reset code and create a new password\n              </CardDescription>\n            </motion.div>\n          </CardHeader>\n          \n          <CardContent>\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n            >\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                    transition={{ duration: 0.6, delay: 0.8 }}\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300 font-medium\">Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Your email address\"\n                              {...field}\n                              className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-purple-500/50 input-focus-glow transition-all duration-300\"\n                              data-testid=\"input-email\"\n                              readOnly\n                            />\n                          </FormControl>\n                          <FormMessage className=\"text-red-400\" />\n                        </FormItem>\n                      )}\n                    />\n                  </motion.div>\n\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n                    transition={{ duration: 0.6, delay: 1 }}\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"resetCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300 font-medium\">Reset Code</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter your 6-digit reset code\"\n                              {...field}\n                              className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-purple-500/50 input-focus-glow transition-all duration-300 text-center text-lg tracking-widest\"\n                              maxLength={6}\n                              data-testid=\"input-reset-code\"\n                            />\n                          </FormControl>\n                          <FormMessage className=\"text-red-400\" />\n                        </FormItem>\n                      )}\n                    />\n                  </motion.div>\n\n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                    transition={{ duration: 0.6, delay: 1.2 }}\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"newPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300 font-medium\">New Password</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"Create a strong new password\"\n                              {...field}\n                              className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-white placeholder-gray-400 focus:border-purple-500/50 input-focus-glow transition-all duration-300\"\n                              data-testid=\"input-new-password\"\n                            />\n                          </FormControl>\n                          <FormMessage className=\"text-red-400\" />\n                        </FormItem>\n                      )}\n                    />\n                  </motion.div>\n\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n                    transition={{ duration: 0.6, delay: 1.4 }}\n                  >\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-gradient-to-r from-purple-500 to-indigo-500 hover:opacity-90 transition-all duration-300 button-hover-lift font-medium py-3 text-lg\"\n                      disabled={isSubmitting}\n                      data-testid=\"button-reset-password\"\n                    >\n                      {isSubmitting ? (\n                        <motion.div \n                          className=\"flex items-center justify-center space-x-2\"\n                          animate={{ opacity: [1, 0.5, 1] }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        >\n                          <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                          <span>Resetting Password...</span>\n                        </motion.div>\n                      ) : (\n                        <>\n                          <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z\" />\n                          </svg>\n                          Reset Password\n                        </>\n                      )}\n                    </Button>\n                  </motion.div>\n                </form>\n              </Form>\n            </motion.div>\n            \n            <motion.div \n              className=\"mt-6 text-center\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: isVisible ? 1 : 0 }}\n              transition={{ duration: 0.6, delay: 1.6 }}\n            >\n              <Button\n                variant=\"link\"\n                className=\"text-gray-400 hover:text-white transition-all duration-300 hover:scale-105\"\n                onClick={() => setLocation(\"/login\")}\n                data-testid=\"link-back-to-login\"\n              >\n                <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                </svg>\n                Back to Login\n              </Button>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":12826},"client/src/pages/auth/verify-account.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { verifyAccountSchema, type VerifyAccountData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nexport default function VerifyAccount() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isResending, setIsResending] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const form = useForm<VerifyAccountData>({\n    resolver: zodResolver(verifyAccountSchema),\n    defaultValues: {\n      email: \"\",\n      verificationCode: \"\",\n    },\n  });\n\n  useEffect(() => {\n    setIsVisible(true);\n    const urlParams = new URLSearchParams(window.location.search);\n    const email = urlParams.get('email');\n    if (email) {\n      form.setValue('email', email);\n    }\n  }, [form]);\n\n  const onSubmit = async (data: VerifyAccountData) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/auth/verify\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Account Verified!\",\n          description: result.message + \" You can now log in to your account.\",\n        });\n        setLocation(\"/auth/login\");\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Verification Failed\",\n          description: error.message || \"Please check your verification code and try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const resendCode = async () => {\n    setIsResending(true);\n    try {\n      const email = form.getValues('email');\n      const response = await fetch(\"/api/auth/resend-verification\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Code Resent!\",\n          description: \"A new verification code has been sent to your email.\",\n        });\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to resend verification code.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen hero-3d-bg flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Floating Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"floating-3d absolute top-20 left-10 w-32 h-32 rounded-full bg-gradient-to-r from-green-500/10 to-transparent blur-xl\"></div>\n        <div className=\"floating-3d-alt absolute top-40 right-20 w-24 h-24 rounded-full bg-gradient-to-r from-blue-500/10 to-transparent blur-lg\"></div>\n        <div className=\"floating-3d absolute bottom-20 right-1/4 w-40 h-40 rounded-full bg-gradient-to-r from-emerald-500/5 to-teal-500/5 blur-2xl\"></div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9, y: 50 }}\n        animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.9, y: isVisible ? 0 : 50 }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"w-full max-w-md relative z-10\"\n      >\n        <Card className=\"bg-crypto-card/90 backdrop-blur-xl border border-green-500/20 shadow-2xl card-float\">\n          <CardHeader className=\"text-center relative\">\n            <motion.button\n              className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-all duration-300 hover:scale-110 z-10\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-close\"\n              whileHover={{ rotate: 90 }}\n              whileTap={{ scale: 0.9 }}\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </motion.button>\n\n            <motion.div \n              className=\"flex justify-center mb-4\"\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: isVisible ? 1 : 0, scale: isVisible ? 1 : 0.5 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <motion.div \n                className=\"rounded-full bg-gradient-to-r from-green-500 to-emerald-500 p-3 shadow-lg\"\n                animate={{ \n                  boxShadow: [\n                    \"0 0 20px hsl(160, 84%, 39%, 0.3)\",\n                    \"0 0 30px hsl(160, 84%, 39%, 0.5)\",\n                    \"0 0 20px hsl(160, 84%, 39%, 0.3)\"\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              >\n                <svg className=\"h-8 w-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </motion.div>\n            </motion.div>\n            \n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\">\n                Verify Account\n              </CardTitle>\n              <CardDescription className=\"text-gray-400 mt-2\">\n                Enter the verification code sent to your email\n              </CardDescription>\n            </motion.div>\n          </CardHeader>\n          \n          <CardContent>\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 30 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n            >\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : -20 }}\n                    transition={{ duration: 0.6, delay: 0.8 }}\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300 font-medium\">Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Your email address\"\n                              {...field}\n                              className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-green-500/50 input-focus-glow transition-all duration-300\"\n                              data-testid=\"input-email\"\n                              readOnly\n                            />\n                          </FormControl>\n                          <FormMessage className=\"text-red-400\" />\n                        </FormItem>\n                      )}\n                    />\n                  </motion.div>\n\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, x: isVisible ? 0 : 20 }}\n                    transition={{ duration: 0.6, delay: 1 }}\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"verificationCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300 font-medium\">Verification Code</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter your 5-digit code\"\n                              {...field}\n                              className=\"bg-crypto-dark/50 backdrop-blur-sm border-gray-600/50 text-black placeholder-gray-400 focus:border-green-500/50 input-focus-glow transition-all duration-300 text-center text-2xl tracking-widest\"\n                              maxLength={5}\n                              data-testid=\"input-verification-code\"\n                            />\n                          </FormControl>\n                          <FormMessage className=\"text-red-400\" />\n                        </FormItem>\n                      )}\n                    />\n                  </motion.div>\n\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n                    transition={{ duration: 0.6, delay: 1.2 }}\n                  >\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:opacity-90 transition-all duration-300 button-hover-lift font-medium py-3 text-lg\"\n                      disabled={isSubmitting}\n                      data-testid=\"button-verify\"\n                    >\n                      {isSubmitting ? (\n                        <motion.div \n                          className=\"flex items-center justify-center space-x-2\"\n                          animate={{ opacity: [1, 0.5, 1] }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        >\n                          <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                          <span>Verifying...</span>\n                        </motion.div>\n                      ) : (\n                        <>\n                          <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                          </svg>\n                          Verify Account\n                        </>\n                      )}\n                    </Button>\n                  </motion.div>\n                </form>\n              </Form>\n            </motion.div>\n            \n            <motion.div \n              className=\"mt-6 text-center space-y-4\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: isVisible ? 1 : 0 }}\n              transition={{ duration: 0.6, delay: 1.4 }}\n            >\n              <Button\n                variant=\"link\"\n                className=\"text-gray-400 hover:text-green-400 transition-all duration-300 hover:scale-105\"\n                onClick={resendCode}\n                disabled={isResending}\n                data-testid=\"button-resend-code\"\n              >\n                {isResending ? (\n                  <motion.div \n                    className=\"flex items-center space-x-2\"\n                    animate={{ opacity: [1, 0.5, 1] }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  >\n                    <div className=\"w-4 h-4 border-2 border-gray-400/30 border-t-gray-400 rounded-full animate-spin\"></div>\n                    <span>Resending...</span>\n                  </motion.div>\n                ) : (\n                  <>\n                    <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                    </svg>\n                    Resend Code\n                  </>\n                )}\n              </Button>\n              \n              <div>\n                <Button\n                  variant=\"link\"\n                  className=\"text-gray-400 hover:text-white transition-all duration-300 hover:scale-105\"\n                  onClick={() => setLocation(\"/login\")}\n                  data-testid=\"link-back-to-login\"\n                >\n                  <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                  </svg>\n                  Back to Login\n                </Button>\n              </div>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":13723},"client/public/sw.js":{"content":"// Service Worker for TradePilot AI PWA\nconst CACHE_NAME = 'tradepilot-ai-v1.0.0';\nconst urlsToCache = [\n  '/',\n  '/dashboard',\n  '/plans',\n  '/deposit',\n  '/withdraw',\n  '/uploads/logos/infinity-crypto-ai-logo.png',\n  '/manifest.json'\n];\n\n// Install event - cache resources\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n      .catch(error => {\n        console.error('Cache install failed:', error);\n      })\n  );\n});\n\n// Fetch event - serve cached content when offline\nself.addEventListener('fetch', event => {\n  // Skip non-GET requests and chrome-extension requests\n  if (event.request.method !== 'GET' || event.request.url.includes('chrome-extension')) {\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        \n        return fetch(event.request).then(fetchResponse => {\n          // Don't cache API calls or external resources\n          if (!fetchResponse || fetchResponse.status !== 200 || fetchResponse.type !== 'basic') {\n            return fetchResponse;\n          }\n\n          // Clone the response for caching\n          const responseToCache = fetchResponse.clone();\n          \n          caches.open(CACHE_NAME).then(cache => {\n            cache.put(event.request, responseToCache);\n          });\n\n          return fetchResponse;\n        }).catch(() => {\n          // Return offline page for navigation requests\n          if (event.request.destination === 'document') {\n            return caches.match('/');\n          }\n        });\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Handle PWA install prompt\nlet deferredPrompt = null;\n\nself.addEventListener('beforeinstallprompt', event => {\n  event.preventDefault();\n  deferredPrompt = event;\n});\n\n// Background sync for offline data\nself.addEventListener('sync', event => {\n  if (event.tag === 'background-sync') {\n    console.log('Background sync triggered');\n    // Add your background sync logic here\n  }\n});\n\n// Push notification handler\nself.addEventListener('push', event => {\n  const options = {\n    body: event.data ? event.data.text() : 'New trading opportunity available!',\n    icon: '/uploads/logos/infinity-crypto-ai-logo.png',\n    badge: '/uploads/logos/infinity-crypto-ai-logo.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'View Dashboard',\n        icon: '/uploads/logos/infinity-crypto-ai-logo.png'\n      },\n      {\n        action: 'close',\n        title: 'Close',\n        icon: '/uploads/logos/infinity-crypto-ai-logo.png'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('TradePilot AI', options)\n  );\n});\n\n// Handle notification click\nself.addEventListener('notificationclick', event => {\n  event.notification.close();\n\n  if (event.action === 'explore') {\n    event.waitUntil(\n      clients.openWindow('/dashboard')\n    );\n  }\n});","size_bytes":3561},"client/src/hooks/use-pwa-install.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: ReadonlyArray<string>;\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\ninterface PWAInstallState {\n  isInstallable: boolean;\n  isInstalled: boolean;\n  isIOS: boolean;\n  isStandalone: boolean;\n  installPrompt: BeforeInstallPromptEvent | null;\n  install: () => Promise<void>;\n  isInstallSupported: boolean;\n}\n\nexport function usePWAInstall(): PWAInstallState {\n  const [installPrompt, setInstallPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  // Detect if running as PWA\n  const isStandalone = window.matchMedia('(display-mode: standalone)').matches \n    || (window.navigator as any).standalone \n    || document.referrer.includes('android-app://');\n\n  // Detect iOS\n  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  // Check if install is supported - make it more permissive\n  const isInstallSupported = 'serviceWorker' in navigator;\n\n  useEffect(() => {\n    // Listen for the beforeinstallprompt event\n    const handleBeforeInstallPrompt = (event: Event) => {\n      event.preventDefault();\n      setInstallPrompt(event as BeforeInstallPromptEvent);\n    };\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setInstallPrompt(null);\n    };\n\n    // Check if already installed\n    setIsInstalled(isStandalone);\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    // Register service worker\n    if (isInstallSupported) {\n      navigator.serviceWorker.register('/sw.js')\n        .then(registration => {\n          console.log('Service Worker registered successfully:', registration);\n        })\n        .catch(error => {\n          console.log('Service Worker registration failed:', error);\n        });\n    }\n\n    // Debug logging\n    console.log('PWA Install Hook State:', {\n      isStandalone,\n      isIOS,\n      isInstallSupported,\n      hasInstallPrompt: !!installPrompt\n    });\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, [isStandalone, isInstallSupported]);\n\n  const install = async () => {\n    if (!installPrompt) return;\n\n    try {\n      await installPrompt.prompt();\n      const choiceResult = await installPrompt.userChoice;\n      \n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted PWA install');\n        setIsInstalled(true);\n      } else {\n        console.log('User dismissed PWA install');\n      }\n      \n      setInstallPrompt(null);\n    } catch (error) {\n      console.error('Error during PWA installation:', error);\n    }\n  };\n\n  return {\n    isInstallable: !!installPrompt && !isInstalled,\n    isInstalled,\n    isIOS,\n    isStandalone,\n    installPrompt,\n    install,\n    isInstallSupported\n  };\n}","size_bytes":3127},"client/src/components/ui/pwa-install-button.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { usePWAInstall } from \"@/hooks/use-pwa-install\";\nimport { Download, Smartphone, Share } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\n\ninterface PWAInstallButtonProps {\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: \"default\" | \"sm\" | \"lg\";\n  className?: string;\n  showText?: boolean;\n}\n\nexport default function PWAInstallButton({ \n  variant = \"default\", \n  size = \"default\",\n  className = \"\",\n  showText = true\n}: PWAInstallButtonProps) {\n  const [showIOSInstructions, setShowIOSInstructions] = useState(false);\n  const { \n    isInstallable, \n    isInstalled, \n    isIOS, \n    isStandalone,\n    install,\n    isInstallSupported \n  } = usePWAInstall();\n\n  // Don't show the button if already installed/running as PWA\n  if (isInstalled || isStandalone) {\n    return null;\n  }\n\n  const handleInstall = async () => {\n    console.log('PWA Install clicked', { isIOS, isInstallable, isInstallSupported });\n    if (isIOS) {\n      setShowIOSInstructions(true);\n    } else if (isInstallable) {\n      await install();\n    } else {\n      // Fallback for browsers that don't support beforeinstallprompt\n      setShowIOSInstructions(true); // Show instructions as fallback\n    }\n  };\n\n  const buttonContent = (\n    <>\n      <motion.div\n        animate={{ scale: [1, 1.1, 1] }}\n        transition={{ duration: 2, repeat: Infinity }}\n      >\n        <Download className=\"w-4 h-4\" />\n      </motion.div>\n      {showText && <span className=\"ml-2\">Download App</span>}\n    </>\n  );\n\n  if (isIOS) {\n    return (\n      <Dialog open={showIOSInstructions} onOpenChange={setShowIOSInstructions}>\n        <DialogTrigger asChild>\n          <Button\n            variant={variant}\n            size={size}\n            className={`${className} crypto-gradient hover:opacity-90 text-white border-0`}\n            onClick={handleInstall}\n          >\n            {buttonContent}\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"bg-crypto-card border-crypto-blue/20\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white flex items-center gap-2\">\n              <Smartphone className=\"w-5 h-5 text-crypto-blue\" />\n              Install TradePilot AI\n            </DialogTitle>\n            <DialogDescription className=\"text-gray-300 space-y-4\">\n              <p>To install TradePilot AI as an app:</p>\n              {isIOS ? (\n                <div className=\"space-y-3 text-left\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-6 h-6 rounded-full bg-crypto-blue flex items-center justify-center text-white text-sm font-bold\">1</div>\n                    <div>\n                      <p className=\"font-medium text-white\">Open Safari Menu</p>\n                      <p className=\"text-sm\">Tap the <Share className=\"w-4 h-4 inline\" /> share button at the bottom of Safari</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-6 h-6 rounded-full bg-crypto-blue flex items-center justify-center text-white text-sm font-bold\">2</div>\n                    <div>\n                      <p className=\"font-medium text-white\">Add to Home Screen</p>\n                      <p className=\"text-sm\">Scroll down and tap \"Add to Home Screen\"</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-6 h-6 rounded-full bg-crypto-blue flex items-center justify-center text-white text-sm font-bold\">3</div>\n                    <div>\n                      <p className=\"font-medium text-white\">Confirm Installation</p>\n                      <p className=\"text-sm\">Tap \"Add\" to install TradePilot AI as an app</p>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-3 text-left\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-6 h-6 rounded-full bg-crypto-blue flex items-center justify-center text-white text-sm font-bold\">1</div>\n                    <div>\n                      <p className=\"font-medium text-white\">Look for Install Option</p>\n                      <p className=\"text-sm\">Check your browser's address bar or menu for an \"Install\" or \"Add to Home Screen\" option</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-6 h-6 rounded-full bg-crypto-blue flex items-center justify-center text-white text-sm font-bold\">2</div>\n                    <div>\n                      <p className=\"font-medium text-white\">Chrome/Edge Users</p>\n                      <p className=\"text-sm\">Look for a small install icon in the address bar, or go to browser menu → \"Install TradePilot AI\"</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-6 h-6 rounded-full bg-crypto-blue flex items-center justify-center text-white text-sm font-bold\">3</div>\n                    <div>\n                      <p className=\"font-medium text-white\">Alternative Method</p>\n                      <p className=\"text-sm\">You can also bookmark this page for quick access to TradePilot AI</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div className=\"p-3 bg-crypto-blue/10 rounded-lg border border-crypto-blue/20\">\n                <p className=\"text-sm text-crypto-blue\">\n                  💡 Once installed, you'll have quick access to your trading platform from your home screen!\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Button\n      variant={variant}\n      size={size}\n      className={`${className} crypto-gradient hover:opacity-90 text-white border-0`}\n      onClick={handleInstall}\n      disabled={false} // Always enable the button\n    >\n      {buttonContent}\n    </Button>\n  );\n}","size_bytes":6377},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool\n[x] 5. Fixed daily profit distribution system to work at 1:00 AM user timezone\n[x] 6. Added timezone-based processing every 15 minutes to catch all users\n[x] 7. Added daily profit tracking to prevent duplicate payments\n[x] 8. Implemented admin-configurable welcome message feature","size_bytes":579},"server/services/callmebot-service.ts":{"content":"import { storage } from \"../storage\";\n\nexport interface CallMeBotSettings {\n  enabled: boolean;\n  admin_whatsapp_number: string;\n  api_key: string;\n  notifications: {\n    new_registration: boolean;\n    user_login: boolean;\n    support_ticket: boolean;\n    withdrawal_request: boolean;\n    system_activity: boolean;\n  };\n}\n\nexport class CallMeBotService {\n  static async getSettings(): Promise<CallMeBotSettings> {\n    try {\n      const settings = await storage.getSystemSettings();\n      return settings.callmebot || {\n        enabled: false,\n        admin_whatsapp_number: '',\n        api_key: '',\n        notifications: {\n          new_registration: true,\n          user_login: false,\n          support_ticket: true,\n          withdrawal_request: true,\n          system_activity: true,\n        }\n      };\n    } catch (error) {\n      console.error('Failed to get CallMeBot settings:', error);\n      return {\n        enabled: false,\n        admin_whatsapp_number: '',\n        api_key: '',\n        notifications: {\n          new_registration: true,\n          user_login: false,\n          support_ticket: true,\n          withdrawal_request: true,\n          system_activity: true,\n        }\n      };\n    }\n  }\n\n  static async updateSettings(settings: CallMeBotSettings): Promise<void> {\n    try {\n      // Use proper deep merge through the storage interface\n      await storage.updateSystemSettings({\n        callmebot: settings\n      });\n    } catch (error) {\n      console.error('Failed to update CallMeBot settings:', error);\n      throw new Error('Failed to update CallMeBot settings');\n    }\n  }\n\n  static async sendNotification(message: string, notificationType: keyof CallMeBotSettings['notifications']): Promise<boolean> {\n    try {\n      const settings = await this.getSettings();\n      \n      if (!settings.enabled || !settings.notifications[notificationType]) {\n        return false; // Notification disabled\n      }\n\n      if (!settings.admin_whatsapp_number || !settings.api_key) {\n        console.warn('CallMeBot not configured properly');\n        return false;\n      }\n\n      // CallMeBot WhatsApp API endpoint\n      const url = 'https://api.callmebot.com/whatsapp.php';\n      const params = new URLSearchParams({\n        phone: settings.admin_whatsapp_number,\n        text: message,\n        apikey: settings.api_key\n      });\n\n      const response = await fetch(`${url}?${params}`, {\n        method: 'GET',\n        headers: {\n          'User-Agent': 'TradePilot-Notifications/1.0'\n        }\n      });\n\n      if (response.ok) {\n        console.log(`CallMeBot notification sent successfully: ${notificationType}`);\n        return true;\n      } else {\n        console.error(`CallMeBot API error: ${response.status} ${response.statusText}`);\n        return false;\n      }\n    } catch (error) {\n      console.error('Failed to send CallMeBot notification:', error);\n      return false;\n    }\n  }\n\n  static async sendNewRegistrationNotification(username: string, country: string): Promise<boolean> {\n    const message = `🎉 *New User Registration*\\n\\n` +\n                   `👤 Username: ${username}\\n` +\n                   `🌍 Country: ${country}\\n` +\n                   `📅 Time: ${new Date().toLocaleString()}\\n\\n` +\n                   `Welcome to TradePilot! 🚀`;\n    \n    return await this.sendNotification(message, 'new_registration');\n  }\n\n  static async sendUserLoginNotification(username: string, country: string): Promise<boolean> {\n    const message = `🔐 *User Login*\\n\\n` +\n                   `👤 Username: ${username}\\n` +\n                   `🌍 Country: ${country}\\n` +\n                   `📅 Time: ${new Date().toLocaleString()}`;\n    \n    return await this.sendNotification(message, 'user_login');\n  }\n\n  static async sendSupportTicketNotification(username: string, subject: string, priority: string): Promise<boolean> {\n    const message = `🎫 *New Support Ticket*\\n\\n` +\n                   `👤 User: ${username}\\n` +\n                   `📝 Subject: ${subject}\\n` +\n                   `⚡ Priority: ${priority}\\n` +\n                   `📅 Time: ${new Date().toLocaleString()}\\n\\n` +\n                   `Please check the admin panel for details.`;\n    \n    return await this.sendNotification(message, 'support_ticket');\n  }\n\n  static async sendWithdrawalRequestNotification(username: string, amount: number, cryptocurrency: string, walletAddress: string): Promise<boolean> {\n    const message = `💰 *New Withdrawal Request*\\n\\n` +\n                   `👤 User: ${username}\\n` +\n                   `💵 Amount: $${amount.toLocaleString()}\\n` +\n                   `💎 Currency: ${cryptocurrency}\\n` +\n                   `🏦 Wallet: ${walletAddress.substring(0, 8)}...${walletAddress.substring(walletAddress.length - 8)}\\n` +\n                   `📅 Time: ${new Date().toLocaleString()}\\n\\n` +\n                   `Please review in the admin panel.`;\n    \n    return await this.sendNotification(message, 'withdrawal_request');\n  }\n\n  static async sendSystemActivityNotification(activity: string, details?: string): Promise<boolean> {\n    const message = `⚙️ *System Activity*\\n\\n` +\n                   `🔔 Activity: ${activity}\\n` +\n                   `${details ? `📋 Details: ${details}\\n` : ''}` +\n                   `📅 Time: ${new Date().toLocaleString()}`;\n    \n    return await this.sendNotification(message, 'system_activity');\n  }\n}","size_bytes":5406},"client/src/components/admin/CallMeBotSettings.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MessageSquare, Phone, Key, RefreshCw } from \"lucide-react\";\n\ninterface CallMeBotSettings {\n  enabled: boolean;\n  admin_whatsapp_number: string;\n  api_key: string;\n  notifications: {\n    new_registration: boolean;\n    user_login: boolean;\n    support_ticket: boolean;\n    withdrawal_request: boolean;\n    system_activity: boolean;\n  };\n}\n\nconst fetchWithAuth = async (endpoint: string, options: RequestInit = {}) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`/api${endpoint}`, {\n    ...options,\n    headers: {\n      ...options.headers,\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Request failed\");\n  }\n\n  return response.json();\n};\n\nexport default function CallMeBotSettings() {\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [settings, setSettings] = useState<CallMeBotSettings>({\n    enabled: false,\n    admin_whatsapp_number: '',\n    api_key: '',\n    notifications: {\n      new_registration: true,\n      user_login: false,\n      support_ticket: true,\n      withdrawal_request: true,\n      system_activity: true,\n    }\n  });\n\n  // Load settings on component mount\n  useEffect(() => {\n    const loadSettings = async () => {\n      try {\n        const data = await fetchWithAuth(\"/admin/callmebot-settings\");\n        setSettings(data);\n      } catch (error) {\n        console.error(\"Failed to load CallMeBot settings:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load CallMeBot settings\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadSettings();\n  }, [toast]);\n\n  const handleSaveSettings = async () => {\n    setSaving(true);\n    try {\n      await fetchWithAuth(\"/admin/callmebot-settings\", {\n        method: \"PATCH\",\n        body: JSON.stringify(settings),\n      });\n\n      toast({\n        title: \"Settings Saved\",\n        description: \"CallMeBot notification settings have been updated successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Save Failed\",\n        description: error instanceof Error ? error.message : \"Failed to save settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof CallMeBotSettings, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleNotificationChange = (notificationType: keyof CallMeBotSettings['notifications'], enabled: boolean) => {\n    setSettings(prev => ({\n      ...prev,\n      notifications: {\n        ...prev.notifications,\n        [notificationType]: enabled\n      }\n    }));\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"bg-crypto-card border-gray-700\">\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <RefreshCw className=\"w-6 h-6 animate-spin text-crypto-blue\" />\n          <span className=\"ml-2 text-gray-400\">Loading settings...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold text-white\">CallMeBot WhatsApp Notifications</h3>\n        <Button \n          onClick={handleSaveSettings}\n          disabled={saving}\n          className=\"bg-crypto-blue hover:bg-blue-600\"\n        >\n          {saving ? (\n            <>\n              <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            'Save Settings'\n          )}\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Configuration Settings */}\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <MessageSquare className=\"w-5 h-5 mr-2 text-crypto-blue\" />\n              Configuration\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Enable/Disable Toggle */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-white font-medium\">Enable CallMeBot</Label>\n                <p className=\"text-gray-400 text-sm\">Turn on/off WhatsApp notifications</p>\n              </div>\n              <Switch\n                checked={settings.enabled}\n                onCheckedChange={(checked) => handleInputChange('enabled', checked)}\n              />\n            </div>\n\n            {/* Admin WhatsApp Number */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-white flex items-center\">\n                <Phone className=\"w-4 h-4 mr-2 text-crypto-green\" />\n                Admin WhatsApp Number\n              </Label>\n              <Input\n                type=\"text\"\n                placeholder=\"Enter your WhatsApp number (e.g., +1234567890)\"\n                value={settings.admin_whatsapp_number}\n                onChange={(e) => handleInputChange('admin_whatsapp_number', e.target.value)}\n                className=\"bg-gray-800 border-gray-600 text-white\"\n              />\n              <p className=\"text-gray-400 text-xs\">\n                Include country code (e.g., +1 for US, +44 for UK)\n              </p>\n            </div>\n\n            {/* API Key */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-white flex items-center\">\n                <Key className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                CallMeBot API Key\n              </Label>\n              <Input\n                type=\"password\"\n                placeholder=\"Enter your CallMeBot API key\"\n                value={settings.api_key}\n                onChange={(e) => handleInputChange('api_key', e.target.value)}\n                className=\"bg-gray-800 border-gray-600 text-white\"\n              />\n              <p className=\"text-gray-400 text-xs\">\n                Get your API key from <a href=\"https://www.callmebot.com/blog/free-api-whatsapp-messages/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-crypto-blue hover:underline\">CallMeBot.com</a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notification Settings */}\n        <Card className=\"bg-crypto-card border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <MessageSquare className=\"w-5 h-5 mr-2 text-crypto-green\" />\n              Notification Types\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-gray-400 text-sm\">\n              Choose which events should trigger WhatsApp notifications:\n            </p>\n\n            {/* New Registration */}\n            <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n              <div>\n                <Label className=\"text-white font-medium\">New User Registration</Label>\n                <p className=\"text-gray-400 text-sm\">When a new user creates an account</p>\n              </div>\n              <Switch\n                checked={settings.notifications.new_registration}\n                onCheckedChange={(checked) => handleNotificationChange('new_registration', checked)}\n                disabled={!settings.enabled}\n              />\n            </div>\n\n            {/* User Login */}\n            <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n              <div>\n                <Label className=\"text-white font-medium\">User Login</Label>\n                <p className=\"text-gray-400 text-sm\">When users log into the platform</p>\n              </div>\n              <Switch\n                checked={settings.notifications.user_login}\n                onCheckedChange={(checked) => handleNotificationChange('user_login', checked)}\n                disabled={!settings.enabled}\n              />\n            </div>\n\n            {/* Support Ticket */}\n            <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n              <div>\n                <Label className=\"text-white font-medium\">Support Tickets</Label>\n                <p className=\"text-gray-400 text-sm\">When users submit support requests</p>\n              </div>\n              <Switch\n                checked={settings.notifications.support_ticket}\n                onCheckedChange={(checked) => handleNotificationChange('support_ticket', checked)}\n                disabled={!settings.enabled}\n              />\n            </div>\n\n            {/* Withdrawal Requests */}\n            <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n              <div>\n                <Label className=\"text-white font-medium\">Withdrawal Requests</Label>\n                <p className=\"text-gray-400 text-sm\">When users request withdrawals</p>\n              </div>\n              <Switch\n                checked={settings.notifications.withdrawal_request}\n                onCheckedChange={(checked) => handleNotificationChange('withdrawal_request', checked)}\n                disabled={!settings.enabled}\n              />\n            </div>\n\n            {/* System Activity */}\n            <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n              <div>\n                <Label className=\"text-white font-medium\">System Activity</Label>\n                <p className=\"text-gray-400 text-sm\">Important system events and alerts</p>\n              </div>\n              <Switch\n                checked={settings.notifications.system_activity}\n                onCheckedChange={(checked) => handleNotificationChange('system_activity', checked)}\n                disabled={!settings.enabled}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Information Card */}\n      <Card className=\"bg-blue-500/10 border-blue-500/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start space-x-3\">\n            <MessageSquare className=\"w-5 h-5 text-blue-400 mt-1\" />\n            <div>\n              <h4 className=\"text-blue-400 font-medium mb-2\">How to set up CallMeBot:</h4>\n              <ol className=\"text-gray-300 text-sm space-y-1 list-decimal list-inside\">\n                <li>Send a message to +34 621 21 64 79 with the text: \"I allow callmebot to send me messages\"</li>\n                <li>Wait for the confirmation message with your API key</li>\n                <li>Enter your WhatsApp number and API key above</li>\n                <li>Enable the notification types you want to receive</li>\n                <li>Save the settings to activate notifications</li>\n              </ol>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11463}},"version":1}